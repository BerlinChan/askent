fragment QuestionPagedFields on QuestionPaged {
  hash
  limit
  offset
  totalCount
  hasNextPage
}
fragment QuestionFields on Question {
  id
  createdAt
  updatedAt
  voteUpCount
  content
  reviewStatus
  star
  top
  author {
    id
    name
    avatar
  }
}

query QuestionsByEvent($input: QuestionQueryInput!) {
  questionsByEvent(input: $input) {
    ...QuestionPagedFields
    list {
      ...QuestionFields
    }
  }
}

mutation DeleteQuestion($questionId: ID!) {
  deleteQuestion(questionId: $questionId) {
    id
  }
}

mutation DeleteAllReviewQuestions($eventId: ID!) {
  deleteAllReviewQuestions(eventId: $eventId)
}

mutation PublishAllReviewQuestions($eventId: ID!) {
  publishAllReviewQuestions(eventId: $eventId)
}

mutation UpdateQuestionReviewStatus(
  $questionId: ID!
  $reviewStatus: ReviewStatus!
) {
  updateQuestionReviewStatus(
    questionId: $questionId
    reviewStatus: $reviewStatus
  ) {
    ...QuestionFields
  }
}
mutation UpdateQuestionStar($questionId: ID!, $star: Boolean!) {
  updateQuestionStar(questionId: $questionId, star: $star) {
    ...QuestionFields
  }
}
mutation UpdateQuestionTop($questionId: ID!, $top: Boolean!) {
  updateQuestionTop(questionId: $questionId, top: $top) {
    ...QuestionFields
  }
}
mutation UpdateQuestionContent($questionId: ID!, $content: String!) {
  updateQuestionContent(questionId: $questionId, content: $content) {
    ...QuestionFields
  }
}

subscription QuestionRealtimeSearch($eventId: String!, $hash: String!) {
  questionRealtimeSearch(eventId: $eventId, hash: $hash, asRole: Admin) {
    totalCount
    insertList {
      ...QuestionFields
    }
    updateList {
      ...QuestionFields
    }
    deleteList
  }
}
