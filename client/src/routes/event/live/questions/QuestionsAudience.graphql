fragment QuestionAudienceFields on Question {
  id
  createdAt
  updatedAt
  content
  reviewStatus
  top
  star
  voted
  voteUpCount
  author {
    id
    name
    avatar
  }
}

query QuestionsByEventAudience(
  $eventId: ID!
  $pagination: PaginationInput!
  $order: QuestionOrder
) {
  questionsByEventAudience(
    eventId: $eventId
    pagination: $pagination
    order: $order
  ) @connection(key: "questionsByEventAudience", filter: ["eventId", "order"]) {
    ...QuestionPagedFields
    list {
      ...QuestionAudienceFields
    }
  }
}

query QuestionsByMe(
  $pagination: PaginationInput! # $orderBy: QuestionOrderByInput
) {
  questionsByMe(pagination: $pagination) {
    ...QuestionPagedFields
    list {
      ...QuestionAudienceFields
    }
  }
}

mutation CreateQuestion($input: CreateQuestionInput!) {
  createQuestion(input: $input) {
    ...QuestionAudienceFields
  }
}

mutation VoteUpQuestion($questionId: ID!) {
  voteUpQuestion(questionId: $questionId) {
    ...QuestionAudienceFields
  }
}

# subscription QuestionAddedAudience(
#   $eventId: ID!
#   $asRole: RoleName!
#   $questionFilter: QuestionFilter
#   $searchString: String
#   $order: QuestionOrder
#   $limit: Int
# ) {
#   questionAdded(
#     eventId: $eventId
#     asRole: $asRole
#     questionFilter: $questionFilter
#     searchString: $searchString
#     order: $order
#     limit: $limit
#   ) {
#     ...QuestionAudienceFields
#   }
# }

# subscription QuestionUpdatedAudience($eventId: ID!, $asRole: RoleName!) {
#   questionUpdated(eventId: $eventId, asRole: $asRole) {
#     ...QuestionAudienceFields
#   }
# }

# subscription QuestionRemovedAudience($eventId: ID!, $asRole: RoleName!) {
#   questionRemoved(eventId: $eventId, asRole: $asRole)
# }
