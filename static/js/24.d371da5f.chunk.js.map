{"version":3,"sources":["../../../node_modules/@material-ui/core/esm/utils/useIsFocusVisible.js","../../../node_modules/react-intl/lib/src/components/useIntl.js","../../../node_modules/react-intl/lib/src/components/message.js","../../../node_modules/@material-ui/core/esm/Link/Link.js","../../../node_modules/@material-ui/core/esm/Typography/Typography.js","routes/error/401.tsx"],"names":["hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","text","search","url","tel","email","password","number","date","month","week","time","datetime","handleKeyDown","event","metaKey","altKey","ctrlKey","handlePointerDown","handleVisibilityChange","this","visibilityState","isFocusVisible","target","matches","error","node","type","tagName","readOnly","isContentEditable","focusTriggersKeyboardModality","handleBlurVisible","window","clearTimeout","setTimeout","useIsFocusVisible","onBlurVisible","ref","React","instance","doc","ReactDOM","ownerDocument","addEventListener","useIntl","intl","Context","invariantIntlContext","FormattedMessage","props","formatMessage","_a","textComponent","Text","id","description","defaultMessage","values","children","_b","Component","nodes","ignoreTag","Array","isArray","toArray","displayName","MemoizedFormattedMessage","prevProps","nextProps","otherProps","__rest","nextValues","nextOtherProps","shallowEqual","Link","classes","className","_props$color","color","_props$component","component","onBlur","onFocus","TypographyClasses","_props$underline","underline","_props$variant","variant","other","_objectWithoutProperties","_useIsFocusVisible","focusVisibleRef","_React$useState","focusVisible","setFocusVisible","handlerRef","useForkRef","Typography","_extends","clsx","root","concat","capitalize","button","withStyles","underlineNone","textDecoration","underlineHover","underlineAlways","position","WebkitTapHighlightColor","backgroundColor","outline","border","margin","borderRadius","padding","cursor","userSelect","verticalAlign","borderStyle","name","defaultVariantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","_props$align","align","_props$display","display","_props$gutterBottom","gutterBottom","_props$noWrap","noWrap","_props$paragraph","paragraph","_props$variantMapping","variantMapping","theme","typography","caption","overline","srOnly","height","width","overflow","alignLeft","textAlign","alignCenter","alignRight","alignJustify","textOverflow","whiteSpace","marginBottom","colorInherit","colorPrimary","palette","primary","main","colorSecondary","secondary","colorTextPrimary","colorTextSecondary","colorError","displayInline","displayBlock","Error401","removeToken","useToken","useState","countdown","setCountdown","history","useHistory","useEffect","intervalHandler","setInterval","replace","clearInterval","Fragment","RouterLink","to"],"mappings":"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","file":"static/js/24.d371da5f.chunk.js","sourcesContent":["// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nvar hadKeyboardEvent = true;\nvar hadFocusVisibleRecently = false;\nvar hadFocusVisibleRecentlyTimeout = null;\nvar inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @return {boolean}\n */\n\nfunction focusTriggersKeyboardModality(node) {\n  var type = node.type,\n      tagName = node.tagName;\n\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n\n  if (node.isContentEditable) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */\n\n\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  hadKeyboardEvent = true;\n}\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */\n\n\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\n\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\n\nfunction prepare(doc) {\n  doc.addEventListener('keydown', handleKeyDown, true);\n  doc.addEventListener('mousedown', handlePointerDown, true);\n  doc.addEventListener('pointerdown', handlePointerDown, true);\n  doc.addEventListener('touchstart', handlePointerDown, true);\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nexport function teardown(doc) {\n  doc.removeEventListener('keydown', handleKeyDown, true);\n  doc.removeEventListener('mousedown', handlePointerDown, true);\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\n  doc.removeEventListener('touchstart', handlePointerDown, true);\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nfunction isFocusVisible(event) {\n  var target = event.target;\n\n  try {\n    return target.matches(':focus-visible');\n  } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError\n  // we use our own heuristic for those browsers\n  // rethrow might be better if it's not the expected error but do we really\n  // want to crash if focus-visible malfunctioned?\n  // no need for validFocusTarget check. the user does that by attaching it to\n  // focusable events only\n\n\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\n}\n/**\n * Should be called if a blur event is fired on a focus-visible element\n */\n\n\nfunction handleBlurVisible() {\n  // To detect a tab/window switch, we look for a blur event followed\n  // rapidly by a visibility change.\n  // If we don't see a visibility change within 100ms, it's probably a\n  // regular focus change.\n  hadFocusVisibleRecently = true;\n  window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n  hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n    hadFocusVisibleRecently = false;\n  }, 100);\n}\n\nexport default function useIsFocusVisible() {\n  var ref = React.useCallback(function (instance) {\n    var node = ReactDOM.findDOMNode(instance);\n\n    if (node != null) {\n      prepare(node.ownerDocument);\n    }\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue(isFocusVisible);\n  }\n\n  return {\n    isFocusVisible: isFocusVisible,\n    onBlurVisible: handleBlurVisible,\n    ref: ref\n  };\n}","import * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nexport default function useIntl() {\n    var intl = React.useContext(Context);\n    invariantIntlContext(intl);\n    return intl;\n}\n","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nimport { shallowEqual } from '../utils';\nfunction areEqual(prevProps, nextProps) {\n    var values = prevProps.values, otherProps = __rest(prevProps, [\"values\"]);\n    var nextValues = nextProps.values, nextOtherProps = __rest(nextProps, [\"values\"]);\n    return (shallowEqual(nextValues, values) &&\n        shallowEqual(otherProps, nextOtherProps));\n}\nfunction FormattedMessage(props) {\n    var intl = useIntl();\n    var formatMessage = intl.formatMessage, _a = intl.textComponent, Text = _a === void 0 ? React.Fragment : _a;\n    var id = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b = props.tagName, Component = _b === void 0 ? Text : _b, ignoreTag = props.ignoreTag;\n    var descriptor = { id: id, description: description, defaultMessage: defaultMessage };\n    var nodes = formatMessage(descriptor, values, {\n        ignoreTag: ignoreTag,\n    });\n    if (typeof children === 'function') {\n        return children(Array.isArray(nodes) ? nodes : [nodes]);\n    }\n    if (Component) {\n        return React.createElement(Component, null, React.Children.toArray(nodes));\n    }\n    return React.createElement(React.Fragment, null, nodes);\n}\nFormattedMessage.displayName = 'FormattedMessage';\nvar MemoizedFormattedMessage = React.memo(FormattedMessage, areEqual);\nMemoizedFormattedMessage.displayName = 'MemoizedFormattedMessage';\nexport default MemoizedFormattedMessage;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `underline=\"none\"`. */\n  underlineNone: {\n    textDecoration: 'none'\n  },\n\n  /* Styles applied to the root element if `underline=\"hover\"`. */\n  underlineHover: {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  },\n\n  /* Styles applied to the root element if `underline=\"always\"`. */\n  underlineAlways: {\n    textDecoration: 'underline'\n  },\n  // Same reset as ButtonBase.root\n\n  /* Styles applied to the root element if `component=\"button\"`. */\n  button: {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none',\n    // Reset\n    '-webkit-appearance': 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    },\n    '&$focusVisible': {\n      outline: 'auto'\n    }\n  },\n\n  /* Pseudo-class applied to the root element if the link is keyboard focused. */\n  focusVisible: {}\n};\nvar Link = /*#__PURE__*/React.forwardRef(function Link(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'a' : _props$component,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      TypographyClasses = props.TypographyClasses,\n      _props$underline = props.underline,\n      underline = _props$underline === void 0 ? 'hover' : _props$underline,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'inherit' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\"]);\n\n  var _useIsFocusVisible = useIsFocusVisible(),\n      isFocusVisible = _useIsFocusVisible.isFocusVisible,\n      onBlurVisible = _useIsFocusVisible.onBlurVisible,\n      focusVisibleRef = _useIsFocusVisible.ref;\n\n  var _React$useState = React.useState(false),\n      focusVisible = _React$useState[0],\n      setFocusVisible = _React$useState[1];\n\n  var handlerRef = useForkRef(ref, focusVisibleRef);\n\n  var handleBlur = function handleBlur(event) {\n    if (focusVisible) {\n      onBlurVisible();\n      setFocusVisible(false);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  var handleFocus = function handleFocus(event) {\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    className: clsx(classes.root, classes[\"underline\".concat(capitalize(underline))], className, focusVisible && classes.focusVisible, component === 'button' && classes.button),\n    classes: TypographyClasses,\n    color: color,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    variant: variant\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes = {\n  /**\n   * The content of the link.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the link.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * `classes` prop applied to the [`Typography`](/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n\n  /**\n   * Controls when the link should have an underline.\n   */\n  underline: PropTypes.oneOf(['none', 'hover', 'always']),\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiLink'\n})(Link);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      margin: 0\n    },\n\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n\n    /* Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers. */\n    srOnly: {\n      position: 'absolute',\n      height: 1,\n      width: 1,\n      overflow: 'hidden'\n    },\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `nowrap={true}`. */\n    noWrap: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `gutterBottom={true}`. */\n    gutterBottom: {\n      marginBottom: '0.35em'\n    },\n\n    /* Styles applied to the root element if `paragraph={true}`. */\n    paragraph: {\n      marginBottom: 16\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"textPrimary\"`. */\n    colorTextPrimary: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `color=\"textSecondary\"`. */\n    colorTextSecondary: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `display=\"inline\"`. */\n    displayInline: {\n      display: 'inline'\n    },\n\n    /* Styles applied to the root element if `display=\"block\"`. */\n    displayBlock: {\n      display: 'block'\n    }\n  };\n};\nvar defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p'\n};\nvar Typography = /*#__PURE__*/React.forwardRef(function Typography(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'initial' : _props$color,\n      component = props.component,\n      _props$display = props.display,\n      display = _props$display === void 0 ? 'initial' : _props$display,\n      _props$gutterBottom = props.gutterBottom,\n      gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,\n      _props$noWrap = props.noWrap,\n      noWrap = _props$noWrap === void 0 ? false : _props$noWrap,\n      _props$paragraph = props.paragraph,\n      paragraph = _props$paragraph === void 0 ? false : _props$paragraph,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'body1' : _props$variant,\n      _props$variantMapping = props.variantMapping,\n      variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes[\"color\".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], display !== 'initial' && classes[\"display\".concat(capitalize(display))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   * Overrides the behavior of the `variantMapping` prop.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['initial', 'block', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'srOnly', 'inherit']),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);","import React from \"react\";\nimport { Link as RouterLink, useHistory } from \"react-router-dom\";\nimport { Link, Typography } from \"@material-ui/core\";\nimport { useToken } from \"../../hooks\";\nimport { FormattedMessage } from \"react-intl\";\n\nconst Error401: React.FC = (props) => {\n  const { removeToken } = useToken();\n  const [countdown, setCountdown] = React.useState(5);\n  const history = useHistory();\n\n  React.useEffect(() => {\n    removeToken();\n    const intervalHandler = setInterval(() => {\n      if (countdown > 0) {\n        setCountdown(countdown - 1);\n      } else {\n        history.replace(\"/\");\n      }\n    }, 1000);\n\n    return () => clearInterval(intervalHandler);\n  });\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h4\">401 Unauthorized</Typography>\n      <Typography>\n        <FormattedMessage id=\"Will back to\" defaultMessage=\"Will back to\" />\n      </Typography>\n      <Link color=\"inherit\" component={RouterLink} to=\"/\">\n        <FormattedMessage id=\"home_page\" defaultMessage=\"home page \" />\n      </Link>\n      in {countdown}s\n    </React.Fragment>\n  );\n};\n\nexport default Error401;\n"],"sourceRoot":""}