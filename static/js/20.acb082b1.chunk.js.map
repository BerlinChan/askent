{"version":3,"sources":["../node_modules/askent-common/src/constant.ts","generated/hasuraHooks.tsx","utils.ts","../../../node_modules/@material-ui/core/esm/utils/unstable_useId.js","components/ListFooter/index.tsx","components/QuestionToggleButton/index.tsx","components/QuestionOrderMenu/index.tsx","routes/event/wall/OrderSelect.tsx","routes/event/wall/QuestionItem.tsx","routes/event/wall/QuestionList.tsx","routes/event/wall/index.tsx"],"names":["DEFAULT_PAGE_OFFSET","DEFAULT_PAGE_LIMIT","USER_NAME_MAX_LENGTH","USER_EMAIL_MAX_LENGTH","USER_PASSWORD_MAX_LENGTH","QUESTION_CONTENT_MAX_LENGTH","REPLY_CONTENT_MAX_LENGTH","EVENT_NAME_MAX_LENGTH","EVENT_CODE_MAX_LENGTH","EventAudiences_Constraint","EventAudiences_Select_Column","EventAudiences_Update_Column","EventGuestes_Constraint","EventGuestes_Select_Column","EventGuestes_Update_Column","Event_Constraint","Event_Select_Column","Event_Update_Column","Order_By","Question_Constraint","Question_Select_Column","Question_Update_Column","Reply_Constraint","Reply_Select_Column","Reply_Update_Column","Role_Constraint","Role_Select_Column","Role_Update_Column","UserRoles_Constraint","UserRoles_Select_Column","UserRoles_Update_Column","User_Constraint","User_Select_Column","User_Update_Column","UsersVoteUpQuestions_Constraint","UsersVoteUpQuestions_Select_Column","UsersVoteUpQuestions_Update_Column","defaultOptions","ReplyLiveQueryFieldsFragmentDoc","gql","EventDetailLiveQueryFieldsFragmentDoc","QuestionLiveQueryFieldsFragmentDoc","QuestionLiveQueryAudienceFieldsFragmentDoc","QuestionLiveQueryDocument","useQuestionLiveQuerySubscription","baseOptions","options","Apollo","QuestionCountLiveQueryDocument","useQuestionCountLiveQuerySubscription","ReplyLiveQueryDocument","useReplyLiveQuerySubscription","EventDetailLiveQueryDocument","useEventDetailLiveQuerySubscription","QuestionLiveQueryAudienceDocument","useQuestionLiveQueryAudienceSubscription","QuestionCountLiveQueryAudienceDocument","useQuestionCountLiveQueryAudienceSubscription","ReplyLiveQueryAudienceDocument","useReplyLiveQueryAudienceSubscription","getQuestionOrderByCondition","questionOrder","QuestionOrder","Recent","top","Desc","createdAt","voteUpCount","content","Oldest","Asc","Starred","star","getHasNextPage","offset","limit","total","getEventDateStatus","startAt","endAt","now","isAfter","Date","isBefore","EventDateStatus","Active","isEqual","Upcoming","Past","useId","idOverride","_React$useState","React","defaultId","setDefaultId","id","concat","Math","round","random","useStyles","makeStyles","theme","createStyles","listFooter","display","justifyContent","padding","spacing","color","palette","text","secondary","ListFooter","loading","hasNextPage","classes","className","size","defaultMessage","QuestionToggleButton","status","onTitle","offTitle","onIcon","offIcon","handleToggle","rest","title","onClick","e","getQuestionOrderLabel","value","Popular","OrderSelectMenu","anchorOrigin","transformOrigin","menuElState","orderSelectedState","orderSelected","setOrderSelected","menuEl","setMenuEl","handleMenuClose","keepMounted","anchorEl","getContentAnchorEl","open","Boolean","onClose","Object","values","map","item","menuItem","selected","sortSelect","alignItems","cursor","marginLeft","fontSize","typography","pxToRem","icon","marginRight","width","OrderSelect","useState","mouseStop","useMouseMove","Fragment","Typography","event","currentTarget","Fade","in","QuestionOrderMenu","vertical","horizontal","listItem","flexWrap","position","marginBottom","borderRadius","shape","backgroundColor","background","default","opacity","transition","transitions","create","topQuestion","success","type","itemPrimary","avatar","height","questionContent","marginTop","questionActionBox","right","thumbUpBox","voteCount","thumbUpIcon","QuestionListItem","question","isScrolling","formatMessage","useIntl","useUpdateQuestionReviewStatusMutation","updateQuestionReviewStatusMutation","updateQuestionReviewStatusLoading","useUpdateQuestionTopMutation","updateQuestionTopMutation","updateQuestionTopLoading","handleArchiveClick","questionId","currentStatus","a","variables","reviewStatus","ReviewStatus","Publish","Archive","handleTopClick","ListItem","component","ListItemText","primary","Box","Avatar","alt","anonymous","author","name","src","variant","disabled","memo","prevProps","nextProps","R","QuestionList","questionQueryState","questionQueryInput","setIsScrolling","questionLiveQueryData","setQuestionLiveQueryData","questionCountLiveQueryData","setQuestionCountLiveQueryData","onSubscriptionData","client","subscriptionData","data","where","question_aggregate","aggregate","count","style","totalCount","length","scrolling","endReached","itemContent","index","QuestionItem","components","Footer","wallGrid","gridItem","flexDirection","infoBox","textAlign","flex","rightTitleBox","left","listBox","EventWall","useParams","qrcodeCardRef","useRef","qrcodeCardWidth","setQrcodeCardWidth","eventDetailData","setEventDetailData","filter","QuestionFilter","searchString","questionOrderSelectedState","eventId","_eq","_ilike","order_by","onResize","Number","current","clientWidth","useEffect","window","addEventListener","removeEventListener","Grid","container","xs","Card","ref","includeMargin","location","origin","code"],"mappings":"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","file":"static/js/20.acb082b1.chunk.js","sourcesContent":["export const DEFAULT_PAGE_OFFSET = 0;\nexport const DEFAULT_PAGE_LIMIT = 50;\nexport const MAX_PAGE_LIMIT = 1000;\n\nexport const USER_NAME_MAX_LENGTH = 30;\nexport const USER_EMAIL_MAX_LENGTH = 30;\nexport const USER_PASSWORD_MAX_LENGTH = 30;\nexport const QUESTION_CONTENT_MAX_LENGTH = 300;\nexport const REPLY_CONTENT_MAX_LENGTH = 1000;\nexport const EVENT_NAME_MAX_LENGTH = 20;\nexport const EVENT_CODE_MAX_LENGTH = 20;\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  question_reviewstatus_enum: any;\n  reply_reviewstatus_enum: any;\n  role_name_enum: any;\n  timestamp: any;\n  uuid: any;\n};\n\n\n/** Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'. */\nexport type Boolean_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Boolean']>;\n  _gt?: Maybe<Scalars['Boolean']>;\n  _gte?: Maybe<Scalars['Boolean']>;\n  _in?: Maybe<Array<Scalars['Boolean']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Boolean']>;\n  _lte?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Scalars['Boolean']>;\n  _nin?: Maybe<Array<Scalars['Boolean']>>;\n};\n\n/** Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'. */\nexport type Int_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Int']>;\n  _gt?: Maybe<Scalars['Int']>;\n  _gte?: Maybe<Scalars['Int']>;\n  _in?: Maybe<Array<Scalars['Int']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Int']>;\n  _lte?: Maybe<Scalars['Int']>;\n  _neq?: Maybe<Scalars['Int']>;\n  _nin?: Maybe<Array<Scalars['Int']>>;\n};\n\n/** Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'. */\nexport type String_Comparison_Exp = {\n  _eq?: Maybe<Scalars['String']>;\n  _gt?: Maybe<Scalars['String']>;\n  _gte?: Maybe<Scalars['String']>;\n  /** does the column match the given case-insensitive pattern */\n  _ilike?: Maybe<Scalars['String']>;\n  _in?: Maybe<Array<Scalars['String']>>;\n  /** does the column match the given POSIX regular expression, case insensitive */\n  _iregex?: Maybe<Scalars['String']>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  /** does the column match the given pattern */\n  _like?: Maybe<Scalars['String']>;\n  _lt?: Maybe<Scalars['String']>;\n  _lte?: Maybe<Scalars['String']>;\n  _neq?: Maybe<Scalars['String']>;\n  /** does the column NOT match the given case-insensitive pattern */\n  _nilike?: Maybe<Scalars['String']>;\n  _nin?: Maybe<Array<Scalars['String']>>;\n  /** does the column NOT match the given POSIX regular expression, case insensitive */\n  _niregex?: Maybe<Scalars['String']>;\n  /** does the column NOT match the given pattern */\n  _nlike?: Maybe<Scalars['String']>;\n  /** does the column NOT match the given POSIX regular expression, case sensitive */\n  _nregex?: Maybe<Scalars['String']>;\n  /** does the column NOT match the given SQL regular expression */\n  _nsimilar?: Maybe<Scalars['String']>;\n  /** does the column match the given POSIX regular expression, case sensitive */\n  _regex?: Maybe<Scalars['String']>;\n  /** does the column match the given SQL regular expression */\n  _similar?: Maybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"event\" */\nexport type Event = {\n  __typename?: 'event';\n  /** An array relationship */\n  audiences: Array<EventAudiences>;\n  /** An aggregate relationship */\n  audiences_aggregate: EventAudiences_Aggregate;\n  code: Scalars['String'];\n  createdAt: Scalars['timestamp'];\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  endAt: Scalars['timestamp'];\n  /** An array relationship */\n  guestes: Array<EventGuestes>;\n  /** An aggregate relationship */\n  guestes_aggregate: EventGuestes_Aggregate;\n  id: Scalars['uuid'];\n  moderation?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  /** An object relationship */\n  owner?: Maybe<User>;\n  ownerId?: Maybe<Scalars['uuid']>;\n  /** An array relationship */\n  questions: Array<Question>;\n  /** An aggregate relationship */\n  questions_aggregate: Question_Aggregate;\n  startAt: Scalars['timestamp'];\n  updatedAt: Scalars['timestamp'];\n};\n\n\n/** columns and relationships of \"event\" */\nexport type EventAudiencesArgs = {\n  distinct_on?: Maybe<Array<EventAudiences_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventAudiences_Order_By>>;\n  where?: Maybe<EventAudiences_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"event\" */\nexport type EventAudiences_AggregateArgs = {\n  distinct_on?: Maybe<Array<EventAudiences_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventAudiences_Order_By>>;\n  where?: Maybe<EventAudiences_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"event\" */\nexport type EventGuestesArgs = {\n  distinct_on?: Maybe<Array<EventGuestes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventGuestes_Order_By>>;\n  where?: Maybe<EventGuestes_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"event\" */\nexport type EventGuestes_AggregateArgs = {\n  distinct_on?: Maybe<Array<EventGuestes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventGuestes_Order_By>>;\n  where?: Maybe<EventGuestes_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"event\" */\nexport type EventQuestionsArgs = {\n  distinct_on?: Maybe<Array<Question_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Question_Order_By>>;\n  where?: Maybe<Question_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"event\" */\nexport type EventQuestions_AggregateArgs = {\n  distinct_on?: Maybe<Array<Question_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Question_Order_By>>;\n  where?: Maybe<Question_Bool_Exp>;\n};\n\n/** columns and relationships of \"eventAudiences\" */\nexport type EventAudiences = {\n  __typename?: 'eventAudiences';\n  /** An object relationship */\n  event: Event;\n  eventId: Scalars['uuid'];\n  /** An object relationship */\n  user: User;\n  userId: Scalars['uuid'];\n};\n\n/** aggregated selection of \"eventAudiences\" */\nexport type EventAudiences_Aggregate = {\n  __typename?: 'eventAudiences_aggregate';\n  aggregate?: Maybe<EventAudiences_Aggregate_Fields>;\n  nodes: Array<EventAudiences>;\n};\n\n/** aggregate fields of \"eventAudiences\" */\nexport type EventAudiences_Aggregate_Fields = {\n  __typename?: 'eventAudiences_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<EventAudiences_Max_Fields>;\n  min?: Maybe<EventAudiences_Min_Fields>;\n};\n\n\n/** aggregate fields of \"eventAudiences\" */\nexport type EventAudiences_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<EventAudiences_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"eventAudiences\" */\nexport type EventAudiences_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<EventAudiences_Max_Order_By>;\n  min?: Maybe<EventAudiences_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"eventAudiences\" */\nexport type EventAudiences_Arr_Rel_Insert_Input = {\n  data: Array<EventAudiences_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: Maybe<EventAudiences_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"eventAudiences\". All fields are combined with a logical 'AND'. */\nexport type EventAudiences_Bool_Exp = {\n  _and?: Maybe<Array<EventAudiences_Bool_Exp>>;\n  _not?: Maybe<EventAudiences_Bool_Exp>;\n  _or?: Maybe<Array<EventAudiences_Bool_Exp>>;\n  event?: Maybe<Event_Bool_Exp>;\n  eventId?: Maybe<Uuid_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  userId?: Maybe<Uuid_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"eventAudiences\" */\nexport enum EventAudiences_Constraint {\n  /** unique or primary key constraint */\n  PkDc9339c2c2f8cea2cb31c3c2134 = 'PK_dc9339c2c2f8cea2cb31c3c2134'\n}\n\n/** input type for inserting data into table \"eventAudiences\" */\nexport type EventAudiences_Insert_Input = {\n  event?: Maybe<Event_Obj_Rel_Insert_Input>;\n  eventId?: Maybe<Scalars['uuid']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** aggregate max on columns */\nexport type EventAudiences_Max_Fields = {\n  __typename?: 'eventAudiences_max_fields';\n  eventId?: Maybe<Scalars['uuid']>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"eventAudiences\" */\nexport type EventAudiences_Max_Order_By = {\n  eventId?: Maybe<Order_By>;\n  userId?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type EventAudiences_Min_Fields = {\n  __typename?: 'eventAudiences_min_fields';\n  eventId?: Maybe<Scalars['uuid']>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"eventAudiences\" */\nexport type EventAudiences_Min_Order_By = {\n  eventId?: Maybe<Order_By>;\n  userId?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"eventAudiences\" */\nexport type EventAudiences_Mutation_Response = {\n  __typename?: 'eventAudiences_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<EventAudiences>;\n};\n\n/** on conflict condition type for table \"eventAudiences\" */\nexport type EventAudiences_On_Conflict = {\n  constraint: EventAudiences_Constraint;\n  update_columns?: Array<EventAudiences_Update_Column>;\n  where?: Maybe<EventAudiences_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"eventAudiences\". */\nexport type EventAudiences_Order_By = {\n  event?: Maybe<Event_Order_By>;\n  eventId?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  userId?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: eventAudiences */\nexport type EventAudiences_Pk_Columns_Input = {\n  eventId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n/** select columns of table \"eventAudiences\" */\nexport enum EventAudiences_Select_Column {\n  /** column name */\n  EventId = 'eventId',\n  /** column name */\n  UserId = 'userId'\n}\n\n/** input type for updating data in table \"eventAudiences\" */\nexport type EventAudiences_Set_Input = {\n  eventId?: Maybe<Scalars['uuid']>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** update columns of table \"eventAudiences\" */\nexport enum EventAudiences_Update_Column {\n  /** column name */\n  EventId = 'eventId',\n  /** column name */\n  UserId = 'userId'\n}\n\n/** columns and relationships of \"eventGuestes\" */\nexport type EventGuestes = {\n  __typename?: 'eventGuestes';\n  /** An object relationship */\n  event: Event;\n  eventId: Scalars['uuid'];\n  /** An object relationship */\n  user: User;\n  userId: Scalars['uuid'];\n};\n\n/** aggregated selection of \"eventGuestes\" */\nexport type EventGuestes_Aggregate = {\n  __typename?: 'eventGuestes_aggregate';\n  aggregate?: Maybe<EventGuestes_Aggregate_Fields>;\n  nodes: Array<EventGuestes>;\n};\n\n/** aggregate fields of \"eventGuestes\" */\nexport type EventGuestes_Aggregate_Fields = {\n  __typename?: 'eventGuestes_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<EventGuestes_Max_Fields>;\n  min?: Maybe<EventGuestes_Min_Fields>;\n};\n\n\n/** aggregate fields of \"eventGuestes\" */\nexport type EventGuestes_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<EventGuestes_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"eventGuestes\" */\nexport type EventGuestes_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<EventGuestes_Max_Order_By>;\n  min?: Maybe<EventGuestes_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"eventGuestes\" */\nexport type EventGuestes_Arr_Rel_Insert_Input = {\n  data: Array<EventGuestes_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: Maybe<EventGuestes_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"eventGuestes\". All fields are combined with a logical 'AND'. */\nexport type EventGuestes_Bool_Exp = {\n  _and?: Maybe<Array<EventGuestes_Bool_Exp>>;\n  _not?: Maybe<EventGuestes_Bool_Exp>;\n  _or?: Maybe<Array<EventGuestes_Bool_Exp>>;\n  event?: Maybe<Event_Bool_Exp>;\n  eventId?: Maybe<Uuid_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  userId?: Maybe<Uuid_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"eventGuestes\" */\nexport enum EventGuestes_Constraint {\n  /** unique or primary key constraint */\n  Pk_3a6dc9b0d12bf4cc96fec9c0bbf = 'PK_3a6dc9b0d12bf4cc96fec9c0bbf'\n}\n\n/** input type for inserting data into table \"eventGuestes\" */\nexport type EventGuestes_Insert_Input = {\n  event?: Maybe<Event_Obj_Rel_Insert_Input>;\n  eventId?: Maybe<Scalars['uuid']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** aggregate max on columns */\nexport type EventGuestes_Max_Fields = {\n  __typename?: 'eventGuestes_max_fields';\n  eventId?: Maybe<Scalars['uuid']>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"eventGuestes\" */\nexport type EventGuestes_Max_Order_By = {\n  eventId?: Maybe<Order_By>;\n  userId?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type EventGuestes_Min_Fields = {\n  __typename?: 'eventGuestes_min_fields';\n  eventId?: Maybe<Scalars['uuid']>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"eventGuestes\" */\nexport type EventGuestes_Min_Order_By = {\n  eventId?: Maybe<Order_By>;\n  userId?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"eventGuestes\" */\nexport type EventGuestes_Mutation_Response = {\n  __typename?: 'eventGuestes_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<EventGuestes>;\n};\n\n/** on conflict condition type for table \"eventGuestes\" */\nexport type EventGuestes_On_Conflict = {\n  constraint: EventGuestes_Constraint;\n  update_columns?: Array<EventGuestes_Update_Column>;\n  where?: Maybe<EventGuestes_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"eventGuestes\". */\nexport type EventGuestes_Order_By = {\n  event?: Maybe<Event_Order_By>;\n  eventId?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  userId?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: eventGuestes */\nexport type EventGuestes_Pk_Columns_Input = {\n  eventId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n/** select columns of table \"eventGuestes\" */\nexport enum EventGuestes_Select_Column {\n  /** column name */\n  EventId = 'eventId',\n  /** column name */\n  UserId = 'userId'\n}\n\n/** input type for updating data in table \"eventGuestes\" */\nexport type EventGuestes_Set_Input = {\n  eventId?: Maybe<Scalars['uuid']>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** update columns of table \"eventGuestes\" */\nexport enum EventGuestes_Update_Column {\n  /** column name */\n  EventId = 'eventId',\n  /** column name */\n  UserId = 'userId'\n}\n\n/** aggregated selection of \"event\" */\nexport type Event_Aggregate = {\n  __typename?: 'event_aggregate';\n  aggregate?: Maybe<Event_Aggregate_Fields>;\n  nodes: Array<Event>;\n};\n\n/** aggregate fields of \"event\" */\nexport type Event_Aggregate_Fields = {\n  __typename?: 'event_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<Event_Max_Fields>;\n  min?: Maybe<Event_Min_Fields>;\n};\n\n\n/** aggregate fields of \"event\" */\nexport type Event_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Event_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"event\" */\nexport type Event_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Event_Max_Order_By>;\n  min?: Maybe<Event_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"event\" */\nexport type Event_Arr_Rel_Insert_Input = {\n  data: Array<Event_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: Maybe<Event_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"event\". All fields are combined with a logical 'AND'. */\nexport type Event_Bool_Exp = {\n  _and?: Maybe<Array<Event_Bool_Exp>>;\n  _not?: Maybe<Event_Bool_Exp>;\n  _or?: Maybe<Array<Event_Bool_Exp>>;\n  audiences?: Maybe<EventAudiences_Bool_Exp>;\n  code?: Maybe<String_Comparison_Exp>;\n  createdAt?: Maybe<Timestamp_Comparison_Exp>;\n  deletedAt?: Maybe<Timestamp_Comparison_Exp>;\n  endAt?: Maybe<Timestamp_Comparison_Exp>;\n  guestes?: Maybe<EventGuestes_Bool_Exp>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  moderation?: Maybe<Boolean_Comparison_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n  owner?: Maybe<User_Bool_Exp>;\n  ownerId?: Maybe<Uuid_Comparison_Exp>;\n  questions?: Maybe<Question_Bool_Exp>;\n  startAt?: Maybe<Timestamp_Comparison_Exp>;\n  updatedAt?: Maybe<Timestamp_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"event\" */\nexport enum Event_Constraint {\n  /** unique or primary key constraint */\n  Pk_30c2f3bbaf6d34a55f8ae6e4614 = 'PK_30c2f3bbaf6d34a55f8ae6e4614',\n  /** unique or primary key constraint */\n  Uq_58f788de12432757f10c683bbd6 = 'UQ_58f788de12432757f10c683bbd6'\n}\n\n/** input type for inserting data into table \"event\" */\nexport type Event_Insert_Input = {\n  audiences?: Maybe<EventAudiences_Arr_Rel_Insert_Input>;\n  code?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  endAt?: Maybe<Scalars['timestamp']>;\n  guestes?: Maybe<EventGuestes_Arr_Rel_Insert_Input>;\n  id?: Maybe<Scalars['uuid']>;\n  moderation?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n  owner?: Maybe<User_Obj_Rel_Insert_Input>;\n  ownerId?: Maybe<Scalars['uuid']>;\n  questions?: Maybe<Question_Arr_Rel_Insert_Input>;\n  startAt?: Maybe<Scalars['timestamp']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n};\n\n/** aggregate max on columns */\nexport type Event_Max_Fields = {\n  __typename?: 'event_max_fields';\n  code?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  endAt?: Maybe<Scalars['timestamp']>;\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['String']>;\n  ownerId?: Maybe<Scalars['uuid']>;\n  startAt?: Maybe<Scalars['timestamp']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n};\n\n/** order by max() on columns of table \"event\" */\nexport type Event_Max_Order_By = {\n  code?: Maybe<Order_By>;\n  createdAt?: Maybe<Order_By>;\n  deletedAt?: Maybe<Order_By>;\n  endAt?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  ownerId?: Maybe<Order_By>;\n  startAt?: Maybe<Order_By>;\n  updatedAt?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Event_Min_Fields = {\n  __typename?: 'event_min_fields';\n  code?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  endAt?: Maybe<Scalars['timestamp']>;\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['String']>;\n  ownerId?: Maybe<Scalars['uuid']>;\n  startAt?: Maybe<Scalars['timestamp']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n};\n\n/** order by min() on columns of table \"event\" */\nexport type Event_Min_Order_By = {\n  code?: Maybe<Order_By>;\n  createdAt?: Maybe<Order_By>;\n  deletedAt?: Maybe<Order_By>;\n  endAt?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  ownerId?: Maybe<Order_By>;\n  startAt?: Maybe<Order_By>;\n  updatedAt?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"event\" */\nexport type Event_Mutation_Response = {\n  __typename?: 'event_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Event>;\n};\n\n/** input type for inserting object relation for remote table \"event\" */\nexport type Event_Obj_Rel_Insert_Input = {\n  data: Event_Insert_Input;\n  /** on conflict condition */\n  on_conflict?: Maybe<Event_On_Conflict>;\n};\n\n/** on conflict condition type for table \"event\" */\nexport type Event_On_Conflict = {\n  constraint: Event_Constraint;\n  update_columns?: Array<Event_Update_Column>;\n  where?: Maybe<Event_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"event\". */\nexport type Event_Order_By = {\n  audiences_aggregate?: Maybe<EventAudiences_Aggregate_Order_By>;\n  code?: Maybe<Order_By>;\n  createdAt?: Maybe<Order_By>;\n  deletedAt?: Maybe<Order_By>;\n  endAt?: Maybe<Order_By>;\n  guestes_aggregate?: Maybe<EventGuestes_Aggregate_Order_By>;\n  id?: Maybe<Order_By>;\n  moderation?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  owner?: Maybe<User_Order_By>;\n  ownerId?: Maybe<Order_By>;\n  questions_aggregate?: Maybe<Question_Aggregate_Order_By>;\n  startAt?: Maybe<Order_By>;\n  updatedAt?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: event */\nexport type Event_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"event\" */\nexport enum Event_Select_Column {\n  /** column name */\n  Code = 'code',\n  /** column name */\n  CreatedAt = 'createdAt',\n  /** column name */\n  DeletedAt = 'deletedAt',\n  /** column name */\n  EndAt = 'endAt',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Moderation = 'moderation',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  OwnerId = 'ownerId',\n  /** column name */\n  StartAt = 'startAt',\n  /** column name */\n  UpdatedAt = 'updatedAt'\n}\n\n/** input type for updating data in table \"event\" */\nexport type Event_Set_Input = {\n  code?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  endAt?: Maybe<Scalars['timestamp']>;\n  id?: Maybe<Scalars['uuid']>;\n  moderation?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n  ownerId?: Maybe<Scalars['uuid']>;\n  startAt?: Maybe<Scalars['timestamp']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n};\n\n/** update columns of table \"event\" */\nexport enum Event_Update_Column {\n  /** column name */\n  Code = 'code',\n  /** column name */\n  CreatedAt = 'createdAt',\n  /** column name */\n  DeletedAt = 'deletedAt',\n  /** column name */\n  EndAt = 'endAt',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Moderation = 'moderation',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  OwnerId = 'ownerId',\n  /** column name */\n  StartAt = 'startAt',\n  /** column name */\n  UpdatedAt = 'updatedAt'\n}\n\n/** mutation root */\nexport type Mutation_Root = {\n  __typename?: 'mutation_root';\n  /** delete data from the table: \"event\" */\n  delete_event?: Maybe<Event_Mutation_Response>;\n  /** delete data from the table: \"eventAudiences\" */\n  delete_eventAudiences?: Maybe<EventAudiences_Mutation_Response>;\n  /** delete single row from the table: \"eventAudiences\" */\n  delete_eventAudiences_by_pk?: Maybe<EventAudiences>;\n  /** delete data from the table: \"eventGuestes\" */\n  delete_eventGuestes?: Maybe<EventGuestes_Mutation_Response>;\n  /** delete single row from the table: \"eventGuestes\" */\n  delete_eventGuestes_by_pk?: Maybe<EventGuestes>;\n  /** delete single row from the table: \"event\" */\n  delete_event_by_pk?: Maybe<Event>;\n  /** delete data from the table: \"question\" */\n  delete_question?: Maybe<Question_Mutation_Response>;\n  /** delete single row from the table: \"question\" */\n  delete_question_by_pk?: Maybe<Question>;\n  /** delete data from the table: \"reply\" */\n  delete_reply?: Maybe<Reply_Mutation_Response>;\n  /** delete single row from the table: \"reply\" */\n  delete_reply_by_pk?: Maybe<Reply>;\n  /** delete data from the table: \"role\" */\n  delete_role?: Maybe<Role_Mutation_Response>;\n  /** delete single row from the table: \"role\" */\n  delete_role_by_pk?: Maybe<Role>;\n  /** delete data from the table: \"user\" */\n  delete_user?: Maybe<User_Mutation_Response>;\n  /** delete data from the table: \"userRoles\" */\n  delete_userRoles?: Maybe<UserRoles_Mutation_Response>;\n  /** delete single row from the table: \"userRoles\" */\n  delete_userRoles_by_pk?: Maybe<UserRoles>;\n  /** delete single row from the table: \"user\" */\n  delete_user_by_pk?: Maybe<User>;\n  /** delete data from the table: \"usersVoteUpQuestions\" */\n  delete_usersVoteUpQuestions?: Maybe<UsersVoteUpQuestions_Mutation_Response>;\n  /** delete single row from the table: \"usersVoteUpQuestions\" */\n  delete_usersVoteUpQuestions_by_pk?: Maybe<UsersVoteUpQuestions>;\n  /** insert data into the table: \"event\" */\n  insert_event?: Maybe<Event_Mutation_Response>;\n  /** insert data into the table: \"eventAudiences\" */\n  insert_eventAudiences?: Maybe<EventAudiences_Mutation_Response>;\n  /** insert a single row into the table: \"eventAudiences\" */\n  insert_eventAudiences_one?: Maybe<EventAudiences>;\n  /** insert data into the table: \"eventGuestes\" */\n  insert_eventGuestes?: Maybe<EventGuestes_Mutation_Response>;\n  /** insert a single row into the table: \"eventGuestes\" */\n  insert_eventGuestes_one?: Maybe<EventGuestes>;\n  /** insert a single row into the table: \"event\" */\n  insert_event_one?: Maybe<Event>;\n  /** insert data into the table: \"question\" */\n  insert_question?: Maybe<Question_Mutation_Response>;\n  /** insert a single row into the table: \"question\" */\n  insert_question_one?: Maybe<Question>;\n  /** insert data into the table: \"reply\" */\n  insert_reply?: Maybe<Reply_Mutation_Response>;\n  /** insert a single row into the table: \"reply\" */\n  insert_reply_one?: Maybe<Reply>;\n  /** insert data into the table: \"role\" */\n  insert_role?: Maybe<Role_Mutation_Response>;\n  /** insert a single row into the table: \"role\" */\n  insert_role_one?: Maybe<Role>;\n  /** insert data into the table: \"user\" */\n  insert_user?: Maybe<User_Mutation_Response>;\n  /** insert data into the table: \"userRoles\" */\n  insert_userRoles?: Maybe<UserRoles_Mutation_Response>;\n  /** insert a single row into the table: \"userRoles\" */\n  insert_userRoles_one?: Maybe<UserRoles>;\n  /** insert a single row into the table: \"user\" */\n  insert_user_one?: Maybe<User>;\n  /** insert data into the table: \"usersVoteUpQuestions\" */\n  insert_usersVoteUpQuestions?: Maybe<UsersVoteUpQuestions_Mutation_Response>;\n  /** insert a single row into the table: \"usersVoteUpQuestions\" */\n  insert_usersVoteUpQuestions_one?: Maybe<UsersVoteUpQuestions>;\n  /** update data of the table: \"event\" */\n  update_event?: Maybe<Event_Mutation_Response>;\n  /** update data of the table: \"eventAudiences\" */\n  update_eventAudiences?: Maybe<EventAudiences_Mutation_Response>;\n  /** update single row of the table: \"eventAudiences\" */\n  update_eventAudiences_by_pk?: Maybe<EventAudiences>;\n  /** update data of the table: \"eventGuestes\" */\n  update_eventGuestes?: Maybe<EventGuestes_Mutation_Response>;\n  /** update single row of the table: \"eventGuestes\" */\n  update_eventGuestes_by_pk?: Maybe<EventGuestes>;\n  /** update single row of the table: \"event\" */\n  update_event_by_pk?: Maybe<Event>;\n  /** update data of the table: \"question\" */\n  update_question?: Maybe<Question_Mutation_Response>;\n  /** update single row of the table: \"question\" */\n  update_question_by_pk?: Maybe<Question>;\n  /** update data of the table: \"reply\" */\n  update_reply?: Maybe<Reply_Mutation_Response>;\n  /** update single row of the table: \"reply\" */\n  update_reply_by_pk?: Maybe<Reply>;\n  /** update data of the table: \"role\" */\n  update_role?: Maybe<Role_Mutation_Response>;\n  /** update single row of the table: \"role\" */\n  update_role_by_pk?: Maybe<Role>;\n  /** update data of the table: \"user\" */\n  update_user?: Maybe<User_Mutation_Response>;\n  /** update data of the table: \"userRoles\" */\n  update_userRoles?: Maybe<UserRoles_Mutation_Response>;\n  /** update single row of the table: \"userRoles\" */\n  update_userRoles_by_pk?: Maybe<UserRoles>;\n  /** update single row of the table: \"user\" */\n  update_user_by_pk?: Maybe<User>;\n  /** update data of the table: \"usersVoteUpQuestions\" */\n  update_usersVoteUpQuestions?: Maybe<UsersVoteUpQuestions_Mutation_Response>;\n  /** update single row of the table: \"usersVoteUpQuestions\" */\n  update_usersVoteUpQuestions_by_pk?: Maybe<UsersVoteUpQuestions>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_EventArgs = {\n  where: Event_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_EventAudiencesArgs = {\n  where: EventAudiences_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_EventAudiences_By_PkArgs = {\n  eventId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_EventGuestesArgs = {\n  where: EventGuestes_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_EventGuestes_By_PkArgs = {\n  eventId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Event_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_QuestionArgs = {\n  where: Question_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Question_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_ReplyArgs = {\n  where: Reply_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Reply_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_RoleArgs = {\n  where: Role_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Role_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_UserArgs = {\n  where: User_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_UserRolesArgs = {\n  where: UserRoles_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_UserRoles_By_PkArgs = {\n  roleId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_User_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_UsersVoteUpQuestionsArgs = {\n  where: UsersVoteUpQuestions_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_UsersVoteUpQuestions_By_PkArgs = {\n  questionId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_EventArgs = {\n  objects: Array<Event_Insert_Input>;\n  on_conflict?: Maybe<Event_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_EventAudiencesArgs = {\n  objects: Array<EventAudiences_Insert_Input>;\n  on_conflict?: Maybe<EventAudiences_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_EventAudiences_OneArgs = {\n  object: EventAudiences_Insert_Input;\n  on_conflict?: Maybe<EventAudiences_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_EventGuestesArgs = {\n  objects: Array<EventGuestes_Insert_Input>;\n  on_conflict?: Maybe<EventGuestes_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_EventGuestes_OneArgs = {\n  object: EventGuestes_Insert_Input;\n  on_conflict?: Maybe<EventGuestes_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Event_OneArgs = {\n  object: Event_Insert_Input;\n  on_conflict?: Maybe<Event_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_QuestionArgs = {\n  objects: Array<Question_Insert_Input>;\n  on_conflict?: Maybe<Question_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Question_OneArgs = {\n  object: Question_Insert_Input;\n  on_conflict?: Maybe<Question_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_ReplyArgs = {\n  objects: Array<Reply_Insert_Input>;\n  on_conflict?: Maybe<Reply_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Reply_OneArgs = {\n  object: Reply_Insert_Input;\n  on_conflict?: Maybe<Reply_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_RoleArgs = {\n  objects: Array<Role_Insert_Input>;\n  on_conflict?: Maybe<Role_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Role_OneArgs = {\n  object: Role_Insert_Input;\n  on_conflict?: Maybe<Role_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_UserArgs = {\n  objects: Array<User_Insert_Input>;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_UserRolesArgs = {\n  objects: Array<UserRoles_Insert_Input>;\n  on_conflict?: Maybe<UserRoles_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_UserRoles_OneArgs = {\n  object: UserRoles_Insert_Input;\n  on_conflict?: Maybe<UserRoles_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_User_OneArgs = {\n  object: User_Insert_Input;\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_UsersVoteUpQuestionsArgs = {\n  objects: Array<UsersVoteUpQuestions_Insert_Input>;\n  on_conflict?: Maybe<UsersVoteUpQuestions_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_UsersVoteUpQuestions_OneArgs = {\n  object: UsersVoteUpQuestions_Insert_Input;\n  on_conflict?: Maybe<UsersVoteUpQuestions_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_EventArgs = {\n  _set?: Maybe<Event_Set_Input>;\n  where: Event_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_EventAudiencesArgs = {\n  _set?: Maybe<EventAudiences_Set_Input>;\n  where: EventAudiences_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_EventAudiences_By_PkArgs = {\n  _set?: Maybe<EventAudiences_Set_Input>;\n  pk_columns: EventAudiences_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_EventGuestesArgs = {\n  _set?: Maybe<EventGuestes_Set_Input>;\n  where: EventGuestes_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_EventGuestes_By_PkArgs = {\n  _set?: Maybe<EventGuestes_Set_Input>;\n  pk_columns: EventGuestes_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Event_By_PkArgs = {\n  _set?: Maybe<Event_Set_Input>;\n  pk_columns: Event_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_QuestionArgs = {\n  _inc?: Maybe<Question_Inc_Input>;\n  _set?: Maybe<Question_Set_Input>;\n  where: Question_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Question_By_PkArgs = {\n  _inc?: Maybe<Question_Inc_Input>;\n  _set?: Maybe<Question_Set_Input>;\n  pk_columns: Question_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_ReplyArgs = {\n  _set?: Maybe<Reply_Set_Input>;\n  where: Reply_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Reply_By_PkArgs = {\n  _set?: Maybe<Reply_Set_Input>;\n  pk_columns: Reply_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_RoleArgs = {\n  _set?: Maybe<Role_Set_Input>;\n  where: Role_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Role_By_PkArgs = {\n  _set?: Maybe<Role_Set_Input>;\n  pk_columns: Role_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_UserArgs = {\n  _set?: Maybe<User_Set_Input>;\n  where: User_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_UserRolesArgs = {\n  _set?: Maybe<UserRoles_Set_Input>;\n  where: UserRoles_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_UserRoles_By_PkArgs = {\n  _set?: Maybe<UserRoles_Set_Input>;\n  pk_columns: UserRoles_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_User_By_PkArgs = {\n  _set?: Maybe<User_Set_Input>;\n  pk_columns: User_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_UsersVoteUpQuestionsArgs = {\n  _set?: Maybe<UsersVoteUpQuestions_Set_Input>;\n  where: UsersVoteUpQuestions_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_UsersVoteUpQuestions_By_PkArgs = {\n  _set?: Maybe<UsersVoteUpQuestions_Set_Input>;\n  pk_columns: UsersVoteUpQuestions_Pk_Columns_Input;\n};\n\n/** column ordering options */\nexport enum Order_By {\n  /** in ascending order, nulls last */\n  Asc = 'asc',\n  /** in ascending order, nulls first */\n  AscNullsFirst = 'asc_nulls_first',\n  /** in ascending order, nulls last */\n  AscNullsLast = 'asc_nulls_last',\n  /** in descending order, nulls first */\n  Desc = 'desc',\n  /** in descending order, nulls first */\n  DescNullsFirst = 'desc_nulls_first',\n  /** in descending order, nulls last */\n  DescNullsLast = 'desc_nulls_last'\n}\n\nexport type Query_Root = {\n  __typename?: 'query_root';\n  /** fetch data from the table: \"event\" */\n  event: Array<Event>;\n  /** fetch data from the table: \"eventAudiences\" */\n  eventAudiences: Array<EventAudiences>;\n  /** fetch aggregated fields from the table: \"eventAudiences\" */\n  eventAudiences_aggregate: EventAudiences_Aggregate;\n  /** fetch data from the table: \"eventAudiences\" using primary key columns */\n  eventAudiences_by_pk?: Maybe<EventAudiences>;\n  /** fetch data from the table: \"eventGuestes\" */\n  eventGuestes: Array<EventGuestes>;\n  /** fetch aggregated fields from the table: \"eventGuestes\" */\n  eventGuestes_aggregate: EventGuestes_Aggregate;\n  /** fetch data from the table: \"eventGuestes\" using primary key columns */\n  eventGuestes_by_pk?: Maybe<EventGuestes>;\n  /** fetch aggregated fields from the table: \"event\" */\n  event_aggregate: Event_Aggregate;\n  /** fetch data from the table: \"event\" using primary key columns */\n  event_by_pk?: Maybe<Event>;\n  /** fetch data from the table: \"question\" */\n  question: Array<Question>;\n  /** fetch aggregated fields from the table: \"question\" */\n  question_aggregate: Question_Aggregate;\n  /** fetch data from the table: \"question\" using primary key columns */\n  question_by_pk?: Maybe<Question>;\n  /** fetch data from the table: \"reply\" */\n  reply: Array<Reply>;\n  /** fetch aggregated fields from the table: \"reply\" */\n  reply_aggregate: Reply_Aggregate;\n  /** fetch data from the table: \"reply\" using primary key columns */\n  reply_by_pk?: Maybe<Reply>;\n  /** fetch data from the table: \"role\" */\n  role: Array<Role>;\n  /** fetch aggregated fields from the table: \"role\" */\n  role_aggregate: Role_Aggregate;\n  /** fetch data from the table: \"role\" using primary key columns */\n  role_by_pk?: Maybe<Role>;\n  /** fetch data from the table: \"user\" */\n  user: Array<User>;\n  /** fetch data from the table: \"userRoles\" */\n  userRoles: Array<UserRoles>;\n  /** fetch aggregated fields from the table: \"userRoles\" */\n  userRoles_aggregate: UserRoles_Aggregate;\n  /** fetch data from the table: \"userRoles\" using primary key columns */\n  userRoles_by_pk?: Maybe<UserRoles>;\n  /** fetch aggregated fields from the table: \"user\" */\n  user_aggregate: User_Aggregate;\n  /** fetch data from the table: \"user\" using primary key columns */\n  user_by_pk?: Maybe<User>;\n  /** fetch data from the table: \"usersVoteUpQuestions\" */\n  usersVoteUpQuestions: Array<UsersVoteUpQuestions>;\n  /** fetch aggregated fields from the table: \"usersVoteUpQuestions\" */\n  usersVoteUpQuestions_aggregate: UsersVoteUpQuestions_Aggregate;\n  /** fetch data from the table: \"usersVoteUpQuestions\" using primary key columns */\n  usersVoteUpQuestions_by_pk?: Maybe<UsersVoteUpQuestions>;\n};\n\n\nexport type Query_RootEventArgs = {\n  distinct_on?: Maybe<Array<Event_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Event_Order_By>>;\n  where?: Maybe<Event_Bool_Exp>;\n};\n\n\nexport type Query_RootEventAudiencesArgs = {\n  distinct_on?: Maybe<Array<EventAudiences_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventAudiences_Order_By>>;\n  where?: Maybe<EventAudiences_Bool_Exp>;\n};\n\n\nexport type Query_RootEventAudiences_AggregateArgs = {\n  distinct_on?: Maybe<Array<EventAudiences_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventAudiences_Order_By>>;\n  where?: Maybe<EventAudiences_Bool_Exp>;\n};\n\n\nexport type Query_RootEventAudiences_By_PkArgs = {\n  eventId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n\nexport type Query_RootEventGuestesArgs = {\n  distinct_on?: Maybe<Array<EventGuestes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventGuestes_Order_By>>;\n  where?: Maybe<EventGuestes_Bool_Exp>;\n};\n\n\nexport type Query_RootEventGuestes_AggregateArgs = {\n  distinct_on?: Maybe<Array<EventGuestes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventGuestes_Order_By>>;\n  where?: Maybe<EventGuestes_Bool_Exp>;\n};\n\n\nexport type Query_RootEventGuestes_By_PkArgs = {\n  eventId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n\nexport type Query_RootEvent_AggregateArgs = {\n  distinct_on?: Maybe<Array<Event_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Event_Order_By>>;\n  where?: Maybe<Event_Bool_Exp>;\n};\n\n\nexport type Query_RootEvent_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\nexport type Query_RootQuestionArgs = {\n  distinct_on?: Maybe<Array<Question_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Question_Order_By>>;\n  where?: Maybe<Question_Bool_Exp>;\n};\n\n\nexport type Query_RootQuestion_AggregateArgs = {\n  distinct_on?: Maybe<Array<Question_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Question_Order_By>>;\n  where?: Maybe<Question_Bool_Exp>;\n};\n\n\nexport type Query_RootQuestion_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\nexport type Query_RootReplyArgs = {\n  distinct_on?: Maybe<Array<Reply_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Reply_Order_By>>;\n  where?: Maybe<Reply_Bool_Exp>;\n};\n\n\nexport type Query_RootReply_AggregateArgs = {\n  distinct_on?: Maybe<Array<Reply_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Reply_Order_By>>;\n  where?: Maybe<Reply_Bool_Exp>;\n};\n\n\nexport type Query_RootReply_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\nexport type Query_RootRoleArgs = {\n  distinct_on?: Maybe<Array<Role_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Role_Order_By>>;\n  where?: Maybe<Role_Bool_Exp>;\n};\n\n\nexport type Query_RootRole_AggregateArgs = {\n  distinct_on?: Maybe<Array<Role_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Role_Order_By>>;\n  where?: Maybe<Role_Bool_Exp>;\n};\n\n\nexport type Query_RootRole_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\nexport type Query_RootUserArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\nexport type Query_RootUserRolesArgs = {\n  distinct_on?: Maybe<Array<UserRoles_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UserRoles_Order_By>>;\n  where?: Maybe<UserRoles_Bool_Exp>;\n};\n\n\nexport type Query_RootUserRoles_AggregateArgs = {\n  distinct_on?: Maybe<Array<UserRoles_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UserRoles_Order_By>>;\n  where?: Maybe<UserRoles_Bool_Exp>;\n};\n\n\nexport type Query_RootUserRoles_By_PkArgs = {\n  roleId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n\nexport type Query_RootUser_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\nexport type Query_RootUser_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\nexport type Query_RootUsersVoteUpQuestionsArgs = {\n  distinct_on?: Maybe<Array<UsersVoteUpQuestions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UsersVoteUpQuestions_Order_By>>;\n  where?: Maybe<UsersVoteUpQuestions_Bool_Exp>;\n};\n\n\nexport type Query_RootUsersVoteUpQuestions_AggregateArgs = {\n  distinct_on?: Maybe<Array<UsersVoteUpQuestions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UsersVoteUpQuestions_Order_By>>;\n  where?: Maybe<UsersVoteUpQuestions_Bool_Exp>;\n};\n\n\nexport type Query_RootUsersVoteUpQuestions_By_PkArgs = {\n  questionId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n/** columns and relationships of \"question\" */\nexport type Question = {\n  __typename?: 'question';\n  anonymous: Scalars['Boolean'];\n  /** An object relationship */\n  author?: Maybe<User>;\n  authorId?: Maybe<Scalars['uuid']>;\n  content: Scalars['String'];\n  createdAt: Scalars['timestamp'];\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  /** An object relationship */\n  event?: Maybe<Event>;\n  eventId?: Maybe<Scalars['uuid']>;\n  id: Scalars['uuid'];\n  /** An array relationship */\n  replies: Array<Reply>;\n  /** An aggregate relationship */\n  replies_aggregate: Reply_Aggregate;\n  replyCount: Scalars['Int'];\n  reviewStatus: Scalars['question_reviewstatus_enum'];\n  star: Scalars['Boolean'];\n  top: Scalars['Boolean'];\n  updatedAt: Scalars['timestamp'];\n  voteUpCount: Scalars['Int'];\n  /** An array relationship */\n  voteUpUsers: Array<UsersVoteUpQuestions>;\n  /** An aggregate relationship */\n  voteUpUsers_aggregate: UsersVoteUpQuestions_Aggregate;\n};\n\n\n/** columns and relationships of \"question\" */\nexport type QuestionRepliesArgs = {\n  distinct_on?: Maybe<Array<Reply_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Reply_Order_By>>;\n  where?: Maybe<Reply_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"question\" */\nexport type QuestionReplies_AggregateArgs = {\n  distinct_on?: Maybe<Array<Reply_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Reply_Order_By>>;\n  where?: Maybe<Reply_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"question\" */\nexport type QuestionVoteUpUsersArgs = {\n  distinct_on?: Maybe<Array<UsersVoteUpQuestions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UsersVoteUpQuestions_Order_By>>;\n  where?: Maybe<UsersVoteUpQuestions_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"question\" */\nexport type QuestionVoteUpUsers_AggregateArgs = {\n  distinct_on?: Maybe<Array<UsersVoteUpQuestions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UsersVoteUpQuestions_Order_By>>;\n  where?: Maybe<UsersVoteUpQuestions_Bool_Exp>;\n};\n\n/** aggregated selection of \"question\" */\nexport type Question_Aggregate = {\n  __typename?: 'question_aggregate';\n  aggregate?: Maybe<Question_Aggregate_Fields>;\n  nodes: Array<Question>;\n};\n\n/** aggregate fields of \"question\" */\nexport type Question_Aggregate_Fields = {\n  __typename?: 'question_aggregate_fields';\n  avg?: Maybe<Question_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Question_Max_Fields>;\n  min?: Maybe<Question_Min_Fields>;\n  stddev?: Maybe<Question_Stddev_Fields>;\n  stddev_pop?: Maybe<Question_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Question_Stddev_Samp_Fields>;\n  sum?: Maybe<Question_Sum_Fields>;\n  var_pop?: Maybe<Question_Var_Pop_Fields>;\n  var_samp?: Maybe<Question_Var_Samp_Fields>;\n  variance?: Maybe<Question_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"question\" */\nexport type Question_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Question_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"question\" */\nexport type Question_Aggregate_Order_By = {\n  avg?: Maybe<Question_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Question_Max_Order_By>;\n  min?: Maybe<Question_Min_Order_By>;\n  stddev?: Maybe<Question_Stddev_Order_By>;\n  stddev_pop?: Maybe<Question_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Question_Stddev_Samp_Order_By>;\n  sum?: Maybe<Question_Sum_Order_By>;\n  var_pop?: Maybe<Question_Var_Pop_Order_By>;\n  var_samp?: Maybe<Question_Var_Samp_Order_By>;\n  variance?: Maybe<Question_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"question\" */\nexport type Question_Arr_Rel_Insert_Input = {\n  data: Array<Question_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: Maybe<Question_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Question_Avg_Fields = {\n  __typename?: 'question_avg_fields';\n  replyCount?: Maybe<Scalars['Float']>;\n  voteUpCount?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"question\" */\nexport type Question_Avg_Order_By = {\n  replyCount?: Maybe<Order_By>;\n  voteUpCount?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"question\". All fields are combined with a logical 'AND'. */\nexport type Question_Bool_Exp = {\n  _and?: Maybe<Array<Question_Bool_Exp>>;\n  _not?: Maybe<Question_Bool_Exp>;\n  _or?: Maybe<Array<Question_Bool_Exp>>;\n  anonymous?: Maybe<Boolean_Comparison_Exp>;\n  author?: Maybe<User_Bool_Exp>;\n  authorId?: Maybe<Uuid_Comparison_Exp>;\n  content?: Maybe<String_Comparison_Exp>;\n  createdAt?: Maybe<Timestamp_Comparison_Exp>;\n  deletedAt?: Maybe<Timestamp_Comparison_Exp>;\n  event?: Maybe<Event_Bool_Exp>;\n  eventId?: Maybe<Uuid_Comparison_Exp>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  replies?: Maybe<Reply_Bool_Exp>;\n  replyCount?: Maybe<Int_Comparison_Exp>;\n  reviewStatus?: Maybe<Question_Reviewstatus_Enum_Comparison_Exp>;\n  star?: Maybe<Boolean_Comparison_Exp>;\n  top?: Maybe<Boolean_Comparison_Exp>;\n  updatedAt?: Maybe<Timestamp_Comparison_Exp>;\n  voteUpCount?: Maybe<Int_Comparison_Exp>;\n  voteUpUsers?: Maybe<UsersVoteUpQuestions_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"question\" */\nexport enum Question_Constraint {\n  /** unique or primary key constraint */\n  Pk_21e5786aa0ea704ae185a79b2d5 = 'PK_21e5786aa0ea704ae185a79b2d5'\n}\n\n/** input type for incrementing numeric columns in table \"question\" */\nexport type Question_Inc_Input = {\n  replyCount?: Maybe<Scalars['Int']>;\n  voteUpCount?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"question\" */\nexport type Question_Insert_Input = {\n  anonymous?: Maybe<Scalars['Boolean']>;\n  author?: Maybe<User_Obj_Rel_Insert_Input>;\n  authorId?: Maybe<Scalars['uuid']>;\n  content?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  event?: Maybe<Event_Obj_Rel_Insert_Input>;\n  eventId?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  replies?: Maybe<Reply_Arr_Rel_Insert_Input>;\n  replyCount?: Maybe<Scalars['Int']>;\n  reviewStatus?: Maybe<Scalars['question_reviewstatus_enum']>;\n  star?: Maybe<Scalars['Boolean']>;\n  top?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n  voteUpCount?: Maybe<Scalars['Int']>;\n  voteUpUsers?: Maybe<UsersVoteUpQuestions_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Question_Max_Fields = {\n  __typename?: 'question_max_fields';\n  authorId?: Maybe<Scalars['uuid']>;\n  content?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  eventId?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  replyCount?: Maybe<Scalars['Int']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n  voteUpCount?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"question\" */\nexport type Question_Max_Order_By = {\n  authorId?: Maybe<Order_By>;\n  content?: Maybe<Order_By>;\n  createdAt?: Maybe<Order_By>;\n  deletedAt?: Maybe<Order_By>;\n  eventId?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  replyCount?: Maybe<Order_By>;\n  updatedAt?: Maybe<Order_By>;\n  voteUpCount?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Question_Min_Fields = {\n  __typename?: 'question_min_fields';\n  authorId?: Maybe<Scalars['uuid']>;\n  content?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  eventId?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  replyCount?: Maybe<Scalars['Int']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n  voteUpCount?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"question\" */\nexport type Question_Min_Order_By = {\n  authorId?: Maybe<Order_By>;\n  content?: Maybe<Order_By>;\n  createdAt?: Maybe<Order_By>;\n  deletedAt?: Maybe<Order_By>;\n  eventId?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  replyCount?: Maybe<Order_By>;\n  updatedAt?: Maybe<Order_By>;\n  voteUpCount?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"question\" */\nexport type Question_Mutation_Response = {\n  __typename?: 'question_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Question>;\n};\n\n/** input type for inserting object relation for remote table \"question\" */\nexport type Question_Obj_Rel_Insert_Input = {\n  data: Question_Insert_Input;\n  /** on conflict condition */\n  on_conflict?: Maybe<Question_On_Conflict>;\n};\n\n/** on conflict condition type for table \"question\" */\nexport type Question_On_Conflict = {\n  constraint: Question_Constraint;\n  update_columns?: Array<Question_Update_Column>;\n  where?: Maybe<Question_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"question\". */\nexport type Question_Order_By = {\n  anonymous?: Maybe<Order_By>;\n  author?: Maybe<User_Order_By>;\n  authorId?: Maybe<Order_By>;\n  content?: Maybe<Order_By>;\n  createdAt?: Maybe<Order_By>;\n  deletedAt?: Maybe<Order_By>;\n  event?: Maybe<Event_Order_By>;\n  eventId?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  replies_aggregate?: Maybe<Reply_Aggregate_Order_By>;\n  replyCount?: Maybe<Order_By>;\n  reviewStatus?: Maybe<Order_By>;\n  star?: Maybe<Order_By>;\n  top?: Maybe<Order_By>;\n  updatedAt?: Maybe<Order_By>;\n  voteUpCount?: Maybe<Order_By>;\n  voteUpUsers_aggregate?: Maybe<UsersVoteUpQuestions_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: question */\nexport type Question_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n\n/** Boolean expression to compare columns of type \"question_reviewstatus_enum\". All fields are combined with logical 'AND'. */\nexport type Question_Reviewstatus_Enum_Comparison_Exp = {\n  _eq?: Maybe<Scalars['question_reviewstatus_enum']>;\n  _gt?: Maybe<Scalars['question_reviewstatus_enum']>;\n  _gte?: Maybe<Scalars['question_reviewstatus_enum']>;\n  _in?: Maybe<Array<Scalars['question_reviewstatus_enum']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['question_reviewstatus_enum']>;\n  _lte?: Maybe<Scalars['question_reviewstatus_enum']>;\n  _neq?: Maybe<Scalars['question_reviewstatus_enum']>;\n  _nin?: Maybe<Array<Scalars['question_reviewstatus_enum']>>;\n};\n\n/** select columns of table \"question\" */\nexport enum Question_Select_Column {\n  /** column name */\n  Anonymous = 'anonymous',\n  /** column name */\n  AuthorId = 'authorId',\n  /** column name */\n  Content = 'content',\n  /** column name */\n  CreatedAt = 'createdAt',\n  /** column name */\n  DeletedAt = 'deletedAt',\n  /** column name */\n  EventId = 'eventId',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  ReplyCount = 'replyCount',\n  /** column name */\n  ReviewStatus = 'reviewStatus',\n  /** column name */\n  Star = 'star',\n  /** column name */\n  Top = 'top',\n  /** column name */\n  UpdatedAt = 'updatedAt',\n  /** column name */\n  VoteUpCount = 'voteUpCount'\n}\n\n/** input type for updating data in table \"question\" */\nexport type Question_Set_Input = {\n  anonymous?: Maybe<Scalars['Boolean']>;\n  authorId?: Maybe<Scalars['uuid']>;\n  content?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  eventId?: Maybe<Scalars['uuid']>;\n  id?: Maybe<Scalars['uuid']>;\n  replyCount?: Maybe<Scalars['Int']>;\n  reviewStatus?: Maybe<Scalars['question_reviewstatus_enum']>;\n  star?: Maybe<Scalars['Boolean']>;\n  top?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n  voteUpCount?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Question_Stddev_Fields = {\n  __typename?: 'question_stddev_fields';\n  replyCount?: Maybe<Scalars['Float']>;\n  voteUpCount?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"question\" */\nexport type Question_Stddev_Order_By = {\n  replyCount?: Maybe<Order_By>;\n  voteUpCount?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Question_Stddev_Pop_Fields = {\n  __typename?: 'question_stddev_pop_fields';\n  replyCount?: Maybe<Scalars['Float']>;\n  voteUpCount?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"question\" */\nexport type Question_Stddev_Pop_Order_By = {\n  replyCount?: Maybe<Order_By>;\n  voteUpCount?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Question_Stddev_Samp_Fields = {\n  __typename?: 'question_stddev_samp_fields';\n  replyCount?: Maybe<Scalars['Float']>;\n  voteUpCount?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"question\" */\nexport type Question_Stddev_Samp_Order_By = {\n  replyCount?: Maybe<Order_By>;\n  voteUpCount?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Question_Sum_Fields = {\n  __typename?: 'question_sum_fields';\n  replyCount?: Maybe<Scalars['Int']>;\n  voteUpCount?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"question\" */\nexport type Question_Sum_Order_By = {\n  replyCount?: Maybe<Order_By>;\n  voteUpCount?: Maybe<Order_By>;\n};\n\n/** update columns of table \"question\" */\nexport enum Question_Update_Column {\n  /** column name */\n  Anonymous = 'anonymous',\n  /** column name */\n  AuthorId = 'authorId',\n  /** column name */\n  Content = 'content',\n  /** column name */\n  CreatedAt = 'createdAt',\n  /** column name */\n  DeletedAt = 'deletedAt',\n  /** column name */\n  EventId = 'eventId',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  ReplyCount = 'replyCount',\n  /** column name */\n  ReviewStatus = 'reviewStatus',\n  /** column name */\n  Star = 'star',\n  /** column name */\n  Top = 'top',\n  /** column name */\n  UpdatedAt = 'updatedAt',\n  /** column name */\n  VoteUpCount = 'voteUpCount'\n}\n\n/** aggregate var_pop on columns */\nexport type Question_Var_Pop_Fields = {\n  __typename?: 'question_var_pop_fields';\n  replyCount?: Maybe<Scalars['Float']>;\n  voteUpCount?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"question\" */\nexport type Question_Var_Pop_Order_By = {\n  replyCount?: Maybe<Order_By>;\n  voteUpCount?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Question_Var_Samp_Fields = {\n  __typename?: 'question_var_samp_fields';\n  replyCount?: Maybe<Scalars['Float']>;\n  voteUpCount?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"question\" */\nexport type Question_Var_Samp_Order_By = {\n  replyCount?: Maybe<Order_By>;\n  voteUpCount?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Question_Variance_Fields = {\n  __typename?: 'question_variance_fields';\n  replyCount?: Maybe<Scalars['Float']>;\n  voteUpCount?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"question\" */\nexport type Question_Variance_Order_By = {\n  replyCount?: Maybe<Order_By>;\n  voteUpCount?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"reply\" */\nexport type Reply = {\n  __typename?: 'reply';\n  anonymous: Scalars['Boolean'];\n  /** An object relationship */\n  author?: Maybe<User>;\n  authorId?: Maybe<Scalars['uuid']>;\n  content: Scalars['String'];\n  createdAt: Scalars['timestamp'];\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  id: Scalars['uuid'];\n  /** If author is a moderator of the event? */\n  isModerator: Scalars['Boolean'];\n  /** An object relationship */\n  question?: Maybe<Question>;\n  questionId?: Maybe<Scalars['uuid']>;\n  reviewStatus: Scalars['reply_reviewstatus_enum'];\n  updatedAt: Scalars['timestamp'];\n};\n\n/** aggregated selection of \"reply\" */\nexport type Reply_Aggregate = {\n  __typename?: 'reply_aggregate';\n  aggregate?: Maybe<Reply_Aggregate_Fields>;\n  nodes: Array<Reply>;\n};\n\n/** aggregate fields of \"reply\" */\nexport type Reply_Aggregate_Fields = {\n  __typename?: 'reply_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<Reply_Max_Fields>;\n  min?: Maybe<Reply_Min_Fields>;\n};\n\n\n/** aggregate fields of \"reply\" */\nexport type Reply_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Reply_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"reply\" */\nexport type Reply_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Reply_Max_Order_By>;\n  min?: Maybe<Reply_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"reply\" */\nexport type Reply_Arr_Rel_Insert_Input = {\n  data: Array<Reply_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: Maybe<Reply_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"reply\". All fields are combined with a logical 'AND'. */\nexport type Reply_Bool_Exp = {\n  _and?: Maybe<Array<Reply_Bool_Exp>>;\n  _not?: Maybe<Reply_Bool_Exp>;\n  _or?: Maybe<Array<Reply_Bool_Exp>>;\n  anonymous?: Maybe<Boolean_Comparison_Exp>;\n  author?: Maybe<User_Bool_Exp>;\n  authorId?: Maybe<Uuid_Comparison_Exp>;\n  content?: Maybe<String_Comparison_Exp>;\n  createdAt?: Maybe<Timestamp_Comparison_Exp>;\n  deletedAt?: Maybe<Timestamp_Comparison_Exp>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  isModerator?: Maybe<Boolean_Comparison_Exp>;\n  question?: Maybe<Question_Bool_Exp>;\n  questionId?: Maybe<Uuid_Comparison_Exp>;\n  reviewStatus?: Maybe<Reply_Reviewstatus_Enum_Comparison_Exp>;\n  updatedAt?: Maybe<Timestamp_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"reply\" */\nexport enum Reply_Constraint {\n  /** unique or primary key constraint */\n  Pk_94fa9017051b40a71e000a2aff9 = 'PK_94fa9017051b40a71e000a2aff9'\n}\n\n/** input type for inserting data into table \"reply\" */\nexport type Reply_Insert_Input = {\n  anonymous?: Maybe<Scalars['Boolean']>;\n  author?: Maybe<User_Obj_Rel_Insert_Input>;\n  authorId?: Maybe<Scalars['uuid']>;\n  content?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  id?: Maybe<Scalars['uuid']>;\n  /** If author is a moderator of the event? */\n  isModerator?: Maybe<Scalars['Boolean']>;\n  question?: Maybe<Question_Obj_Rel_Insert_Input>;\n  questionId?: Maybe<Scalars['uuid']>;\n  reviewStatus?: Maybe<Scalars['reply_reviewstatus_enum']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n};\n\n/** aggregate max on columns */\nexport type Reply_Max_Fields = {\n  __typename?: 'reply_max_fields';\n  authorId?: Maybe<Scalars['uuid']>;\n  content?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  id?: Maybe<Scalars['uuid']>;\n  questionId?: Maybe<Scalars['uuid']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n};\n\n/** order by max() on columns of table \"reply\" */\nexport type Reply_Max_Order_By = {\n  authorId?: Maybe<Order_By>;\n  content?: Maybe<Order_By>;\n  createdAt?: Maybe<Order_By>;\n  deletedAt?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  questionId?: Maybe<Order_By>;\n  updatedAt?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Reply_Min_Fields = {\n  __typename?: 'reply_min_fields';\n  authorId?: Maybe<Scalars['uuid']>;\n  content?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  id?: Maybe<Scalars['uuid']>;\n  questionId?: Maybe<Scalars['uuid']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n};\n\n/** order by min() on columns of table \"reply\" */\nexport type Reply_Min_Order_By = {\n  authorId?: Maybe<Order_By>;\n  content?: Maybe<Order_By>;\n  createdAt?: Maybe<Order_By>;\n  deletedAt?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  questionId?: Maybe<Order_By>;\n  updatedAt?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"reply\" */\nexport type Reply_Mutation_Response = {\n  __typename?: 'reply_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Reply>;\n};\n\n/** on conflict condition type for table \"reply\" */\nexport type Reply_On_Conflict = {\n  constraint: Reply_Constraint;\n  update_columns?: Array<Reply_Update_Column>;\n  where?: Maybe<Reply_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"reply\". */\nexport type Reply_Order_By = {\n  anonymous?: Maybe<Order_By>;\n  author?: Maybe<User_Order_By>;\n  authorId?: Maybe<Order_By>;\n  content?: Maybe<Order_By>;\n  createdAt?: Maybe<Order_By>;\n  deletedAt?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  isModerator?: Maybe<Order_By>;\n  question?: Maybe<Question_Order_By>;\n  questionId?: Maybe<Order_By>;\n  reviewStatus?: Maybe<Order_By>;\n  updatedAt?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: reply */\nexport type Reply_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n\n/** Boolean expression to compare columns of type \"reply_reviewstatus_enum\". All fields are combined with logical 'AND'. */\nexport type Reply_Reviewstatus_Enum_Comparison_Exp = {\n  _eq?: Maybe<Scalars['reply_reviewstatus_enum']>;\n  _gt?: Maybe<Scalars['reply_reviewstatus_enum']>;\n  _gte?: Maybe<Scalars['reply_reviewstatus_enum']>;\n  _in?: Maybe<Array<Scalars['reply_reviewstatus_enum']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['reply_reviewstatus_enum']>;\n  _lte?: Maybe<Scalars['reply_reviewstatus_enum']>;\n  _neq?: Maybe<Scalars['reply_reviewstatus_enum']>;\n  _nin?: Maybe<Array<Scalars['reply_reviewstatus_enum']>>;\n};\n\n/** select columns of table \"reply\" */\nexport enum Reply_Select_Column {\n  /** column name */\n  Anonymous = 'anonymous',\n  /** column name */\n  AuthorId = 'authorId',\n  /** column name */\n  Content = 'content',\n  /** column name */\n  CreatedAt = 'createdAt',\n  /** column name */\n  DeletedAt = 'deletedAt',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsModerator = 'isModerator',\n  /** column name */\n  QuestionId = 'questionId',\n  /** column name */\n  ReviewStatus = 'reviewStatus',\n  /** column name */\n  UpdatedAt = 'updatedAt'\n}\n\n/** input type for updating data in table \"reply\" */\nexport type Reply_Set_Input = {\n  anonymous?: Maybe<Scalars['Boolean']>;\n  authorId?: Maybe<Scalars['uuid']>;\n  content?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  id?: Maybe<Scalars['uuid']>;\n  /** If author is a moderator of the event? */\n  isModerator?: Maybe<Scalars['Boolean']>;\n  questionId?: Maybe<Scalars['uuid']>;\n  reviewStatus?: Maybe<Scalars['reply_reviewstatus_enum']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n};\n\n/** update columns of table \"reply\" */\nexport enum Reply_Update_Column {\n  /** column name */\n  Anonymous = 'anonymous',\n  /** column name */\n  AuthorId = 'authorId',\n  /** column name */\n  Content = 'content',\n  /** column name */\n  CreatedAt = 'createdAt',\n  /** column name */\n  DeletedAt = 'deletedAt',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  IsModerator = 'isModerator',\n  /** column name */\n  QuestionId = 'questionId',\n  /** column name */\n  ReviewStatus = 'reviewStatus',\n  /** column name */\n  UpdatedAt = 'updatedAt'\n}\n\n/** columns and relationships of \"role\" */\nexport type Role = {\n  __typename?: 'role';\n  createdAt: Scalars['timestamp'];\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  id: Scalars['uuid'];\n  name: Scalars['role_name_enum'];\n  updatedAt: Scalars['timestamp'];\n  /** An array relationship */\n  users: Array<UserRoles>;\n  /** An aggregate relationship */\n  users_aggregate: UserRoles_Aggregate;\n};\n\n\n/** columns and relationships of \"role\" */\nexport type RoleUsersArgs = {\n  distinct_on?: Maybe<Array<UserRoles_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UserRoles_Order_By>>;\n  where?: Maybe<UserRoles_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"role\" */\nexport type RoleUsers_AggregateArgs = {\n  distinct_on?: Maybe<Array<UserRoles_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UserRoles_Order_By>>;\n  where?: Maybe<UserRoles_Bool_Exp>;\n};\n\n/** aggregated selection of \"role\" */\nexport type Role_Aggregate = {\n  __typename?: 'role_aggregate';\n  aggregate?: Maybe<Role_Aggregate_Fields>;\n  nodes: Array<Role>;\n};\n\n/** aggregate fields of \"role\" */\nexport type Role_Aggregate_Fields = {\n  __typename?: 'role_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<Role_Max_Fields>;\n  min?: Maybe<Role_Min_Fields>;\n};\n\n\n/** aggregate fields of \"role\" */\nexport type Role_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Role_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** Boolean expression to filter rows from the table \"role\". All fields are combined with a logical 'AND'. */\nexport type Role_Bool_Exp = {\n  _and?: Maybe<Array<Role_Bool_Exp>>;\n  _not?: Maybe<Role_Bool_Exp>;\n  _or?: Maybe<Array<Role_Bool_Exp>>;\n  createdAt?: Maybe<Timestamp_Comparison_Exp>;\n  deletedAt?: Maybe<Timestamp_Comparison_Exp>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  name?: Maybe<Role_Name_Enum_Comparison_Exp>;\n  updatedAt?: Maybe<Timestamp_Comparison_Exp>;\n  users?: Maybe<UserRoles_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"role\" */\nexport enum Role_Constraint {\n  /** unique or primary key constraint */\n  PkB36bcfe02fc8de3c57a8b2391c2 = 'PK_b36bcfe02fc8de3c57a8b2391c2',\n  /** unique or primary key constraint */\n  UqAe4578dcaed5adff96595e61660 = 'UQ_ae4578dcaed5adff96595e61660'\n}\n\n/** input type for inserting data into table \"role\" */\nexport type Role_Insert_Input = {\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['role_name_enum']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n  users?: Maybe<UserRoles_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Role_Max_Fields = {\n  __typename?: 'role_max_fields';\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  id?: Maybe<Scalars['uuid']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n};\n\n/** aggregate min on columns */\nexport type Role_Min_Fields = {\n  __typename?: 'role_min_fields';\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  id?: Maybe<Scalars['uuid']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n};\n\n/** response of any mutation on the table \"role\" */\nexport type Role_Mutation_Response = {\n  __typename?: 'role_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Role>;\n};\n\n\n/** Boolean expression to compare columns of type \"role_name_enum\". All fields are combined with logical 'AND'. */\nexport type Role_Name_Enum_Comparison_Exp = {\n  _eq?: Maybe<Scalars['role_name_enum']>;\n  _gt?: Maybe<Scalars['role_name_enum']>;\n  _gte?: Maybe<Scalars['role_name_enum']>;\n  _in?: Maybe<Array<Scalars['role_name_enum']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['role_name_enum']>;\n  _lte?: Maybe<Scalars['role_name_enum']>;\n  _neq?: Maybe<Scalars['role_name_enum']>;\n  _nin?: Maybe<Array<Scalars['role_name_enum']>>;\n};\n\n/** input type for inserting object relation for remote table \"role\" */\nexport type Role_Obj_Rel_Insert_Input = {\n  data: Role_Insert_Input;\n  /** on conflict condition */\n  on_conflict?: Maybe<Role_On_Conflict>;\n};\n\n/** on conflict condition type for table \"role\" */\nexport type Role_On_Conflict = {\n  constraint: Role_Constraint;\n  update_columns?: Array<Role_Update_Column>;\n  where?: Maybe<Role_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"role\". */\nexport type Role_Order_By = {\n  createdAt?: Maybe<Order_By>;\n  deletedAt?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  updatedAt?: Maybe<Order_By>;\n  users_aggregate?: Maybe<UserRoles_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: role */\nexport type Role_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"role\" */\nexport enum Role_Select_Column {\n  /** column name */\n  CreatedAt = 'createdAt',\n  /** column name */\n  DeletedAt = 'deletedAt',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  UpdatedAt = 'updatedAt'\n}\n\n/** input type for updating data in table \"role\" */\nexport type Role_Set_Input = {\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['role_name_enum']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n};\n\n/** update columns of table \"role\" */\nexport enum Role_Update_Column {\n  /** column name */\n  CreatedAt = 'createdAt',\n  /** column name */\n  DeletedAt = 'deletedAt',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  UpdatedAt = 'updatedAt'\n}\n\nexport type Subscription_Root = {\n  __typename?: 'subscription_root';\n  /** fetch data from the table: \"event\" */\n  event: Array<Event>;\n  /** fetch data from the table: \"eventAudiences\" */\n  eventAudiences: Array<EventAudiences>;\n  /** fetch aggregated fields from the table: \"eventAudiences\" */\n  eventAudiences_aggregate: EventAudiences_Aggregate;\n  /** fetch data from the table: \"eventAudiences\" using primary key columns */\n  eventAudiences_by_pk?: Maybe<EventAudiences>;\n  /** fetch data from the table: \"eventGuestes\" */\n  eventGuestes: Array<EventGuestes>;\n  /** fetch aggregated fields from the table: \"eventGuestes\" */\n  eventGuestes_aggregate: EventGuestes_Aggregate;\n  /** fetch data from the table: \"eventGuestes\" using primary key columns */\n  eventGuestes_by_pk?: Maybe<EventGuestes>;\n  /** fetch aggregated fields from the table: \"event\" */\n  event_aggregate: Event_Aggregate;\n  /** fetch data from the table: \"event\" using primary key columns */\n  event_by_pk?: Maybe<Event>;\n  /** fetch data from the table: \"question\" */\n  question: Array<Question>;\n  /** fetch aggregated fields from the table: \"question\" */\n  question_aggregate: Question_Aggregate;\n  /** fetch data from the table: \"question\" using primary key columns */\n  question_by_pk?: Maybe<Question>;\n  /** fetch data from the table: \"reply\" */\n  reply: Array<Reply>;\n  /** fetch aggregated fields from the table: \"reply\" */\n  reply_aggregate: Reply_Aggregate;\n  /** fetch data from the table: \"reply\" using primary key columns */\n  reply_by_pk?: Maybe<Reply>;\n  /** fetch data from the table: \"role\" */\n  role: Array<Role>;\n  /** fetch aggregated fields from the table: \"role\" */\n  role_aggregate: Role_Aggregate;\n  /** fetch data from the table: \"role\" using primary key columns */\n  role_by_pk?: Maybe<Role>;\n  /** fetch data from the table: \"user\" */\n  user: Array<User>;\n  /** fetch data from the table: \"userRoles\" */\n  userRoles: Array<UserRoles>;\n  /** fetch aggregated fields from the table: \"userRoles\" */\n  userRoles_aggregate: UserRoles_Aggregate;\n  /** fetch data from the table: \"userRoles\" using primary key columns */\n  userRoles_by_pk?: Maybe<UserRoles>;\n  /** fetch aggregated fields from the table: \"user\" */\n  user_aggregate: User_Aggregate;\n  /** fetch data from the table: \"user\" using primary key columns */\n  user_by_pk?: Maybe<User>;\n  /** fetch data from the table: \"usersVoteUpQuestions\" */\n  usersVoteUpQuestions: Array<UsersVoteUpQuestions>;\n  /** fetch aggregated fields from the table: \"usersVoteUpQuestions\" */\n  usersVoteUpQuestions_aggregate: UsersVoteUpQuestions_Aggregate;\n  /** fetch data from the table: \"usersVoteUpQuestions\" using primary key columns */\n  usersVoteUpQuestions_by_pk?: Maybe<UsersVoteUpQuestions>;\n};\n\n\nexport type Subscription_RootEventArgs = {\n  distinct_on?: Maybe<Array<Event_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Event_Order_By>>;\n  where?: Maybe<Event_Bool_Exp>;\n};\n\n\nexport type Subscription_RootEventAudiencesArgs = {\n  distinct_on?: Maybe<Array<EventAudiences_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventAudiences_Order_By>>;\n  where?: Maybe<EventAudiences_Bool_Exp>;\n};\n\n\nexport type Subscription_RootEventAudiences_AggregateArgs = {\n  distinct_on?: Maybe<Array<EventAudiences_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventAudiences_Order_By>>;\n  where?: Maybe<EventAudiences_Bool_Exp>;\n};\n\n\nexport type Subscription_RootEventAudiences_By_PkArgs = {\n  eventId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n\nexport type Subscription_RootEventGuestesArgs = {\n  distinct_on?: Maybe<Array<EventGuestes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventGuestes_Order_By>>;\n  where?: Maybe<EventGuestes_Bool_Exp>;\n};\n\n\nexport type Subscription_RootEventGuestes_AggregateArgs = {\n  distinct_on?: Maybe<Array<EventGuestes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventGuestes_Order_By>>;\n  where?: Maybe<EventGuestes_Bool_Exp>;\n};\n\n\nexport type Subscription_RootEventGuestes_By_PkArgs = {\n  eventId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n\nexport type Subscription_RootEvent_AggregateArgs = {\n  distinct_on?: Maybe<Array<Event_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Event_Order_By>>;\n  where?: Maybe<Event_Bool_Exp>;\n};\n\n\nexport type Subscription_RootEvent_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\nexport type Subscription_RootQuestionArgs = {\n  distinct_on?: Maybe<Array<Question_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Question_Order_By>>;\n  where?: Maybe<Question_Bool_Exp>;\n};\n\n\nexport type Subscription_RootQuestion_AggregateArgs = {\n  distinct_on?: Maybe<Array<Question_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Question_Order_By>>;\n  where?: Maybe<Question_Bool_Exp>;\n};\n\n\nexport type Subscription_RootQuestion_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\nexport type Subscription_RootReplyArgs = {\n  distinct_on?: Maybe<Array<Reply_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Reply_Order_By>>;\n  where?: Maybe<Reply_Bool_Exp>;\n};\n\n\nexport type Subscription_RootReply_AggregateArgs = {\n  distinct_on?: Maybe<Array<Reply_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Reply_Order_By>>;\n  where?: Maybe<Reply_Bool_Exp>;\n};\n\n\nexport type Subscription_RootReply_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\nexport type Subscription_RootRoleArgs = {\n  distinct_on?: Maybe<Array<Role_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Role_Order_By>>;\n  where?: Maybe<Role_Bool_Exp>;\n};\n\n\nexport type Subscription_RootRole_AggregateArgs = {\n  distinct_on?: Maybe<Array<Role_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Role_Order_By>>;\n  where?: Maybe<Role_Bool_Exp>;\n};\n\n\nexport type Subscription_RootRole_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\nexport type Subscription_RootUserArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\nexport type Subscription_RootUserRolesArgs = {\n  distinct_on?: Maybe<Array<UserRoles_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UserRoles_Order_By>>;\n  where?: Maybe<UserRoles_Bool_Exp>;\n};\n\n\nexport type Subscription_RootUserRoles_AggregateArgs = {\n  distinct_on?: Maybe<Array<UserRoles_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UserRoles_Order_By>>;\n  where?: Maybe<UserRoles_Bool_Exp>;\n};\n\n\nexport type Subscription_RootUserRoles_By_PkArgs = {\n  roleId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n\nexport type Subscription_RootUser_AggregateArgs = {\n  distinct_on?: Maybe<Array<User_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<User_Order_By>>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n\nexport type Subscription_RootUser_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n\nexport type Subscription_RootUsersVoteUpQuestionsArgs = {\n  distinct_on?: Maybe<Array<UsersVoteUpQuestions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UsersVoteUpQuestions_Order_By>>;\n  where?: Maybe<UsersVoteUpQuestions_Bool_Exp>;\n};\n\n\nexport type Subscription_RootUsersVoteUpQuestions_AggregateArgs = {\n  distinct_on?: Maybe<Array<UsersVoteUpQuestions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UsersVoteUpQuestions_Order_By>>;\n  where?: Maybe<UsersVoteUpQuestions_Bool_Exp>;\n};\n\n\nexport type Subscription_RootUsersVoteUpQuestions_By_PkArgs = {\n  questionId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n\n/** Boolean expression to compare columns of type \"timestamp\". All fields are combined with logical 'AND'. */\nexport type Timestamp_Comparison_Exp = {\n  _eq?: Maybe<Scalars['timestamp']>;\n  _gt?: Maybe<Scalars['timestamp']>;\n  _gte?: Maybe<Scalars['timestamp']>;\n  _in?: Maybe<Array<Scalars['timestamp']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['timestamp']>;\n  _lte?: Maybe<Scalars['timestamp']>;\n  _neq?: Maybe<Scalars['timestamp']>;\n  _nin?: Maybe<Array<Scalars['timestamp']>>;\n};\n\n/** columns and relationships of \"user\" */\nexport type User = {\n  __typename?: 'user';\n  anonymous: Scalars['Boolean'];\n  /** An array relationship */\n  attendedEvents: Array<EventAudiences>;\n  /** An aggregate relationship */\n  attendedEvents_aggregate: EventAudiences_Aggregate;\n  avatar?: Maybe<Scalars['String']>;\n  createdAt: Scalars['timestamp'];\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  email?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  events: Array<Event>;\n  /** An aggregate relationship */\n  events_aggregate: Event_Aggregate;\n  fingerprint?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  guestEvents: Array<EventGuestes>;\n  /** An aggregate relationship */\n  guestEvents_aggregate: EventGuestes_Aggregate;\n  id: Scalars['uuid'];\n  name?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  questions: Array<Question>;\n  /** An aggregate relationship */\n  questions_aggregate: Question_Aggregate;\n  /** An array relationship */\n  replies: Array<Reply>;\n  /** An aggregate relationship */\n  replies_aggregate: Reply_Aggregate;\n  /** An array relationship */\n  roles: Array<UserRoles>;\n  /** An aggregate relationship */\n  roles_aggregate: UserRoles_Aggregate;\n  updatedAt: Scalars['timestamp'];\n  /** An array relationship */\n  voteUpQuestions: Array<UsersVoteUpQuestions>;\n  /** An aggregate relationship */\n  voteUpQuestions_aggregate: UsersVoteUpQuestions_Aggregate;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserAttendedEventsArgs = {\n  distinct_on?: Maybe<Array<EventAudiences_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventAudiences_Order_By>>;\n  where?: Maybe<EventAudiences_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserAttendedEvents_AggregateArgs = {\n  distinct_on?: Maybe<Array<EventAudiences_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventAudiences_Order_By>>;\n  where?: Maybe<EventAudiences_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserEventsArgs = {\n  distinct_on?: Maybe<Array<Event_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Event_Order_By>>;\n  where?: Maybe<Event_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserEvents_AggregateArgs = {\n  distinct_on?: Maybe<Array<Event_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Event_Order_By>>;\n  where?: Maybe<Event_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserGuestEventsArgs = {\n  distinct_on?: Maybe<Array<EventGuestes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventGuestes_Order_By>>;\n  where?: Maybe<EventGuestes_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserGuestEvents_AggregateArgs = {\n  distinct_on?: Maybe<Array<EventGuestes_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<EventGuestes_Order_By>>;\n  where?: Maybe<EventGuestes_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserQuestionsArgs = {\n  distinct_on?: Maybe<Array<Question_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Question_Order_By>>;\n  where?: Maybe<Question_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserQuestions_AggregateArgs = {\n  distinct_on?: Maybe<Array<Question_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Question_Order_By>>;\n  where?: Maybe<Question_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserRepliesArgs = {\n  distinct_on?: Maybe<Array<Reply_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Reply_Order_By>>;\n  where?: Maybe<Reply_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserReplies_AggregateArgs = {\n  distinct_on?: Maybe<Array<Reply_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Reply_Order_By>>;\n  where?: Maybe<Reply_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserRolesArgs = {\n  distinct_on?: Maybe<Array<UserRoles_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UserRoles_Order_By>>;\n  where?: Maybe<UserRoles_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserRoles_AggregateArgs = {\n  distinct_on?: Maybe<Array<UserRoles_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UserRoles_Order_By>>;\n  where?: Maybe<UserRoles_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserVoteUpQuestionsArgs = {\n  distinct_on?: Maybe<Array<UsersVoteUpQuestions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UsersVoteUpQuestions_Order_By>>;\n  where?: Maybe<UsersVoteUpQuestions_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"user\" */\nexport type UserVoteUpQuestions_AggregateArgs = {\n  distinct_on?: Maybe<Array<UsersVoteUpQuestions_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<UsersVoteUpQuestions_Order_By>>;\n  where?: Maybe<UsersVoteUpQuestions_Bool_Exp>;\n};\n\n/** columns and relationships of \"userRoles\" */\nexport type UserRoles = {\n  __typename?: 'userRoles';\n  /** An object relationship */\n  role: Role;\n  roleId: Scalars['uuid'];\n  /** An object relationship */\n  user: User;\n  userId: Scalars['uuid'];\n};\n\n/** aggregated selection of \"userRoles\" */\nexport type UserRoles_Aggregate = {\n  __typename?: 'userRoles_aggregate';\n  aggregate?: Maybe<UserRoles_Aggregate_Fields>;\n  nodes: Array<UserRoles>;\n};\n\n/** aggregate fields of \"userRoles\" */\nexport type UserRoles_Aggregate_Fields = {\n  __typename?: 'userRoles_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<UserRoles_Max_Fields>;\n  min?: Maybe<UserRoles_Min_Fields>;\n};\n\n\n/** aggregate fields of \"userRoles\" */\nexport type UserRoles_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<UserRoles_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"userRoles\" */\nexport type UserRoles_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<UserRoles_Max_Order_By>;\n  min?: Maybe<UserRoles_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"userRoles\" */\nexport type UserRoles_Arr_Rel_Insert_Input = {\n  data: Array<UserRoles_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: Maybe<UserRoles_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"userRoles\". All fields are combined with a logical 'AND'. */\nexport type UserRoles_Bool_Exp = {\n  _and?: Maybe<Array<UserRoles_Bool_Exp>>;\n  _not?: Maybe<UserRoles_Bool_Exp>;\n  _or?: Maybe<Array<UserRoles_Bool_Exp>>;\n  role?: Maybe<Role_Bool_Exp>;\n  roleId?: Maybe<Uuid_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  userId?: Maybe<Uuid_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"userRoles\" */\nexport enum UserRoles_Constraint {\n  /** unique or primary key constraint */\n  Pk_046d21329e72c0aedd207bbcdb1 = 'PK_046d21329e72c0aedd207bbcdb1'\n}\n\n/** input type for inserting data into table \"userRoles\" */\nexport type UserRoles_Insert_Input = {\n  role?: Maybe<Role_Obj_Rel_Insert_Input>;\n  roleId?: Maybe<Scalars['uuid']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** aggregate max on columns */\nexport type UserRoles_Max_Fields = {\n  __typename?: 'userRoles_max_fields';\n  roleId?: Maybe<Scalars['uuid']>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"userRoles\" */\nexport type UserRoles_Max_Order_By = {\n  roleId?: Maybe<Order_By>;\n  userId?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type UserRoles_Min_Fields = {\n  __typename?: 'userRoles_min_fields';\n  roleId?: Maybe<Scalars['uuid']>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"userRoles\" */\nexport type UserRoles_Min_Order_By = {\n  roleId?: Maybe<Order_By>;\n  userId?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"userRoles\" */\nexport type UserRoles_Mutation_Response = {\n  __typename?: 'userRoles_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<UserRoles>;\n};\n\n/** on conflict condition type for table \"userRoles\" */\nexport type UserRoles_On_Conflict = {\n  constraint: UserRoles_Constraint;\n  update_columns?: Array<UserRoles_Update_Column>;\n  where?: Maybe<UserRoles_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"userRoles\". */\nexport type UserRoles_Order_By = {\n  role?: Maybe<Role_Order_By>;\n  roleId?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  userId?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: userRoles */\nexport type UserRoles_Pk_Columns_Input = {\n  roleId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n/** select columns of table \"userRoles\" */\nexport enum UserRoles_Select_Column {\n  /** column name */\n  RoleId = 'roleId',\n  /** column name */\n  UserId = 'userId'\n}\n\n/** input type for updating data in table \"userRoles\" */\nexport type UserRoles_Set_Input = {\n  roleId?: Maybe<Scalars['uuid']>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** update columns of table \"userRoles\" */\nexport enum UserRoles_Update_Column {\n  /** column name */\n  RoleId = 'roleId',\n  /** column name */\n  UserId = 'userId'\n}\n\n/** aggregated selection of \"user\" */\nexport type User_Aggregate = {\n  __typename?: 'user_aggregate';\n  aggregate?: Maybe<User_Aggregate_Fields>;\n  nodes: Array<User>;\n};\n\n/** aggregate fields of \"user\" */\nexport type User_Aggregate_Fields = {\n  __typename?: 'user_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<User_Max_Fields>;\n  min?: Maybe<User_Min_Fields>;\n};\n\n\n/** aggregate fields of \"user\" */\nexport type User_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<User_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** Boolean expression to filter rows from the table \"user\". All fields are combined with a logical 'AND'. */\nexport type User_Bool_Exp = {\n  _and?: Maybe<Array<User_Bool_Exp>>;\n  _not?: Maybe<User_Bool_Exp>;\n  _or?: Maybe<Array<User_Bool_Exp>>;\n  anonymous?: Maybe<Boolean_Comparison_Exp>;\n  attendedEvents?: Maybe<EventAudiences_Bool_Exp>;\n  avatar?: Maybe<String_Comparison_Exp>;\n  createdAt?: Maybe<Timestamp_Comparison_Exp>;\n  deletedAt?: Maybe<Timestamp_Comparison_Exp>;\n  email?: Maybe<String_Comparison_Exp>;\n  events?: Maybe<Event_Bool_Exp>;\n  fingerprint?: Maybe<String_Comparison_Exp>;\n  guestEvents?: Maybe<EventGuestes_Bool_Exp>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n  password?: Maybe<String_Comparison_Exp>;\n  questions?: Maybe<Question_Bool_Exp>;\n  replies?: Maybe<Reply_Bool_Exp>;\n  roles?: Maybe<UserRoles_Bool_Exp>;\n  updatedAt?: Maybe<Timestamp_Comparison_Exp>;\n  voteUpQuestions?: Maybe<UsersVoteUpQuestions_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"user\" */\nexport enum User_Constraint {\n  /** unique or primary key constraint */\n  PkCace4a159ff9f2512dd42373760 = 'PK_cace4a159ff9f2512dd42373760',\n  /** unique or primary key constraint */\n  UqB4036ca1a59b8e19708db3c0e68 = 'UQ_b4036ca1a59b8e19708db3c0e68',\n  /** unique or primary key constraint */\n  UqB613f025993be2d1e51ba4c2b5f = 'UQ_b613f025993be2d1e51ba4c2b5f',\n  /** unique or primary key constraint */\n  UqE12875dfb3b1d92d7d7c5377e22 = 'UQ_e12875dfb3b1d92d7d7c5377e22'\n}\n\n/** input type for inserting data into table \"user\" */\nexport type User_Insert_Input = {\n  anonymous?: Maybe<Scalars['Boolean']>;\n  attendedEvents?: Maybe<EventAudiences_Arr_Rel_Insert_Input>;\n  avatar?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  email?: Maybe<Scalars['String']>;\n  events?: Maybe<Event_Arr_Rel_Insert_Input>;\n  fingerprint?: Maybe<Scalars['String']>;\n  guestEvents?: Maybe<EventGuestes_Arr_Rel_Insert_Input>;\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  questions?: Maybe<Question_Arr_Rel_Insert_Input>;\n  replies?: Maybe<Reply_Arr_Rel_Insert_Input>;\n  roles?: Maybe<UserRoles_Arr_Rel_Insert_Input>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n  voteUpQuestions?: Maybe<UsersVoteUpQuestions_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type User_Max_Fields = {\n  __typename?: 'user_max_fields';\n  avatar?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  email?: Maybe<Scalars['String']>;\n  fingerprint?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n};\n\n/** aggregate min on columns */\nexport type User_Min_Fields = {\n  __typename?: 'user_min_fields';\n  avatar?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  email?: Maybe<Scalars['String']>;\n  fingerprint?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n};\n\n/** response of any mutation on the table \"user\" */\nexport type User_Mutation_Response = {\n  __typename?: 'user_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<User>;\n};\n\n/** input type for inserting object relation for remote table \"user\" */\nexport type User_Obj_Rel_Insert_Input = {\n  data: User_Insert_Input;\n  /** on conflict condition */\n  on_conflict?: Maybe<User_On_Conflict>;\n};\n\n/** on conflict condition type for table \"user\" */\nexport type User_On_Conflict = {\n  constraint: User_Constraint;\n  update_columns?: Array<User_Update_Column>;\n  where?: Maybe<User_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"user\". */\nexport type User_Order_By = {\n  anonymous?: Maybe<Order_By>;\n  attendedEvents_aggregate?: Maybe<EventAudiences_Aggregate_Order_By>;\n  avatar?: Maybe<Order_By>;\n  createdAt?: Maybe<Order_By>;\n  deletedAt?: Maybe<Order_By>;\n  email?: Maybe<Order_By>;\n  events_aggregate?: Maybe<Event_Aggregate_Order_By>;\n  fingerprint?: Maybe<Order_By>;\n  guestEvents_aggregate?: Maybe<EventGuestes_Aggregate_Order_By>;\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  password?: Maybe<Order_By>;\n  questions_aggregate?: Maybe<Question_Aggregate_Order_By>;\n  replies_aggregate?: Maybe<Reply_Aggregate_Order_By>;\n  roles_aggregate?: Maybe<UserRoles_Aggregate_Order_By>;\n  updatedAt?: Maybe<Order_By>;\n  voteUpQuestions_aggregate?: Maybe<UsersVoteUpQuestions_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: user */\nexport type User_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"user\" */\nexport enum User_Select_Column {\n  /** column name */\n  Anonymous = 'anonymous',\n  /** column name */\n  Avatar = 'avatar',\n  /** column name */\n  CreatedAt = 'createdAt',\n  /** column name */\n  DeletedAt = 'deletedAt',\n  /** column name */\n  Email = 'email',\n  /** column name */\n  Fingerprint = 'fingerprint',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  Password = 'password',\n  /** column name */\n  UpdatedAt = 'updatedAt'\n}\n\n/** input type for updating data in table \"user\" */\nexport type User_Set_Input = {\n  anonymous?: Maybe<Scalars['Boolean']>;\n  avatar?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['timestamp']>;\n  deletedAt?: Maybe<Scalars['timestamp']>;\n  email?: Maybe<Scalars['String']>;\n  fingerprint?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  name?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['timestamp']>;\n};\n\n/** update columns of table \"user\" */\nexport enum User_Update_Column {\n  /** column name */\n  Anonymous = 'anonymous',\n  /** column name */\n  Avatar = 'avatar',\n  /** column name */\n  CreatedAt = 'createdAt',\n  /** column name */\n  DeletedAt = 'deletedAt',\n  /** column name */\n  Email = 'email',\n  /** column name */\n  Fingerprint = 'fingerprint',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  Password = 'password',\n  /** column name */\n  UpdatedAt = 'updatedAt'\n}\n\n/** columns and relationships of \"usersVoteUpQuestions\" */\nexport type UsersVoteUpQuestions = {\n  __typename?: 'usersVoteUpQuestions';\n  /** An object relationship */\n  question: Question;\n  questionId: Scalars['uuid'];\n  /** An object relationship */\n  user: User;\n  userId: Scalars['uuid'];\n};\n\n/** aggregated selection of \"usersVoteUpQuestions\" */\nexport type UsersVoteUpQuestions_Aggregate = {\n  __typename?: 'usersVoteUpQuestions_aggregate';\n  aggregate?: Maybe<UsersVoteUpQuestions_Aggregate_Fields>;\n  nodes: Array<UsersVoteUpQuestions>;\n};\n\n/** aggregate fields of \"usersVoteUpQuestions\" */\nexport type UsersVoteUpQuestions_Aggregate_Fields = {\n  __typename?: 'usersVoteUpQuestions_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<UsersVoteUpQuestions_Max_Fields>;\n  min?: Maybe<UsersVoteUpQuestions_Min_Fields>;\n};\n\n\n/** aggregate fields of \"usersVoteUpQuestions\" */\nexport type UsersVoteUpQuestions_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<UsersVoteUpQuestions_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"usersVoteUpQuestions\" */\nexport type UsersVoteUpQuestions_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<UsersVoteUpQuestions_Max_Order_By>;\n  min?: Maybe<UsersVoteUpQuestions_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"usersVoteUpQuestions\" */\nexport type UsersVoteUpQuestions_Arr_Rel_Insert_Input = {\n  data: Array<UsersVoteUpQuestions_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: Maybe<UsersVoteUpQuestions_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"usersVoteUpQuestions\". All fields are combined with a logical 'AND'. */\nexport type UsersVoteUpQuestions_Bool_Exp = {\n  _and?: Maybe<Array<UsersVoteUpQuestions_Bool_Exp>>;\n  _not?: Maybe<UsersVoteUpQuestions_Bool_Exp>;\n  _or?: Maybe<Array<UsersVoteUpQuestions_Bool_Exp>>;\n  question?: Maybe<Question_Bool_Exp>;\n  questionId?: Maybe<Uuid_Comparison_Exp>;\n  user?: Maybe<User_Bool_Exp>;\n  userId?: Maybe<Uuid_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"usersVoteUpQuestions\" */\nexport enum UsersVoteUpQuestions_Constraint {\n  /** unique or primary key constraint */\n  Pk_81f8ce9de43c942f2e40405b245 = 'PK_81f8ce9de43c942f2e40405b245'\n}\n\n/** input type for inserting data into table \"usersVoteUpQuestions\" */\nexport type UsersVoteUpQuestions_Insert_Input = {\n  question?: Maybe<Question_Obj_Rel_Insert_Input>;\n  questionId?: Maybe<Scalars['uuid']>;\n  user?: Maybe<User_Obj_Rel_Insert_Input>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** aggregate max on columns */\nexport type UsersVoteUpQuestions_Max_Fields = {\n  __typename?: 'usersVoteUpQuestions_max_fields';\n  questionId?: Maybe<Scalars['uuid']>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"usersVoteUpQuestions\" */\nexport type UsersVoteUpQuestions_Max_Order_By = {\n  questionId?: Maybe<Order_By>;\n  userId?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type UsersVoteUpQuestions_Min_Fields = {\n  __typename?: 'usersVoteUpQuestions_min_fields';\n  questionId?: Maybe<Scalars['uuid']>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"usersVoteUpQuestions\" */\nexport type UsersVoteUpQuestions_Min_Order_By = {\n  questionId?: Maybe<Order_By>;\n  userId?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"usersVoteUpQuestions\" */\nexport type UsersVoteUpQuestions_Mutation_Response = {\n  __typename?: 'usersVoteUpQuestions_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<UsersVoteUpQuestions>;\n};\n\n/** on conflict condition type for table \"usersVoteUpQuestions\" */\nexport type UsersVoteUpQuestions_On_Conflict = {\n  constraint: UsersVoteUpQuestions_Constraint;\n  update_columns?: Array<UsersVoteUpQuestions_Update_Column>;\n  where?: Maybe<UsersVoteUpQuestions_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"usersVoteUpQuestions\". */\nexport type UsersVoteUpQuestions_Order_By = {\n  question?: Maybe<Question_Order_By>;\n  questionId?: Maybe<Order_By>;\n  user?: Maybe<User_Order_By>;\n  userId?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: usersVoteUpQuestions */\nexport type UsersVoteUpQuestions_Pk_Columns_Input = {\n  questionId: Scalars['uuid'];\n  userId: Scalars['uuid'];\n};\n\n/** select columns of table \"usersVoteUpQuestions\" */\nexport enum UsersVoteUpQuestions_Select_Column {\n  /** column name */\n  QuestionId = 'questionId',\n  /** column name */\n  UserId = 'userId'\n}\n\n/** input type for updating data in table \"usersVoteUpQuestions\" */\nexport type UsersVoteUpQuestions_Set_Input = {\n  questionId?: Maybe<Scalars['uuid']>;\n  userId?: Maybe<Scalars['uuid']>;\n};\n\n/** update columns of table \"usersVoteUpQuestions\" */\nexport enum UsersVoteUpQuestions_Update_Column {\n  /** column name */\n  QuestionId = 'questionId',\n  /** column name */\n  UserId = 'userId'\n}\n\n\n/** Boolean expression to compare columns of type \"uuid\". All fields are combined with logical 'AND'. */\nexport type Uuid_Comparison_Exp = {\n  _eq?: Maybe<Scalars['uuid']>;\n  _gt?: Maybe<Scalars['uuid']>;\n  _gte?: Maybe<Scalars['uuid']>;\n  _in?: Maybe<Array<Scalars['uuid']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['uuid']>;\n  _lte?: Maybe<Scalars['uuid']>;\n  _neq?: Maybe<Scalars['uuid']>;\n  _nin?: Maybe<Array<Scalars['uuid']>>;\n};\n\nexport type QuestionLiveQueryFieldsFragment = (\n  { __typename?: 'question' }\n  & Pick<Question, 'id' | 'anonymous' | 'createdAt' | 'updatedAt' | 'voteUpCount' | 'replyCount' | 'content' | 'reviewStatus' | 'star' | 'top'>\n  & { author?: Maybe<(\n    { __typename?: 'user' }\n    & Pick<User, 'id' | 'name' | 'avatar'>\n  )> }\n);\n\nexport type QuestionLiveQuerySubscriptionVariables = Exact<{\n  distinct_on?: Maybe<Array<Question_Select_Column> | Question_Select_Column>;\n  limit: Scalars['Int'];\n  offset: Scalars['Int'];\n  order_by?: Maybe<Array<Question_Order_By> | Question_Order_By>;\n  where: Question_Bool_Exp;\n}>;\n\n\nexport type QuestionLiveQuerySubscription = (\n  { __typename?: 'subscription_root' }\n  & { question: Array<(\n    { __typename?: 'question' }\n    & QuestionLiveQueryFieldsFragment\n  )> }\n);\n\nexport type QuestionCountLiveQuerySubscriptionVariables = Exact<{\n  where: Question_Bool_Exp;\n}>;\n\n\nexport type QuestionCountLiveQuerySubscription = (\n  { __typename?: 'subscription_root' }\n  & { question_aggregate: (\n    { __typename?: 'question_aggregate' }\n    & { aggregate?: Maybe<(\n      { __typename?: 'question_aggregate_fields' }\n      & Pick<Question_Aggregate_Fields, 'count'>\n    )> }\n  ) }\n);\n\nexport type ReplyLiveQueryFieldsFragment = (\n  { __typename?: 'reply' }\n  & Pick<Reply, 'id' | 'createdAt' | 'updatedAt' | 'content' | 'reviewStatus' | 'isModerator'>\n  & { author?: Maybe<(\n    { __typename?: 'user' }\n    & Pick<User, 'id' | 'name' | 'avatar'>\n  )> }\n);\n\nexport type ReplyLiveQuerySubscriptionVariables = Exact<{\n  questionId: Scalars['uuid'];\n  limit: Scalars['Int'];\n  offset: Scalars['Int'];\n  order_by?: Maybe<Array<Reply_Order_By> | Reply_Order_By>;\n  where?: Maybe<Reply_Bool_Exp>;\n}>;\n\n\nexport type ReplyLiveQuerySubscription = (\n  { __typename?: 'subscription_root' }\n  & { question: Array<(\n    { __typename?: 'question' }\n    & { replies: Array<(\n      { __typename?: 'reply' }\n      & ReplyLiveQueryFieldsFragment\n    )> }\n    & QuestionLiveQueryFieldsFragment\n  )> }\n);\n\nexport type EventDetailLiveQueryFieldsFragment = (\n  { __typename?: 'event' }\n  & Pick<Event, 'id' | 'name' | 'code' | 'startAt' | 'endAt' | 'moderation'>\n);\n\nexport type EventDetailLiveQuerySubscriptionVariables = Exact<{\n  distinct_on?: Maybe<Array<Event_Select_Column> | Event_Select_Column>;\n  where?: Maybe<Event_Bool_Exp>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Event_Order_By> | Event_Order_By>;\n}>;\n\n\nexport type EventDetailLiveQuerySubscription = (\n  { __typename?: 'subscription_root' }\n  & { event: Array<(\n    { __typename?: 'event' }\n    & EventDetailLiveQueryFieldsFragment\n  )> }\n);\n\nexport type QuestionLiveQueryAudienceFieldsFragment = (\n  { __typename?: 'question' }\n  & { voteUpUsers: Array<(\n    { __typename?: 'usersVoteUpQuestions' }\n    & Pick<UsersVoteUpQuestions, 'userId'>\n  )> }\n  & QuestionLiveQueryFieldsFragment\n);\n\nexport type QuestionLiveQueryAudienceSubscriptionVariables = Exact<{\n  limit: Scalars['Int'];\n  offset: Scalars['Int'];\n  where?: Maybe<Question_Bool_Exp>;\n  order_by?: Maybe<Array<Question_Order_By> | Question_Order_By>;\n}>;\n\n\nexport type QuestionLiveQueryAudienceSubscription = (\n  { __typename?: 'subscription_root' }\n  & { question: Array<(\n    { __typename?: 'question' }\n    & QuestionLiveQueryAudienceFieldsFragment\n  )> }\n);\n\nexport type QuestionCountLiveQueryAudienceSubscriptionVariables = Exact<{\n  where?: Maybe<Question_Bool_Exp>;\n}>;\n\n\nexport type QuestionCountLiveQueryAudienceSubscription = (\n  { __typename?: 'subscription_root' }\n  & { question_aggregate: (\n    { __typename?: 'question_aggregate' }\n    & { aggregate?: Maybe<(\n      { __typename?: 'question_aggregate_fields' }\n      & Pick<Question_Aggregate_Fields, 'count'>\n    )> }\n  ) }\n);\n\nexport type ReplyLiveQueryAudienceSubscriptionVariables = Exact<{\n  questionId: Scalars['uuid'];\n  limit: Scalars['Int'];\n  offset: Scalars['Int'];\n  order_by?: Maybe<Array<Reply_Order_By> | Reply_Order_By>;\n  where?: Maybe<Reply_Bool_Exp>;\n}>;\n\n\nexport type ReplyLiveQueryAudienceSubscription = (\n  { __typename?: 'subscription_root' }\n  & { question: Array<(\n    { __typename?: 'question' }\n    & { replies: Array<(\n      { __typename?: 'reply' }\n      & ReplyLiveQueryFieldsFragment\n    )> }\n    & QuestionLiveQueryAudienceFieldsFragment\n  )> }\n);\n\nexport const ReplyLiveQueryFieldsFragmentDoc = gql`\n    fragment ReplyLiveQueryFields on reply {\n  id\n  createdAt\n  updatedAt\n  content\n  reviewStatus\n  isModerator\n  author {\n    id\n    name\n    avatar\n  }\n}\n    `;\nexport const EventDetailLiveQueryFieldsFragmentDoc = gql`\n    fragment EventDetailLiveQueryFields on event {\n  id\n  name\n  code\n  startAt\n  endAt\n  moderation\n}\n    `;\nexport const QuestionLiveQueryFieldsFragmentDoc = gql`\n    fragment QuestionLiveQueryFields on question {\n  id\n  anonymous\n  createdAt\n  updatedAt\n  voteUpCount\n  replyCount\n  content\n  reviewStatus\n  star\n  top\n  author {\n    id\n    name\n    avatar\n  }\n}\n    `;\nexport const QuestionLiveQueryAudienceFieldsFragmentDoc = gql`\n    fragment QuestionLiveQueryAudienceFields on question {\n  ...QuestionLiveQueryFields\n  voteUpUsers {\n    userId\n  }\n}\n    ${QuestionLiveQueryFieldsFragmentDoc}`;\nexport const QuestionLiveQueryDocument = gql`\n    subscription QuestionLiveQuery($distinct_on: [question_select_column!], $limit: Int!, $offset: Int!, $order_by: [question_order_by!], $where: question_bool_exp!) {\n  question(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    ...QuestionLiveQueryFields\n  }\n}\n    ${QuestionLiveQueryFieldsFragmentDoc}`;\n\n/**\n * __useQuestionLiveQuerySubscription__\n *\n * To run a query within a React component, call `useQuestionLiveQuerySubscription` and pass it any options that fit your needs.\n * When your component renders, `useQuestionLiveQuerySubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useQuestionLiveQuerySubscription({\n *   variables: {\n *      distinct_on: // value for 'distinct_on'\n *      limit: // value for 'limit'\n *      offset: // value for 'offset'\n *      order_by: // value for 'order_by'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useQuestionLiveQuerySubscription(baseOptions: Apollo.SubscriptionHookOptions<QuestionLiveQuerySubscription, QuestionLiveQuerySubscriptionVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useSubscription<QuestionLiveQuerySubscription, QuestionLiveQuerySubscriptionVariables>(QuestionLiveQueryDocument, options);\n      }\nexport type QuestionLiveQuerySubscriptionHookResult = ReturnType<typeof useQuestionLiveQuerySubscription>;\nexport type QuestionLiveQuerySubscriptionResult = Apollo.SubscriptionResult<QuestionLiveQuerySubscription>;\nexport const QuestionCountLiveQueryDocument = gql`\n    subscription QuestionCountLiveQuery($where: question_bool_exp!) {\n  question_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\n\n/**\n * __useQuestionCountLiveQuerySubscription__\n *\n * To run a query within a React component, call `useQuestionCountLiveQuerySubscription` and pass it any options that fit your needs.\n * When your component renders, `useQuestionCountLiveQuerySubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useQuestionCountLiveQuerySubscription({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useQuestionCountLiveQuerySubscription(baseOptions: Apollo.SubscriptionHookOptions<QuestionCountLiveQuerySubscription, QuestionCountLiveQuerySubscriptionVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useSubscription<QuestionCountLiveQuerySubscription, QuestionCountLiveQuerySubscriptionVariables>(QuestionCountLiveQueryDocument, options);\n      }\nexport type QuestionCountLiveQuerySubscriptionHookResult = ReturnType<typeof useQuestionCountLiveQuerySubscription>;\nexport type QuestionCountLiveQuerySubscriptionResult = Apollo.SubscriptionResult<QuestionCountLiveQuerySubscription>;\nexport const ReplyLiveQueryDocument = gql`\n    subscription ReplyLiveQuery($questionId: uuid!, $limit: Int!, $offset: Int!, $order_by: [reply_order_by!], $where: reply_bool_exp) {\n  question(where: {id: {_eq: $questionId}}) {\n    ...QuestionLiveQueryFields\n    replies(limit: $limit, offset: $offset, order_by: $order_by, where: $where) {\n      ...ReplyLiveQueryFields\n    }\n  }\n}\n    ${QuestionLiveQueryFieldsFragmentDoc}\n${ReplyLiveQueryFieldsFragmentDoc}`;\n\n/**\n * __useReplyLiveQuerySubscription__\n *\n * To run a query within a React component, call `useReplyLiveQuerySubscription` and pass it any options that fit your needs.\n * When your component renders, `useReplyLiveQuerySubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReplyLiveQuerySubscription({\n *   variables: {\n *      questionId: // value for 'questionId'\n *      limit: // value for 'limit'\n *      offset: // value for 'offset'\n *      order_by: // value for 'order_by'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useReplyLiveQuerySubscription(baseOptions: Apollo.SubscriptionHookOptions<ReplyLiveQuerySubscription, ReplyLiveQuerySubscriptionVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useSubscription<ReplyLiveQuerySubscription, ReplyLiveQuerySubscriptionVariables>(ReplyLiveQueryDocument, options);\n      }\nexport type ReplyLiveQuerySubscriptionHookResult = ReturnType<typeof useReplyLiveQuerySubscription>;\nexport type ReplyLiveQuerySubscriptionResult = Apollo.SubscriptionResult<ReplyLiveQuerySubscription>;\nexport const EventDetailLiveQueryDocument = gql`\n    subscription EventDetailLiveQuery($distinct_on: [event_select_column!], $where: event_bool_exp, $limit: Int, $offset: Int, $order_by: [event_order_by!]) {\n  event(\n    distinct_on: $distinct_on\n    where: $where\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n  ) {\n    ...EventDetailLiveQueryFields\n  }\n}\n    ${EventDetailLiveQueryFieldsFragmentDoc}`;\n\n/**\n * __useEventDetailLiveQuerySubscription__\n *\n * To run a query within a React component, call `useEventDetailLiveQuerySubscription` and pass it any options that fit your needs.\n * When your component renders, `useEventDetailLiveQuerySubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useEventDetailLiveQuerySubscription({\n *   variables: {\n *      distinct_on: // value for 'distinct_on'\n *      where: // value for 'where'\n *      limit: // value for 'limit'\n *      offset: // value for 'offset'\n *      order_by: // value for 'order_by'\n *   },\n * });\n */\nexport function useEventDetailLiveQuerySubscription(baseOptions?: Apollo.SubscriptionHookOptions<EventDetailLiveQuerySubscription, EventDetailLiveQuerySubscriptionVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useSubscription<EventDetailLiveQuerySubscription, EventDetailLiveQuerySubscriptionVariables>(EventDetailLiveQueryDocument, options);\n      }\nexport type EventDetailLiveQuerySubscriptionHookResult = ReturnType<typeof useEventDetailLiveQuerySubscription>;\nexport type EventDetailLiveQuerySubscriptionResult = Apollo.SubscriptionResult<EventDetailLiveQuerySubscription>;\nexport const QuestionLiveQueryAudienceDocument = gql`\n    subscription QuestionLiveQueryAudience($limit: Int!, $offset: Int!, $where: question_bool_exp, $order_by: [question_order_by!]) {\n  question(limit: $limit, offset: $offset, where: $where, order_by: $order_by) {\n    ...QuestionLiveQueryAudienceFields\n  }\n}\n    ${QuestionLiveQueryAudienceFieldsFragmentDoc}`;\n\n/**\n * __useQuestionLiveQueryAudienceSubscription__\n *\n * To run a query within a React component, call `useQuestionLiveQueryAudienceSubscription` and pass it any options that fit your needs.\n * When your component renders, `useQuestionLiveQueryAudienceSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useQuestionLiveQueryAudienceSubscription({\n *   variables: {\n *      limit: // value for 'limit'\n *      offset: // value for 'offset'\n *      where: // value for 'where'\n *      order_by: // value for 'order_by'\n *   },\n * });\n */\nexport function useQuestionLiveQueryAudienceSubscription(baseOptions: Apollo.SubscriptionHookOptions<QuestionLiveQueryAudienceSubscription, QuestionLiveQueryAudienceSubscriptionVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useSubscription<QuestionLiveQueryAudienceSubscription, QuestionLiveQueryAudienceSubscriptionVariables>(QuestionLiveQueryAudienceDocument, options);\n      }\nexport type QuestionLiveQueryAudienceSubscriptionHookResult = ReturnType<typeof useQuestionLiveQueryAudienceSubscription>;\nexport type QuestionLiveQueryAudienceSubscriptionResult = Apollo.SubscriptionResult<QuestionLiveQueryAudienceSubscription>;\nexport const QuestionCountLiveQueryAudienceDocument = gql`\n    subscription QuestionCountLiveQueryAudience($where: question_bool_exp) {\n  question_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\n\n/**\n * __useQuestionCountLiveQueryAudienceSubscription__\n *\n * To run a query within a React component, call `useQuestionCountLiveQueryAudienceSubscription` and pass it any options that fit your needs.\n * When your component renders, `useQuestionCountLiveQueryAudienceSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useQuestionCountLiveQueryAudienceSubscription({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useQuestionCountLiveQueryAudienceSubscription(baseOptions?: Apollo.SubscriptionHookOptions<QuestionCountLiveQueryAudienceSubscription, QuestionCountLiveQueryAudienceSubscriptionVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useSubscription<QuestionCountLiveQueryAudienceSubscription, QuestionCountLiveQueryAudienceSubscriptionVariables>(QuestionCountLiveQueryAudienceDocument, options);\n      }\nexport type QuestionCountLiveQueryAudienceSubscriptionHookResult = ReturnType<typeof useQuestionCountLiveQueryAudienceSubscription>;\nexport type QuestionCountLiveQueryAudienceSubscriptionResult = Apollo.SubscriptionResult<QuestionCountLiveQueryAudienceSubscription>;\nexport const ReplyLiveQueryAudienceDocument = gql`\n    subscription ReplyLiveQueryAudience($questionId: uuid!, $limit: Int!, $offset: Int!, $order_by: [reply_order_by!], $where: reply_bool_exp) {\n  question(where: {id: {_eq: $questionId}}) {\n    ...QuestionLiveQueryAudienceFields\n    replies(limit: $limit, offset: $offset, order_by: $order_by, where: $where) {\n      ...ReplyLiveQueryFields\n    }\n  }\n}\n    ${QuestionLiveQueryAudienceFieldsFragmentDoc}\n${ReplyLiveQueryFieldsFragmentDoc}`;\n\n/**\n * __useReplyLiveQueryAudienceSubscription__\n *\n * To run a query within a React component, call `useReplyLiveQueryAudienceSubscription` and pass it any options that fit your needs.\n * When your component renders, `useReplyLiveQueryAudienceSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReplyLiveQueryAudienceSubscription({\n *   variables: {\n *      questionId: // value for 'questionId'\n *      limit: // value for 'limit'\n *      offset: // value for 'offset'\n *      order_by: // value for 'order_by'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useReplyLiveQueryAudienceSubscription(baseOptions: Apollo.SubscriptionHookOptions<ReplyLiveQueryAudienceSubscription, ReplyLiveQueryAudienceSubscriptionVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useSubscription<ReplyLiveQueryAudienceSubscription, ReplyLiveQueryAudienceSubscriptionVariables>(ReplyLiveQueryAudienceDocument, options);\n      }\nexport type ReplyLiveQueryAudienceSubscriptionHookResult = ReturnType<typeof useReplyLiveQueryAudienceSubscription>;\nexport type ReplyLiveQueryAudienceSubscriptionResult = Apollo.SubscriptionResult<ReplyLiveQueryAudienceSubscription>;","import * as R from \"ramda\";\nimport { isAfter, isBefore, isEqual } from \"date-fns\";\nimport {\n  EventDateStatus,\n  QuestionFieldsFragment,\n} from \"./generated/graphqlHooks\";\nimport { QuestionOrder } from \"./constant\";\nimport { Order_By, Question_Order_By, Maybe } from \"./generated/hasuraHooks\";\n\nexport function getQuestionOrderByCondition(\n  questionOrder: QuestionOrder\n): Maybe<Array<Question_Order_By> | Question_Order_By> {\n  switch (questionOrder) {\n    case QuestionOrder.Recent:\n      return [\n        { top: Order_By.Desc },\n        { createdAt: Order_By.Desc },\n        { voteUpCount: Order_By.Desc },\n        { content: Order_By.Desc },\n      ];\n    case QuestionOrder.Oldest:\n      return [\n        { top: Order_By.Desc },\n        { createdAt: Order_By.Asc },\n        { voteUpCount: Order_By.Desc },\n        { content: Order_By.Desc },\n      ];\n    case QuestionOrder.Starred:\n      return [\n        { top: Order_By.Desc },\n        { star: Order_By.Desc },\n        { voteUpCount: Order_By.Desc },\n        { createdAt: Order_By.Desc },\n        { content: Order_By.Desc },\n      ];\n    default:\n      // QuestionOrder.Popular:\n      return [\n        { top: Order_By.Desc },\n        { voteUpCount: Order_By.Desc },\n        { createdAt: Order_By.Desc },\n        { content: Order_By.Desc },\n      ];\n  }\n}\n\nexport function sortQuestionBy<TQuestion extends QuestionFieldsFragment>(\n  order: QuestionOrder\n) {\n  return R.sortWith(\n    order === QuestionOrder.Recent\n      ? [\n          R.descend<TQuestion>(R.prop(\"top\")),\n          R.descend<TQuestion>(R.prop(\"createdAt\")),\n          R.descend<TQuestion>(R.prop(\"voteUpCount\")),\n        ]\n      : order === QuestionOrder.Oldest\n      ? [\n          R.descend<TQuestion>(R.prop(\"top\")),\n          R.ascend<TQuestion>(R.prop(\"createdAt\")),\n          R.descend<TQuestion>(R.prop(\"voteUpCount\")),\n        ]\n      : order === QuestionOrder.Starred\n      ? [\n          R.descend<TQuestion>(R.prop(\"top\")),\n          R.descend<TQuestion>(R.prop(\"star\")),\n          R.descend<TQuestion>(R.prop(\"voteUpCount\")),\n          R.descend<TQuestion>(R.prop(\"createdAt\")),\n        ]\n      : // default: order === QuestionOrder.Popular\n        [\n          R.descend<TQuestion>(R.prop(\"top\")),\n          R.descend<TQuestion>(R.prop(\"voteUpCount\")),\n          R.descend<TQuestion>(R.prop(\"createdAt\")),\n        ]\n  );\n}\n\nexport function getHasNextPage(\n  offset: number | undefined = 0,\n  limit: number,\n  total: number | undefined = 0\n): boolean {\n  return offset + limit < total;\n}\n\nexport function getEventDateStatus(\n  startAt: Date,\n  endAt: Date,\n  now: Date\n): EventDateStatus {\n  if (isAfter(now, new Date(startAt)) && isBefore(now, new Date(endAt))) {\n    return EventDateStatus.Active;\n  } else if (\n    isBefore(now, new Date(startAt)) ||\n    isEqual(now, new Date(startAt))\n  ) {\n    return EventDateStatus.Upcoming;\n  } else {\n    // if (\n    // isAfter(now, new Date(root.endAt)) ||\n    // isEqual(NOW, new Date(root.endAt))\n    // )now\n    return EventDateStatus.Past;\n  }\n}\n","import * as React from 'react';\n/**\n * Private module reserved for @material-ui/x packages.\n */\n\nexport default function useId(idOverride) {\n  var _React$useState = React.useState(idOverride),\n      defaultId = _React$useState[0],\n      setDefaultId = _React$useState[1];\n\n  var id = idOverride || defaultId;\n  React.useEffect(function () {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the random value for client-side rendering only.\n      // We can't use it server-side.\n      setDefaultId(\"mui-\".concat(Math.round(Math.random() * 1e5)));\n    }\n  }, [defaultId]);\n  return id;\n}","import React from \"react\";\nimport { Box, CircularProgress } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { FormattedMessage } from \"react-intl\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    listFooter: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      padding: theme.spacing(2),\n      color: theme.palette.text.secondary\n    }\n  })\n);\n\ninterface Props {\n  loading?: boolean;\n  hasNextPage?: boolean;\n}\n\nconst ListFooter: React.FC<Props> = ({\n  loading = false,\n  hasNextPage = false\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.listFooter}>\n      {loading ? (\n        <CircularProgress size={24} />\n      ) : hasNextPage ? (\n        <FormattedMessage id=\"More\" defaultMessage=\"More\" />\n      ) : (\n        <FormattedMessage id=\"End\" defaultMessage=\"End\" />\n      )}\n    </Box>\n  );\n};\n\nexport default ListFooter;\n","import React from \"react\";\nimport { IconButtonProps, IconButton, Tooltip } from \"@material-ui/core\";\n\nexport type handleToggleType = (\n  event: React.MouseEvent<HTMLButtonElement>,\n  id: string,\n  currentStatus: boolean\n) => void;\n\ninterface Props {\n  id: string;\n  status: boolean;\n  onTitle: string;\n  offTitle: string;\n  onIcon: React.ReactNode;\n  offIcon: React.ReactNode;\n\n  handleToggle: handleToggleType;\n}\n\nconst QuestionToggleButton: React.FC<Props & IconButtonProps> = ({\n  id,\n  status,\n  onTitle,\n  offTitle,\n  onIcon,\n  offIcon,\n  handleToggle,\n  ...rest\n}) => {\n  return (\n    <Tooltip title={status ? onTitle : offTitle}>\n      <span>\n        <IconButton {...rest} onClick={e => handleToggle(e, id, status)}>\n          {status ? onIcon : offIcon}\n        </IconButton>\n      </span>\n    </Tooltip>\n  );\n};\n\nexport default QuestionToggleButton;\n","import React from \"react\";\nimport { Menu, MenuItem, PopoverOrigin } from \"@material-ui/core\";\nimport { QuestionOrder } from \"../../constant\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport const getQuestionOrderLabel = (value: QuestionOrder) => {\n  switch (value) {\n    case QuestionOrder.Popular:\n      return <FormattedMessage id=\"Popular\" defaultMessage=\"Popular\" />;\n    case QuestionOrder.Recent:\n      return <FormattedMessage id=\"Recent\" defaultMessage=\"Recent\" />;\n    case QuestionOrder.Oldest:\n      return <FormattedMessage id=\"Oldest\" defaultMessage=\"Oldest\" />;\n    case QuestionOrder.Starred:\n      return <FormattedMessage id=\"Starred\" defaultMessage=\"Starred\" />;\n  }\n};\n\ninterface Props {\n  classes?: { menuItem?: string };\n  anchorOrigin?: PopoverOrigin;\n  transformOrigin?: PopoverOrigin;\n  menuElState: [\n    HTMLElement | null,\n    React.Dispatch<React.SetStateAction<HTMLElement | null>>\n  ];\n  orderSelectedState: [\n    QuestionOrder,\n    React.Dispatch<React.SetStateAction<QuestionOrder>>\n  ];\n}\n\nconst OrderSelectMenu: React.FC<Props> = ({\n  classes,\n  anchorOrigin,\n  transformOrigin,\n  menuElState,\n  orderSelectedState\n}) => {\n  const [orderSelected, setOrderSelected] = orderSelectedState;\n  const [menuEl, setMenuEl] = menuElState;\n\n  const handleMenuClose = () => {\n    setMenuEl(null);\n  };\n  const handleSortChange = (selected: QuestionOrder) => {\n    setOrderSelected(selected);\n    handleMenuClose();\n  };\n\n  return (\n    <Menu\n      keepMounted\n      anchorEl={menuEl}\n      getContentAnchorEl={null}\n      anchorOrigin={anchorOrigin}\n      transformOrigin={transformOrigin}\n      open={Boolean(menuEl)}\n      onClose={handleMenuClose}\n    >\n      {Object.values(QuestionOrder).map(item => (\n        <MenuItem\n          className={classes?.menuItem}\n          key={item}\n          selected={orderSelected === item}\n          onClick={() => handleSortChange(item)}\n        >\n          {getQuestionOrderLabel(item)}\n        </MenuItem>\n      ))}\n    </Menu>\n  );\n};\n\nexport default OrderSelectMenu;\n","import React from \"react\";\nimport { Typography, Fade } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport QuestionAnswerIcon from \"@material-ui/icons/QuestionAnswer\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useMouseMove } from \"../../../hooks\";\nimport QuestionOrderMenu from \"../../../components/QuestionOrderMenu\";\nimport { QuestionOrder } from \"../../../constant\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    sortSelect: {\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      cursor: \"pointer\",\n      color: \"inherit\",\n      marginLeft: theme.spacing(1),\n      fontSize: theme.typography.pxToRem(18),\n      \"& .arrowIcon\": {\n        color: \"inherit\",\n        fontSize: theme.typography.pxToRem(16)\n      }\n    },\n    icon: {\n      color: \"inherit\",\n      fontSize: theme.typography.pxToRem(18),\n      marginRight: theme.typography.pxToRem(4)\n    },\n    menuItem: {\n      width: theme.typography.pxToRem(180)\n    }\n  })\n);\n\ninterface Props {\n  orderSelectedState: [\n    QuestionOrder,\n    React.Dispatch<React.SetStateAction<QuestionOrder>>\n  ];\n}\n\nconst OrderSelect: React.FC<Props> = ({ orderSelectedState }) => {\n  const classes = useStyles();\n  const menuElState = React.useState<null | HTMLElement>(null);\n  const { mouseStop } = useMouseMove();\n\n  const handleSortOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    menuElState[1](event.currentTarget);\n  };\n\n  return (\n    <React.Fragment>\n      <Typography className={classes.sortSelect} onClick={handleSortOpen}>\n        <QuestionAnswerIcon className={classes.icon} />\n        <FormattedMessage id=\"Top_questions\" defaultMessage=\"Top questions\" />\n        totalCount\n        <Fade in={!mouseStop}>\n          <ArrowDropDownIcon className=\"arrowIcon\" />\n        </Fade>\n      </Typography>\n\n      <QuestionOrderMenu\n        classes={{ menuItem: classes.menuItem }}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"left\"\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"left\"\n        }}\n        menuElState={menuElState}\n        orderSelectedState={orderSelectedState}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default OrderSelect;\n","import React from \"react\";\nimport * as R from \"ramda\";\nimport {\n  Box,\n  Typography,\n  ListItem,\n  ListItemText,\n  Avatar,\n} from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { useIntl, FormattedMessage } from \"react-intl\";\nimport {\n  useUpdateQuestionReviewStatusMutation,\n  useUpdateQuestionTopMutation,\n  ReviewStatus,\n} from \"../../../generated/graphqlHooks\";\nimport ArchiveIcon from \"@material-ui/icons/Archive\";\nimport UnarchiveIcon from \"@material-ui/icons/Unarchive\";\nimport TopIcon from \"@material-ui/icons/Publish\";\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\nimport QuestionToggleButton, {\n  handleToggleType,\n} from \"../../../components/QuestionToggleButton\";\nimport { QuestionLiveQueryFieldsFragment } from \"../../../generated/hasuraHooks\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    listItem: {\n      flexWrap: \"wrap\",\n      position: \"relative\",\n      marginBottom: theme.typography.pxToRem(16),\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: `${theme.palette.background.default}70`,\n      \"&:hover .questionHover\": { opacity: 1 },\n      \"& .questionHover\": {\n        opacity: 0,\n        transition: theme.transitions.create(\"opacity\"),\n      },\n    },\n    topQuestion: {\n      backgroundColor: `${theme.palette.success[theme.palette.type]}90`,\n    },\n    itemPrimary: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    avatar: {\n      width: theme.typography.pxToRem(28),\n      height: theme.typography.pxToRem(28),\n      marginRight: theme.typography.pxToRem(12),\n    },\n    questionContent: {\n      width: \"100%\",\n      fontSize: theme.typography.pxToRem(28),\n      marginTop: theme.typography.pxToRem(12),\n      marginBottom: theme.typography.pxToRem(4),\n    },\n    questionActionBox: {\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      top: 0,\n      right: theme.typography.pxToRem(16),\n    },\n    thumbUpBox: {\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      marginLeft: theme.typography.pxToRem(16),\n    },\n    voteCount: {\n      fontSize: theme.typography.pxToRem(14),\n    },\n    thumbUpIcon: {\n      fontSize: theme.typography.pxToRem(14),\n      marginLeft: theme.typography.pxToRem(8),\n    },\n  })\n);\n\ninterface Props {\n  question: QuestionLiveQueryFieldsFragment;\n  isScrolling?: boolean;\n}\n\nconst QuestionListItem: React.FC<Props> = ({\n  question,\n  isScrolling = false,\n}) => {\n  const classes = useStyles();\n  const { formatMessage } = useIntl();\n  const [\n    updateQuestionReviewStatusMutation,\n    { loading: updateQuestionReviewStatusLoading },\n  ] = useUpdateQuestionReviewStatusMutation();\n  const [updateQuestionTopMutation, { loading: updateQuestionTopLoading }] =\n    useUpdateQuestionTopMutation();\n\n  const handleArchiveClick: handleToggleType = async (\n    e,\n    questionId,\n    currentStatus\n  ) => {\n    await updateQuestionReviewStatusMutation({\n      variables: {\n        questionId,\n        reviewStatus: currentStatus\n          ? ReviewStatus.Publish\n          : ReviewStatus.Archive,\n      },\n    });\n  };\n  const handleTopClick: handleToggleType = async (e, questionId, top) => {\n    await updateQuestionTopMutation({\n      variables: { questionId, top: !top },\n    });\n  };\n\n  return (\n    <ListItem\n      component=\"div\"\n      className={`${classes.listItem} ${\n        question.top ? classes.topQuestion : \"\"\n      }`}\n    >\n      <React.Fragment>\n        <ListItemText\n          primary={\n            <Box className={classes.itemPrimary}>\n              <Avatar\n                className={classes.avatar}\n                alt={\n                  !question.anonymous && question.author?.name\n                    ? question.author?.name\n                    : \"\"\n                }\n                src={\n                  question.anonymous || isScrolling\n                    ? \"\"\n                    : (question.author?.avatar as string)\n                }\n              />\n              <Typography component=\"span\" variant=\"body1\">\n                {!question.anonymous && question.author?.name ? (\n                  question.author?.name\n                ) : (\n                  <FormattedMessage id=\"Anonymous\" defaultMessage=\"Anonymous\" />\n                )}\n              </Typography>\n            </Box>\n          }\n          secondary={\n            <Typography className={classes.questionContent}>\n              {question.content}\n            </Typography>\n          }\n        />\n\n        <Box className={classes.questionActionBox}>\n          <QuestionToggleButton\n            className=\"questionHover\"\n            id={question.id}\n            status={question.top}\n            disabled={updateQuestionTopLoading}\n            onTitle={formatMessage({\n              id: \"Untop\",\n              defaultMessage: \"Untop\",\n            })}\n            offTitle={formatMessage({ id: \"Top\", defaultMessage: \"Top\" })}\n            onIcon={<TopIcon fontSize=\"inherit\" color=\"secondary\" />}\n            offIcon={<TopIcon fontSize=\"inherit\" color=\"inherit\" />}\n            handleToggle={handleTopClick}\n          />\n          <QuestionToggleButton\n            className=\"questionHover\"\n            id={question.id}\n            status={question.reviewStatus === ReviewStatus.Archive}\n            disabled={updateQuestionReviewStatusLoading}\n            onTitle={formatMessage({\n              id: \"Unarchive\",\n              defaultMessage: \"Unarchive\",\n            })}\n            offTitle={formatMessage({\n              id: \"Archive\",\n              defaultMessage: \"Archive\",\n            })}\n            onIcon={<UnarchiveIcon fontSize=\"inherit\" />}\n            offIcon={<ArchiveIcon fontSize=\"inherit\" />}\n            handleToggle={handleArchiveClick}\n          />\n          <Box color=\"inherit\" className={classes.thumbUpBox}>\n            <Typography color=\"inherit\" className={classes.voteCount}>\n              {question.voteUpCount}\n            </Typography>\n            <ThumbUpIcon color=\"inherit\" className={classes.thumbUpIcon} />\n          </Box>\n        </Box>\n      </React.Fragment>\n    </ListItem>\n  );\n};\n\nexport default React.memo(QuestionListItem, (prevProps, nextProps) => {\n  return R.equals(prevProps, nextProps);\n});\n","import React from \"react\";\nimport QuestionItem from \"./QuestionItem\";\nimport { Virtuoso } from \"react-virtuoso\";\nimport { getHasNextPage } from \"../../../utils\";\nimport ListFooter from \"../../../components/ListFooter\";\nimport { QuestionQueryStateType } from \"../../admin/event/questions/ActionRight\";\nimport {\n  QuestionLiveQuerySubscriptionVariables,\n  useQuestionCountLiveQuerySubscription,\n  useQuestionLiveQuerySubscription,\n  QuestionLiveQueryFieldsFragment,\n} from \"../../../generated/hasuraHooks\";\n\ninterface Props {\n  questionQueryState: [\n    QuestionQueryStateType,\n    React.Dispatch<React.SetStateAction<QuestionQueryStateType>>\n  ];\n  questionQueryInput: QuestionLiveQuerySubscriptionVariables;\n}\n\nconst QuestionList: React.FC<Props> = ({\n  questionQueryState,\n  questionQueryInput,\n}) => {\n  const [isScrolling, setIsScrolling] = React.useState(false);\n  const [questionLiveQueryData, setQuestionLiveQueryData] = React.useState<\n    Array<QuestionLiveQueryFieldsFragment>\n  >([]);\n  const [questionCountLiveQueryData, setQuestionCountLiveQueryData] =\n    React.useState(0);\n  const hasNextPage = getHasNextPage(\n    questionQueryInput.offset,\n    questionQueryInput.limit,\n    questionCountLiveQueryData\n  );\n\n  const { loading } = useQuestionLiveQuerySubscription({\n    variables: questionQueryInput,\n    onSubscriptionData: ({ client, subscriptionData }) => {\n      if (subscriptionData.data?.question) {\n        setQuestionLiveQueryData(subscriptionData.data?.question);\n      }\n    },\n  });\n  useQuestionCountLiveQuerySubscription({\n    variables: { where: questionQueryInput.where },\n    onSubscriptionData: ({ client, subscriptionData }) => {\n      setQuestionCountLiveQueryData(\n        subscriptionData.data?.question_aggregate.aggregate?.count || 0\n      );\n    },\n  });\n\n  const loadMore = () => {\n    if (hasNextPage) {\n      questionQueryState[1]({\n        ...questionQueryState[0],\n        limit: questionQueryState[0].limit * 2,\n      });\n    }\n  };\n\n  return (\n    <Virtuoso\n      style={{ height: \"100%\", width: \"100%\" }}\n      totalCount={questionLiveQueryData.length}\n      isScrolling={(scrolling) => {\n        setIsScrolling(scrolling);\n      }}\n      endReached={loadMore}\n      itemContent={(index) => {\n        return (\n          <QuestionItem\n            question={questionLiveQueryData[index]}\n            isScrolling={isScrolling}\n          />\n        );\n      }}\n      components={{\n        Footer: () => (\n          <ListFooter loading={loading} hasNextPage={hasNextPage} />\n        ),\n      }}\n    />\n  );\n};\n\nexport default QuestionList;\n","import React from \"react\";\nimport { Box, Grid, Card, Typography } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { useParams } from \"react-router-dom\";\nimport QRCode from \"qrcode.react\";\nimport { FormattedMessage } from \"react-intl\";\nimport OrderSelect from \"./OrderSelect\";\nimport { QuestionOrder, QuestionFilter } from \"../../../constant\";\nimport {\n  DEFAULT_PAGE_LIMIT,\n  DEFAULT_PAGE_OFFSET,\n} from \"askent-common/src/constant\";\nimport QuestionList from \"./QuestionList\";\nimport { QuestionQueryStateType } from \"../../admin/event/questions/ActionRight\";\nimport {\n  EventDetailLiveQueryFieldsFragment,\n  QuestionLiveQuerySubscriptionVariables,\n  useEventDetailLiveQuerySubscription,\n} from \"../../../generated/hasuraHooks\";\nimport { getQuestionOrderByCondition } from \"../../../utils\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    wallGrid: {\n      width: \"100%\",\n      height: \"100vh\",\n      padding: theme.typography.pxToRem(24),\n      color: theme.palette.text.primary,\n      background: \"radial-gradient(#3b5379 0%, #0e1935 100%)\",\n    },\n    gridItem: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      height: \"100%\",\n      padding: theme.typography.pxToRem(24),\n      position: \"relative\",\n    },\n    infoBox: {\n      textAlign: \"center\",\n      flex: 1,\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n    },\n    rightTitleBox: {\n      position: \"absolute\",\n      top: `-${theme.typography.pxToRem(6)}`,\n      left: theme.typography.pxToRem(40),\n      color: theme.palette.text.secondary,\n    },\n    listBox: { flex: 1 },\n  })\n);\n\ninterface Props {}\n\nconst EventWall: React.FC<Props> = () => {\n  const classes = useStyles();\n  const { id } = useParams<{ id: string }>();\n  const qrcodeCardRef = React.useRef<HTMLElement>(null);\n  const [qrcodeCardWidth, setQrcodeCardWidth] = React.useState(0);\n  const [eventDetailData, setEventDetailData] =\n    React.useState<EventDetailLiveQueryFieldsFragment>();\n  const orderSelectedState = React.useState<QuestionOrder>(\n    QuestionOrder.Popular\n  );\n  const questionQueryState = React.useState<QuestionQueryStateType>({\n    filter: QuestionFilter.Publish,\n    searchString: \"\",\n    limit: DEFAULT_PAGE_LIMIT,\n    offset: DEFAULT_PAGE_OFFSET,\n  });\n  const questionOrderSelectedState = React.useState(QuestionOrder.Popular);\n  const questionQueryInput: QuestionLiveQuerySubscriptionVariables = {\n    where: {\n      eventId: { _eq: id },\n      content: { _ilike: `%${questionQueryState[0].searchString}%` },\n      reviewStatus: { _eq: questionQueryState[0].filter },\n    },\n    limit: questionQueryState[0].limit,\n    offset: questionQueryState[0].offset,\n    order_by: getQuestionOrderByCondition(questionOrderSelectedState[0]),\n  };\n\n  useEventDetailLiveQuerySubscription({\n    variables: { where: { id: { _eq: id } } },\n    onSubscriptionData: ({ client, subscriptionData }) => {\n      if (subscriptionData.data?.event.length) {\n        setEventDetailData(subscriptionData.data?.event[0]);\n      }\n    },\n  });\n\n  const onResize = () => {\n    setQrcodeCardWidth(Number(qrcodeCardRef?.current?.clientWidth));\n  };\n  React.useEffect(() => {\n    onResize();\n    window.addEventListener(\"resize\", onResize);\n\n    return () => window.removeEventListener(\"resize\", onResize);\n  });\n\n  return (\n    <Grid container className={classes.wallGrid}>\n      <Grid item xs={3} className={classes.gridItem}>\n        <Card ref={qrcodeCardRef} style={{ height: qrcodeCardWidth }}>\n          <QRCode\n            size={qrcodeCardWidth}\n            includeMargin={true}\n            value={`${window.location.origin}/event/${id}`}\n          />\n        </Card>\n        <Box className={classes.infoBox}>\n          <Typography variant=\"h4\" color=\"textPrimary\">\n            <FormattedMessage id=\"Join_at\" defaultMessage=\"Join at\" />\n          </Typography>\n          <Typography variant=\"h3\" color=\"textPrimary\">\n            Askent\n          </Typography>\n          <Typography variant=\"h4\" color=\"textPrimary\">\n            # {eventDetailData?.code}\n          </Typography>\n        </Box>\n      </Grid>\n      <Grid item xs={9} className={classes.gridItem}>\n        <Box className={classes.rightTitleBox}>\n          <OrderSelect orderSelectedState={orderSelectedState} />\n        </Box>\n        <Box className={classes.listBox}>\n          <QuestionList\n            questionQueryState={questionQueryState}\n            questionQueryInput={questionQueryInput}\n          />\n        </Box>\n        {0 ? (\n          <Typography variant=\"h6\" color=\"inherit\">\n            <FormattedMessage\n              id=\"Latest_question\"\n              defaultMessage=\"Latest question\"\n            />\n          </Typography>\n        ) : null}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default EventWall;\n"],"sourceRoot":""}