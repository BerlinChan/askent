{"version":3,"sources":["components/QuestionToggleButton/index.tsx","components/QuestionOrderMenu/index.tsx","routes/event/wall/OrderSelect.tsx","routes/event/wall/QuestionItem.tsx","routes/event/wall/QuestionList.tsx","routes/event/wall/index.tsx"],"names":["QuestionToggleButton","id","status","onTitle","offTitle","onIcon","offIcon","handleToggle","rest","title","onClick","e","getQuestionOrderLabel","value","QuestionOrder","Popular","defaultMessage","Recent","Oldest","Starred","OrderSelectMenu","classes","anchorOrigin","transformOrigin","menuElState","orderSelectedState","orderSelected","setOrderSelected","menuEl","setMenuEl","handleMenuClose","keepMounted","anchorEl","getContentAnchorEl","open","Boolean","onClose","Object","values","map","item","className","menuItem","selected","useStyles","makeStyles","theme","createStyles","sortSelect","display","alignItems","cursor","color","marginLeft","spacing","fontSize","typography","pxToRem","icon","marginRight","width","OrderSelect","React","useState","mouseStop","useMouseMove","Fragment","Typography","event","currentTarget","Fade","in","QuestionOrderMenu","vertical","horizontal","listItem","flexWrap","position","marginBottom","borderRadius","shape","backgroundColor","palette","background","default","opacity","transition","transitions","create","topQuestion","success","type","itemPrimary","avatar","height","questionContent","marginTop","questionActionBox","top","right","thumbUpBox","voteCount","thumbUpIcon","QuestionListItem","question","isScrolling","formatMessage","useIntl","useUpdateQuestionReviewStatusMutation","updateQuestionReviewStatusMutation","updateQuestionReviewStatusLoading","loading","useUpdateQuestionTopMutation","updateQuestionTopMutation","updateQuestionTopLoading","handleArchiveClick","questionId","currentStatus","a","variables","reviewStatus","ReviewStatus","Publish","Archive","handleTopClick","ListItem","component","ListItemText","primary","Box","Avatar","alt","anonymous","author","name","src","variant","secondary","content","disabled","voteUpCount","memo","prevProps","nextProps","R","QuestionList","questionQueryState","questionQueryInput","setIsScrolling","questionLiveQueryData","setQuestionLiveQueryData","questionCountLiveQueryData","setQuestionCountLiveQueryData","hasNextPage","getHasNextPage","offset","limit","useQuestionLiveQuerySubscription","onSubscriptionData","client","subscriptionData","data","useQuestionCountLiveQuerySubscription","where","question_aggregate","aggregate","count","style","totalCount","length","scrolling","endReached","itemContent","index","QuestionItem","components","Footer","ListFooter","wallGrid","padding","text","gridItem","flexDirection","infoBox","textAlign","flex","justifyContent","rightTitleBox","left","listBox","EventWall","useParams","qrcodeCardRef","useRef","qrcodeCardWidth","setQrcodeCardWidth","eventDetailData","setEventDetailData","filter","QuestionFilter","searchString","DEFAULT_PAGE_LIMIT","DEFAULT_PAGE_OFFSET","questionOrderSelectedState","eventId","_eq","_ilike","order_by","getQuestionOrderByCondition","useEventDetailLiveQuerySubscription","onResize","Number","current","clientWidth","useEffect","window","addEventListener","removeEventListener","Grid","container","xs","Card","ref","size","includeMargin","location","origin","code"],"mappings":"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","file":"static/js/26.f463c4fa.chunk.js","sourcesContent":["import React from \"react\";\nimport { IconButtonProps, IconButton, Tooltip } from \"@material-ui/core\";\n\nexport type handleToggleType = (\n  event: React.MouseEvent<HTMLButtonElement>,\n  id: string,\n  currentStatus: boolean\n) => void;\n\ninterface Props {\n  id: string;\n  status: boolean;\n  onTitle: string;\n  offTitle: string;\n  onIcon: React.ReactNode;\n  offIcon: React.ReactNode;\n\n  handleToggle: handleToggleType;\n}\n\nconst QuestionToggleButton: React.FC<Props & IconButtonProps> = ({\n  id,\n  status,\n  onTitle,\n  offTitle,\n  onIcon,\n  offIcon,\n  handleToggle,\n  ...rest\n}) => {\n  return (\n    <Tooltip title={status ? onTitle : offTitle}>\n      <span>\n        <IconButton {...rest} onClick={e => handleToggle(e, id, status)}>\n          {status ? onIcon : offIcon}\n        </IconButton>\n      </span>\n    </Tooltip>\n  );\n};\n\nexport default QuestionToggleButton;\n","import React from \"react\";\nimport { Menu, MenuItem, PopoverOrigin } from \"@material-ui/core\";\nimport { QuestionOrder } from \"../../constant\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport const getQuestionOrderLabel = (value: QuestionOrder) => {\n  switch (value) {\n    case QuestionOrder.Popular:\n      return <FormattedMessage id=\"Popular\" defaultMessage=\"Popular\" />;\n    case QuestionOrder.Recent:\n      return <FormattedMessage id=\"Recent\" defaultMessage=\"Recent\" />;\n    case QuestionOrder.Oldest:\n      return <FormattedMessage id=\"Oldest\" defaultMessage=\"Oldest\" />;\n    case QuestionOrder.Starred:\n      return <FormattedMessage id=\"Starred\" defaultMessage=\"Starred\" />;\n  }\n};\n\ninterface Props {\n  classes?: { menuItem?: string };\n  anchorOrigin?: PopoverOrigin;\n  transformOrigin?: PopoverOrigin;\n  menuElState: [\n    HTMLElement | null,\n    React.Dispatch<React.SetStateAction<HTMLElement | null>>\n  ];\n  orderSelectedState: [\n    QuestionOrder,\n    React.Dispatch<React.SetStateAction<QuestionOrder>>\n  ];\n}\n\nconst OrderSelectMenu: React.FC<Props> = ({\n  classes,\n  anchorOrigin,\n  transformOrigin,\n  menuElState,\n  orderSelectedState\n}) => {\n  const [orderSelected, setOrderSelected] = orderSelectedState;\n  const [menuEl, setMenuEl] = menuElState;\n\n  const handleMenuClose = () => {\n    setMenuEl(null);\n  };\n  const handleSortChange = (selected: QuestionOrder) => {\n    setOrderSelected(selected);\n    handleMenuClose();\n  };\n\n  return (\n    <Menu\n      keepMounted\n      anchorEl={menuEl}\n      getContentAnchorEl={null}\n      anchorOrigin={anchorOrigin}\n      transformOrigin={transformOrigin}\n      open={Boolean(menuEl)}\n      onClose={handleMenuClose}\n    >\n      {Object.values(QuestionOrder).map(item => (\n        <MenuItem\n          className={classes?.menuItem}\n          key={item}\n          selected={orderSelected === item}\n          onClick={() => handleSortChange(item)}\n        >\n          {getQuestionOrderLabel(item)}\n        </MenuItem>\n      ))}\n    </Menu>\n  );\n};\n\nexport default OrderSelectMenu;\n","import React from \"react\";\nimport { Typography, Fade } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport QuestionAnswerIcon from \"@material-ui/icons/QuestionAnswer\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useMouseMove } from \"../../../hooks\";\nimport QuestionOrderMenu from \"../../../components/QuestionOrderMenu\";\nimport { QuestionOrder } from \"../../../constant\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    sortSelect: {\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      cursor: \"pointer\",\n      color: \"inherit\",\n      marginLeft: theme.spacing(1),\n      fontSize: theme.typography.pxToRem(18),\n      \"& .arrowIcon\": {\n        color: \"inherit\",\n        fontSize: theme.typography.pxToRem(16)\n      }\n    },\n    icon: {\n      color: \"inherit\",\n      fontSize: theme.typography.pxToRem(18),\n      marginRight: theme.typography.pxToRem(4)\n    },\n    menuItem: {\n      width: theme.typography.pxToRem(180)\n    }\n  })\n);\n\ninterface Props {\n  orderSelectedState: [\n    QuestionOrder,\n    React.Dispatch<React.SetStateAction<QuestionOrder>>\n  ];\n}\n\nconst OrderSelect: React.FC<Props> = ({ orderSelectedState }) => {\n  const classes = useStyles();\n  const menuElState = React.useState<null | HTMLElement>(null);\n  const { mouseStop } = useMouseMove();\n\n  const handleSortOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    menuElState[1](event.currentTarget);\n  };\n\n  return (\n    <React.Fragment>\n      <Typography className={classes.sortSelect} onClick={handleSortOpen}>\n        <QuestionAnswerIcon className={classes.icon} />\n        <FormattedMessage id=\"Top_questions\" defaultMessage=\"Top questions\" />\n        totalCount\n        <Fade in={!mouseStop}>\n          <ArrowDropDownIcon className=\"arrowIcon\" />\n        </Fade>\n      </Typography>\n\n      <QuestionOrderMenu\n        classes={{ menuItem: classes.menuItem }}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"left\"\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"left\"\n        }}\n        menuElState={menuElState}\n        orderSelectedState={orderSelectedState}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default OrderSelect;\n","import React from \"react\";\nimport * as R from \"ramda\";\nimport {\n  Box,\n  Typography,\n  ListItem,\n  ListItemText,\n  Avatar,\n} from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { useIntl, FormattedMessage } from \"react-intl\";\nimport {\n  useUpdateQuestionReviewStatusMutation,\n  useUpdateQuestionTopMutation,\n  ReviewStatus,\n} from \"../../../generated/graphqlHooks\";\nimport ArchiveIcon from \"@material-ui/icons/Archive\";\nimport UnarchiveIcon from \"@material-ui/icons/Unarchive\";\nimport TopIcon from \"@material-ui/icons/Publish\";\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\nimport QuestionToggleButton, {\n  handleToggleType,\n} from \"../../../components/QuestionToggleButton\";\nimport { QuestionLiveQueryFieldsFragment } from \"../../../generated/hasuraHooks\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    listItem: {\n      flexWrap: \"wrap\",\n      position: \"relative\",\n      marginBottom: theme.typography.pxToRem(16),\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: `${theme.palette.background.default}70`,\n      \"&:hover .questionHover\": { opacity: 1 },\n      \"& .questionHover\": {\n        opacity: 0,\n        transition: theme.transitions.create(\"opacity\"),\n      },\n    },\n    topQuestion: {\n      backgroundColor: `${theme.palette.success[theme.palette.type]}90`,\n    },\n    itemPrimary: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    avatar: {\n      width: theme.typography.pxToRem(28),\n      height: theme.typography.pxToRem(28),\n      marginRight: theme.typography.pxToRem(12),\n    },\n    questionContent: {\n      width: \"100%\",\n      fontSize: theme.typography.pxToRem(28),\n      marginTop: theme.typography.pxToRem(12),\n      marginBottom: theme.typography.pxToRem(4),\n    },\n    questionActionBox: {\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      top: 0,\n      right: theme.typography.pxToRem(16),\n    },\n    thumbUpBox: {\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      marginLeft: theme.typography.pxToRem(16),\n    },\n    voteCount: {\n      fontSize: theme.typography.pxToRem(14),\n    },\n    thumbUpIcon: {\n      fontSize: theme.typography.pxToRem(14),\n      marginLeft: theme.typography.pxToRem(8),\n    },\n  })\n);\n\ninterface Props {\n  question: QuestionLiveQueryFieldsFragment;\n  isScrolling?: boolean;\n}\n\nconst QuestionListItem: React.FC<Props> = ({\n  question,\n  isScrolling = false,\n}) => {\n  const classes = useStyles();\n  const { formatMessage } = useIntl();\n  const [\n    updateQuestionReviewStatusMutation,\n    { loading: updateQuestionReviewStatusLoading },\n  ] = useUpdateQuestionReviewStatusMutation();\n  const [updateQuestionTopMutation, { loading: updateQuestionTopLoading }] =\n    useUpdateQuestionTopMutation();\n\n  const handleArchiveClick: handleToggleType = async (\n    e,\n    questionId,\n    currentStatus\n  ) => {\n    await updateQuestionReviewStatusMutation({\n      variables: {\n        questionId,\n        reviewStatus: currentStatus\n          ? ReviewStatus.Publish\n          : ReviewStatus.Archive,\n      },\n    });\n  };\n  const handleTopClick: handleToggleType = async (e, questionId, top) => {\n    await updateQuestionTopMutation({\n      variables: { questionId, top: !top },\n    });\n  };\n\n  return (\n    <ListItem\n      component=\"div\"\n      className={`${classes.listItem} ${\n        question.top ? classes.topQuestion : \"\"\n      }`}\n    >\n      <React.Fragment>\n        <ListItemText\n          primary={\n            <Box className={classes.itemPrimary}>\n              <Avatar\n                className={classes.avatar}\n                alt={\n                  !question.anonymous && question.author?.name\n                    ? question.author?.name\n                    : \"\"\n                }\n                src={\n                  question.anonymous || isScrolling\n                    ? \"\"\n                    : (question.author?.avatar as string)\n                }\n              />\n              <Typography component=\"span\" variant=\"body1\">\n                {!question.anonymous && question.author?.name ? (\n                  question.author?.name\n                ) : (\n                  <FormattedMessage id=\"Anonymous\" defaultMessage=\"Anonymous\" />\n                )}\n              </Typography>\n            </Box>\n          }\n          secondary={\n            <Typography className={classes.questionContent}>\n              {question.content}\n            </Typography>\n          }\n        />\n\n        <Box className={classes.questionActionBox}>\n          <QuestionToggleButton\n            className=\"questionHover\"\n            id={question.id}\n            status={question.top}\n            disabled={updateQuestionTopLoading}\n            onTitle={formatMessage({\n              id: \"Untop\",\n              defaultMessage: \"Untop\",\n            })}\n            offTitle={formatMessage({ id: \"Top\", defaultMessage: \"Top\" })}\n            onIcon={<TopIcon fontSize=\"inherit\" color=\"secondary\" />}\n            offIcon={<TopIcon fontSize=\"inherit\" color=\"inherit\" />}\n            handleToggle={handleTopClick}\n          />\n          <QuestionToggleButton\n            className=\"questionHover\"\n            id={question.id}\n            status={question.reviewStatus === ReviewStatus.Archive}\n            disabled={updateQuestionReviewStatusLoading}\n            onTitle={formatMessage({\n              id: \"Unarchive\",\n              defaultMessage: \"Unarchive\",\n            })}\n            offTitle={formatMessage({\n              id: \"Archive\",\n              defaultMessage: \"Archive\",\n            })}\n            onIcon={<UnarchiveIcon fontSize=\"inherit\" />}\n            offIcon={<ArchiveIcon fontSize=\"inherit\" />}\n            handleToggle={handleArchiveClick}\n          />\n          <Box color=\"inherit\" className={classes.thumbUpBox}>\n            <Typography color=\"inherit\" className={classes.voteCount}>\n              {question.voteUpCount}\n            </Typography>\n            <ThumbUpIcon color=\"inherit\" className={classes.thumbUpIcon} />\n          </Box>\n        </Box>\n      </React.Fragment>\n    </ListItem>\n  );\n};\n\nexport default React.memo(QuestionListItem, (prevProps, nextProps) => {\n  return R.equals(prevProps, nextProps);\n});\n","import React from \"react\";\nimport QuestionItem from \"./QuestionItem\";\nimport { Virtuoso } from \"react-virtuoso\";\nimport { getHasNextPage } from \"../../../utils\";\nimport ListFooter from \"../../../components/ListFooter\";\nimport { QuestionQueryStateType } from \"../../admin/event/questions/ActionRight\";\nimport {\n  QuestionLiveQuerySubscriptionVariables,\n  useQuestionCountLiveQuerySubscription,\n  useQuestionLiveQuerySubscription,\n  QuestionLiveQueryFieldsFragment,\n} from \"../../../generated/hasuraHooks\";\n\ninterface Props {\n  questionQueryState: [\n    QuestionQueryStateType,\n    React.Dispatch<React.SetStateAction<QuestionQueryStateType>>\n  ];\n  questionQueryInput: QuestionLiveQuerySubscriptionVariables;\n}\n\nconst QuestionList: React.FC<Props> = ({\n  questionQueryState,\n  questionQueryInput,\n}) => {\n  const [isScrolling, setIsScrolling] = React.useState(false);\n  const [questionLiveQueryData, setQuestionLiveQueryData] = React.useState<\n    Array<QuestionLiveQueryFieldsFragment>\n  >([]);\n  const [questionCountLiveQueryData, setQuestionCountLiveQueryData] =\n    React.useState(0);\n  const hasNextPage = getHasNextPage(\n    questionQueryInput.offset,\n    questionQueryInput.limit,\n    questionCountLiveQueryData\n  );\n\n  const { loading } = useQuestionLiveQuerySubscription({\n    variables: questionQueryInput,\n    onSubscriptionData: ({ client, subscriptionData }) => {\n      if (subscriptionData.data?.question) {\n        setQuestionLiveQueryData(subscriptionData.data?.question);\n      }\n    },\n  });\n  useQuestionCountLiveQuerySubscription({\n    variables: { where: questionQueryInput.where },\n    onSubscriptionData: ({ client, subscriptionData }) => {\n      setQuestionCountLiveQueryData(\n        subscriptionData.data?.question_aggregate.aggregate?.count || 0\n      );\n    },\n  });\n\n  const loadMore = () => {\n    if (hasNextPage) {\n      questionQueryState[1]({\n        ...questionQueryState[0],\n        limit: questionQueryState[0].limit * 2,\n      });\n    }\n  };\n\n  return (\n    <Virtuoso\n      style={{ height: \"100%\", width: \"100%\" }}\n      totalCount={questionLiveQueryData.length}\n      isScrolling={(scrolling) => {\n        setIsScrolling(scrolling);\n      }}\n      endReached={loadMore}\n      itemContent={(index) => {\n        return (\n          <QuestionItem\n            question={questionLiveQueryData[index]}\n            isScrolling={isScrolling}\n          />\n        );\n      }}\n      components={{\n        Footer: () => (\n          <ListFooter loading={loading} hasNextPage={hasNextPage} />\n        ),\n      }}\n    />\n  );\n};\n\nexport default QuestionList;\n","import React from \"react\";\nimport { Box, Grid, Card, Typography } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { useParams } from \"react-router-dom\";\nimport QRCode from \"qrcode.react\";\nimport { FormattedMessage } from \"react-intl\";\nimport OrderSelect from \"./OrderSelect\";\nimport { QuestionOrder, QuestionFilter } from \"../../../constant\";\nimport {\n  DEFAULT_PAGE_LIMIT,\n  DEFAULT_PAGE_OFFSET,\n} from \"askent-common/src/constant\";\nimport QuestionList from \"./QuestionList\";\nimport { QuestionQueryStateType } from \"../../admin/event/questions/ActionRight\";\nimport {\n  EventDetailLiveQueryFieldsFragment,\n  QuestionLiveQuerySubscriptionVariables,\n  useEventDetailLiveQuerySubscription,\n} from \"../../../generated/hasuraHooks\";\nimport { getQuestionOrderByCondition } from \"../../../utils\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    wallGrid: {\n      width: \"100%\",\n      height: \"100vh\",\n      padding: theme.typography.pxToRem(24),\n      color: theme.palette.text.primary,\n      background: \"radial-gradient(#3b5379 0%, #0e1935 100%)\",\n    },\n    gridItem: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      height: \"100%\",\n      padding: theme.typography.pxToRem(24),\n      position: \"relative\",\n    },\n    infoBox: {\n      textAlign: \"center\",\n      flex: 1,\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n    },\n    rightTitleBox: {\n      position: \"absolute\",\n      top: `-${theme.typography.pxToRem(6)}`,\n      left: theme.typography.pxToRem(40),\n      color: theme.palette.text.secondary,\n    },\n    listBox: { flex: 1 },\n  })\n);\n\ninterface Props {}\n\nconst EventWall: React.FC<Props> = () => {\n  const classes = useStyles();\n  const { id } = useParams<{ id: string }>();\n  const qrcodeCardRef = React.useRef<HTMLElement>(null);\n  const [qrcodeCardWidth, setQrcodeCardWidth] = React.useState(0);\n  const [eventDetailData, setEventDetailData] =\n    React.useState<EventDetailLiveQueryFieldsFragment>();\n  const orderSelectedState = React.useState<QuestionOrder>(\n    QuestionOrder.Popular\n  );\n  const questionQueryState = React.useState<QuestionQueryStateType>({\n    filter: QuestionFilter.Publish,\n    searchString: \"\",\n    limit: DEFAULT_PAGE_LIMIT,\n    offset: DEFAULT_PAGE_OFFSET,\n  });\n  const questionOrderSelectedState = React.useState(QuestionOrder.Popular);\n  const questionQueryInput: QuestionLiveQuerySubscriptionVariables = {\n    where: {\n      eventId: { _eq: id },\n      content: { _ilike: `%${questionQueryState[0].searchString}%` },\n      reviewStatus: { _eq: questionQueryState[0].filter },\n    },\n    limit: questionQueryState[0].limit,\n    offset: questionQueryState[0].offset,\n    order_by: getQuestionOrderByCondition(questionOrderSelectedState[0]),\n  };\n\n  useEventDetailLiveQuerySubscription({\n    variables: { where: { id: { _eq: id } } },\n    onSubscriptionData: ({ client, subscriptionData }) => {\n      if (subscriptionData.data?.event.length) {\n        setEventDetailData(subscriptionData.data?.event[0]);\n      }\n    },\n  });\n\n  const onResize = () => {\n    setQrcodeCardWidth(Number(qrcodeCardRef?.current?.clientWidth));\n  };\n  React.useEffect(() => {\n    onResize();\n    window.addEventListener(\"resize\", onResize);\n\n    return () => window.removeEventListener(\"resize\", onResize);\n  });\n\n  return (\n    <Grid container className={classes.wallGrid}>\n      <Grid item xs={3} className={classes.gridItem}>\n        <Card ref={qrcodeCardRef} style={{ height: qrcodeCardWidth }}>\n          <QRCode\n            size={qrcodeCardWidth}\n            includeMargin={true}\n            value={`${window.location.origin}/event/${id}`}\n          />\n        </Card>\n        <Box className={classes.infoBox}>\n          <Typography variant=\"h4\" color=\"textPrimary\">\n            <FormattedMessage id=\"Join_at\" defaultMessage=\"Join at\" />\n          </Typography>\n          <Typography variant=\"h3\" color=\"textPrimary\">\n            Askent\n          </Typography>\n          <Typography variant=\"h4\" color=\"textPrimary\">\n            # {eventDetailData?.code}\n          </Typography>\n        </Box>\n      </Grid>\n      <Grid item xs={9} className={classes.gridItem}>\n        <Box className={classes.rightTitleBox}>\n          <OrderSelect orderSelectedState={orderSelectedState} />\n        </Box>\n        <Box className={classes.listBox}>\n          <QuestionList\n            questionQueryState={questionQueryState}\n            questionQueryInput={questionQueryInput}\n          />\n        </Box>\n        {0 ? (\n          <Typography variant=\"h6\" color=\"inherit\">\n            <FormattedMessage\n              id=\"Latest_question\"\n              defaultMessage=\"Latest question\"\n            />\n          </Typography>\n        ) : null}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default EventWall;\n"],"sourceRoot":""}