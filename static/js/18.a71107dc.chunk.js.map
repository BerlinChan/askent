{"version":3,"sources":["generated/graphqlHooks.tsx","components/Form/ButtonLoading.tsx","components/Form/FInputWithLabel.tsx","../../../../src/react/parser/index.ts","../../../../src/react/data/OperationData.ts","../../../../src/react/data/QueryData.ts","../../../../../src/react/hooks/utils/useBaseQuery.ts","../../../../../src/react/hooks/utils/useDeepMemo.ts","../../../../../src/react/hooks/utils/useAfterFastRefresh.ts","../../../../src/react/hooks/useQuery.ts","../../../../src/react/hooks/useLazyQuery.ts","../../../../src/react/data/MutationData.ts","../../../../src/react/hooks/useMutation.ts","../../../node_modules/@material-ui/core/esm/Card/Card.js","../../../node_modules/@material-ui/core/esm/CardContent/CardContent.js","../../../node_modules/@material-ui/core/esm/CardActions/CardActions.js","routes/signup/index.tsx"],"names":["EventDateStatus","EventOwnerFilter","ReviewStatus","RoleName","defaultOptions","QuestionFieldsFragmentDoc","gql","ReplyFieldsFragmentDoc","EventFieldsFragmentDoc","EventDetailFieldsFragmentDoc","QuestionAudienceFieldsFragmentDoc","UserInfoFragmentDoc","GuestesByEventDocument","useGuestesByEventQuery","baseOptions","options","Apollo","AddGuestDocument","useAddGuestMutation","RemoveGuestDocument","useRemoveGuestMutation","DeleteQuestionDocument","useDeleteQuestionMutation","DeleteAllReviewQuestionsDocument","useDeleteAllReviewQuestionsMutation","PublishAllReviewQuestionsDocument","usePublishAllReviewQuestionsMutation","UpdateQuestionReviewStatusDocument","useUpdateQuestionReviewStatusMutation","UpdateQuestionStarDocument","useUpdateQuestionStarMutation","UpdateQuestionTopDocument","useUpdateQuestionTopMutation","UpdateQuestionContentDocument","useUpdateQuestionContentMutation","CreateReplyDocument","useCreateReplyMutation","UpdateReplyContentDocument","useUpdateReplyContentMutation","UpdateReplyReviewStatusDocument","useUpdateReplyReviewStatusMutation","DeleteReplyDocument","useDeleteReplyMutation","EventsByMeDocument","useEventsByMeQuery","EventByIdDocument","useEventByIdLazyQuery","CheckEventCodeExistDocument","useCheckEventCodeExistQuery","useCheckEventCodeExistLazyQuery","CreateEventDocument","useCreateEventMutation","UpdateEventDocument","useUpdateEventMutation","DeleteEventDocument","useDeleteEventMutation","PackageInfoDocument","usePackageInfoMutation","EventForLoginDocument","useEventForLoginQuery","CreateQuestionDocument","useCreateQuestionMutation","VoteUpQuestionDocument","useVoteUpQuestionMutation","LoginAudienceDocument","useLoginAudienceMutation","IsEventAudienceDocument","useIsEventAudienceLazyQuery","JoinEventDocument","useJoinEventMutation","EventCodeOptionsDocument","useEventCodeOptionsLazyQuery","MeDocument","useMeQuery","useMeLazyQuery","UpdateUserDocument","useUpdateUserMutation","LoginDocument","useLoginMutation","SignupDocument","useSignupMutation","CheckEmailExistDocument","useCheckEmailExistLazyQuery","useStyles","makeStyles","theme","createStyles","buttonWrapper","position","width","buttonProgress","top","left","marginTop","marginLeft","ButtonLoading","children","loading","fullWidth","props","classes","className","Button","disabled","CircularProgress","size","FInputWithLabel","InputLabelProps","InputProps","label","useField","field","Fragment","InputLabel","Input","DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","parser","document","variables","cached","get","fragments","definitions","filter","x","kind","queries","operation","mutations","subscriptions","length","definition","context","isMounted","previousOptions","this","getOptions","setOptions","newOptions","storePrevious","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","requiredOperationName","usedOperationName","onNewData","runLazy","previous","Object","create","runLazyQuery","lazyOptions","obsRefetch","currentObservable","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","query","removeQuerySubscription","removeObservable","updateObservableQuery","getExecuteSsrResult","getExecuteResult","executeLazy","networkStatus","ready","called","data","undefined","fetchData","ssr","Promise","resolve","startQuerySubscription","afterExecute","lazy","ssrInitiated","handleErrorOrCompleted","bind","result","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","displayName","fetchPolicy","initializeObservableQuery","getSSRObservable","observableQueryOptions","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","currentSubscription","subscribe","next","previousResult","error","resubscribeToQuery","hasOwnProperty","last","resetLastResults","currentResult","getCurrentResult","partial","errors","graphQLErrors","assign","getLastResult","keys","previousData","resetQueryStoreErrors","onCompleted","onError","unsubscribe","andDelete","useBaseQuery","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","then","memoFn","key","ref","value","useDeepMemo","queryResult","__DEV__","useAfterFastRefresh","effectFn","useQuery","useLazyQuery","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","onMutationError","mutation","mostRecentMutationId","ignoreResults","updateResult","isMostRecentMutation","OperationData","useMutation","mutationDataRef","mutationData","Card","React","_props$raised","raised","other","_objectWithoutProperties","Paper","_extends","clsx","root","elevation","withStyles","overflow","CardContent","_props$component","component","Component","padding","paddingBottom","CardActions","_props$disableSpacing","disableSpacing","spacing","display","alignItems","signupBox","height","flexDirection","justifyContent","card","Signup","history","useHistory","enqueueSnackbar","useSnackbar","formatMessage","useIntl","signupMutation","checkEmailExistLazyQuery","checkEmailData","checkEmailLoading","token","useToken","useEffect","replace","maxWidth","variant","align","gutterBottom","id","defaultMessage","initialValues","email","password","repeatPassword","validate","a","Yup","max","USER_NAME_MAX_LENGTH","required","USER_EMAIL_MAX_LENGTH","USER_PASSWORD_MAX_LENGTH","path","console","checkEmailExist","onSubmit","values","TextField","autoFocus","margin","color"],"mappings":"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","file":"static/js/18.a71107dc.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type AuthPayload = {\n  __typename?: 'AuthPayload';\n  token: Scalars['String'];\n  user: User;\n};\n\nexport type CreateQuestionInput = {\n  eventId: Scalars['ID'];\n  content: Scalars['String'];\n  anonymous?: Maybe<Scalars['Boolean']>;\n};\n\nexport type CreateReplyInput = {\n  questionId: Scalars['ID'];\n  content: Scalars['String'];\n  anonymous: Scalars['Boolean'];\n};\n\n\nexport type Event = {\n  __typename?: 'Event';\n  id: Scalars['ID'];\n  code: Scalars['String'];\n  name: Scalars['String'];\n  startAt: Scalars['DateTime'];\n  endAt: Scalars['DateTime'];\n  moderation: Scalars['Boolean'];\n  dateStatus: EventDateStatus;\n  owner: User;\n  guestes: Array<User>;\n  audiences: Array<User>;\n  questions: Array<Question>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport enum EventDateStatus {\n  Active = 'Active',\n  Upcoming = 'Upcoming',\n  Past = 'Past'\n}\n\nexport enum EventOwnerFilter {\n  Owner = 'Owner',\n  Guest = 'Guest'\n}\n\nexport type EventPaged = IPagedType & {\n  __typename?: 'EventPaged';\n  offset: Scalars['Int'];\n  limit: Scalars['Int'];\n  totalCount: Scalars['Int'];\n  hasNextPage: Scalars['Boolean'];\n  list: Array<Event>;\n};\n\nexport type IPagedType = {\n  offset: Scalars['Int'];\n  limit: Scalars['Int'];\n  totalCount: Scalars['Int'];\n  hasNextPage: Scalars['Boolean'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  /** Add a user as guest administrator, who can cooperating manage the event. */\n  addGuest: User;\n  createEvent: Event;\n  /** Create question */\n  createQuestion: Question;\n  createReply: Reply;\n  createRole: Role;\n  /** Delete all Review questions by event. */\n  deleteAllReviewQuestions: Scalars['Int'];\n  deleteEvent: Event;\n  /** Delete a question by id. */\n  deleteQuestion: Question;\n  /** Delete a reply by id. */\n  deleteReply: Reply;\n  /** 加入活动。 */\n  joinEvent: Scalars['ID'];\n  login: AuthPayload;\n  /**\n   * Audience 登陆。\n   *   若 fingerprint 的 User 已存在则返回 token，\n   *   若 fingerprint 的 User 不存在则 create 并返回 token\n   */\n  loginAudience: AuthPayload;\n  packageInfo: PackageInfo;\n  /** Publish all Review questions by event. */\n  publishAllReviewQuestions: Scalars['Int'];\n  removeGuest: Scalars['ID'];\n  seedEvent: Scalars['Int'];\n  seedQuestion: Scalars['Int'];\n  seedReply: Scalars['Int'];\n  seedRole: Scalars['Int'];\n  /** Signup a new user. */\n  signup: AuthPayload;\n  updateEvent: Event;\n  /** Update a question content. */\n  updateQuestionContent: Question;\n  /** Update a question review status. */\n  updateQuestionReviewStatus: Question;\n  /** Update a question star. */\n  updateQuestionStar: Question;\n  /** Top a question. Can only top one question at a time. */\n  updateQuestionTop: Question;\n  /** Update a reply's content. */\n  updateReplyContent: Reply;\n  /** Update a reply's review status. */\n  updateReplyReviewStatus: Reply;\n  updateUser: User;\n  /** Vote a question. */\n  voteUpQuestion: Question;\n};\n\n\nexport type MutationAddGuestArgs = {\n  email: Scalars['String'];\n  eventId: Scalars['ID'];\n};\n\n\nexport type MutationCreateEventArgs = {\n  code: Scalars['String'];\n  name: Scalars['String'];\n  startAt: Scalars['DateTime'];\n  endAt: Scalars['DateTime'];\n};\n\n\nexport type MutationCreateQuestionArgs = {\n  input: CreateQuestionInput;\n};\n\n\nexport type MutationCreateReplyArgs = {\n  input: CreateReplyInput;\n};\n\n\nexport type MutationCreateRoleArgs = {\n  name: RoleName;\n};\n\n\nexport type MutationDeleteAllReviewQuestionsArgs = {\n  eventId: Scalars['ID'];\n};\n\n\nexport type MutationDeleteEventArgs = {\n  eventId: Scalars['ID'];\n};\n\n\nexport type MutationDeleteQuestionArgs = {\n  questionId: Scalars['ID'];\n};\n\n\nexport type MutationDeleteReplyArgs = {\n  replyId: Scalars['ID'];\n};\n\n\nexport type MutationJoinEventArgs = {\n  eventId: Scalars['ID'];\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationLoginAudienceArgs = {\n  fingerprint: Scalars['String'];\n};\n\n\nexport type MutationPackageInfoArgs = {\n  version?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationPublishAllReviewQuestionsArgs = {\n  eventId: Scalars['ID'];\n};\n\n\nexport type MutationRemoveGuestArgs = {\n  guestId: Scalars['ID'];\n  eventId: Scalars['ID'];\n};\n\n\nexport type MutationSeedQuestionArgs = {\n  eventId: Scalars['String'];\n};\n\n\nexport type MutationSeedReplyArgs = {\n  anonymous?: Maybe<Scalars['Boolean']>;\n  questionId: Scalars['String'];\n};\n\n\nexport type MutationSignupArgs = {\n  name: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationUpdateEventArgs = {\n  input: UpdateEventInput;\n};\n\n\nexport type MutationUpdateQuestionContentArgs = {\n  questionId: Scalars['ID'];\n  content: Scalars['String'];\n};\n\n\nexport type MutationUpdateQuestionReviewStatusArgs = {\n  reviewStatus: ReviewStatus;\n  questionId: Scalars['ID'];\n};\n\n\nexport type MutationUpdateQuestionStarArgs = {\n  star: Scalars['Boolean'];\n  questionId: Scalars['ID'];\n};\n\n\nexport type MutationUpdateQuestionTopArgs = {\n  top: Scalars['Boolean'];\n  questionId: Scalars['ID'];\n};\n\n\nexport type MutationUpdateReplyContentArgs = {\n  content: Scalars['String'];\n  replyId: Scalars['ID'];\n};\n\n\nexport type MutationUpdateReplyReviewStatusArgs = {\n  reviewStatus: ReviewStatus;\n  replyId: Scalars['ID'];\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationVoteUpQuestionArgs = {\n  questionId: Scalars['ID'];\n};\n\nexport type Pgp = {\n  __typename?: 'PGP';\n  pubKey: Scalars['String'];\n};\n\nexport type PackageInfo = {\n  __typename?: 'PackageInfo';\n  version: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type PaginationInput = {\n  /** Default offset 0. */\n  offset?: Maybe<Scalars['Int']>;\n  /** Default limit 50 */\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Check if a email has already exist. */\n  checkEmailExist: Scalars['Boolean'];\n  /** Check if a event code has already exist. */\n  checkEventCodeExist: Scalars['Boolean'];\n  eventById: Event;\n  /** Get events by code. */\n  eventsByCode: Array<Event>;\n  /** Get all my events. */\n  eventsByMe: EventPaged;\n  isEventAudience: Scalars['Boolean'];\n  me: User;\n  packageInfo: PackageInfo;\n  /** For demo use */\n  pgp: Pgp;\n  roles: Array<Role>;\n};\n\n\nexport type QueryCheckEmailExistArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type QueryCheckEventCodeExistArgs = {\n  code: Scalars['String'];\n};\n\n\nexport type QueryEventByIdArgs = {\n  eventId: Scalars['ID'];\n};\n\n\nexport type QueryEventsByCodeArgs = {\n  code?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryEventsByMeArgs = {\n  dateStatusFilter?: Maybe<EventDateStatus>;\n  eventOwnerFilter?: Maybe<EventOwnerFilter>;\n  searchString?: Maybe<Scalars['String']>;\n  pagination: PaginationInput;\n};\n\n\nexport type QueryIsEventAudienceArgs = {\n  eventId: Scalars['ID'];\n};\n\nexport type Question = {\n  __typename?: 'Question';\n  id: Scalars['ID'];\n  content: Scalars['String'];\n  anonymous: Scalars['Boolean'];\n  reviewStatus: ReviewStatus;\n  star: Scalars['Boolean'];\n  top: Scalars['Boolean'];\n  voteUpCount: Scalars['Int'];\n  replyCount: Scalars['Int'];\n  event: Event;\n  author?: Maybe<User>;\n  voted: Scalars['Boolean'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type Reply = {\n  __typename?: 'Reply';\n  id: Scalars['ID'];\n  content: Scalars['String'];\n  reviewStatus: ReviewStatus;\n  /** If author is a moderator of the event? */\n  isModerator: Scalars['Boolean'];\n  anonymous: Scalars['Boolean'];\n  question: Question;\n  author?: Maybe<User>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\n/** Question's or Reply's review status */\nexport enum ReviewStatus {\n  Review = 'Review',\n  Publish = 'Publish',\n  Archive = 'Archive'\n}\n\nexport type Role = {\n  __typename?: 'Role';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n};\n\nexport enum RoleName {\n  User = 'User',\n  Audience = 'Audience'\n}\n\nexport type UpdateEventInput = {\n  eventId: Scalars['ID'];\n  code?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  startAt?: Maybe<Scalars['DateTime']>;\n  endAt?: Maybe<Scalars['DateTime']>;\n  moderation?: Maybe<Scalars['Boolean']>;\n};\n\nexport type UpdateUserInput = {\n  name?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  anonymous?: Maybe<Scalars['Boolean']>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  anonymous?: Maybe<Scalars['Boolean']>;\n  avatar?: Maybe<Scalars['String']>;\n  roles: Array<Role>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  deletedAt?: Maybe<Scalars['DateTime']>;\n};\n\nexport type GuestesByEventQueryVariables = Exact<{\n  eventId: Scalars['ID'];\n}>;\n\n\nexport type GuestesByEventQuery = (\n  { __typename?: 'Query' }\n  & { eventById: (\n    { __typename?: 'Event' }\n    & Pick<Event, 'id'>\n    & { guestes: Array<(\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'name' | 'email'>\n    )> }\n  ) }\n);\n\nexport type AddGuestMutationVariables = Exact<{\n  email: Scalars['String'];\n  eventId: Scalars['ID'];\n}>;\n\n\nexport type AddGuestMutation = (\n  { __typename?: 'Mutation' }\n  & { addGuest: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'email'>\n  ) }\n);\n\nexport type RemoveGuestMutationVariables = Exact<{\n  eventId: Scalars['ID'];\n  guestId: Scalars['ID'];\n}>;\n\n\nexport type RemoveGuestMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeGuest'>\n);\n\nexport type QuestionFieldsFragment = (\n  { __typename?: 'Question' }\n  & Pick<Question, 'id' | 'createdAt' | 'updatedAt' | 'voteUpCount' | 'replyCount' | 'content' | 'reviewStatus' | 'star' | 'top'>\n  & { author?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'avatar'>\n  )> }\n);\n\nexport type DeleteQuestionMutationVariables = Exact<{\n  questionId: Scalars['ID'];\n}>;\n\n\nexport type DeleteQuestionMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteQuestion: (\n    { __typename?: 'Question' }\n    & Pick<Question, 'id'>\n  ) }\n);\n\nexport type DeleteAllReviewQuestionsMutationVariables = Exact<{\n  eventId: Scalars['ID'];\n}>;\n\n\nexport type DeleteAllReviewQuestionsMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteAllReviewQuestions'>\n);\n\nexport type PublishAllReviewQuestionsMutationVariables = Exact<{\n  eventId: Scalars['ID'];\n}>;\n\n\nexport type PublishAllReviewQuestionsMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'publishAllReviewQuestions'>\n);\n\nexport type UpdateQuestionReviewStatusMutationVariables = Exact<{\n  questionId: Scalars['ID'];\n  reviewStatus: ReviewStatus;\n}>;\n\n\nexport type UpdateQuestionReviewStatusMutation = (\n  { __typename?: 'Mutation' }\n  & { updateQuestionReviewStatus: (\n    { __typename?: 'Question' }\n    & QuestionFieldsFragment\n  ) }\n);\n\nexport type UpdateQuestionStarMutationVariables = Exact<{\n  questionId: Scalars['ID'];\n  star: Scalars['Boolean'];\n}>;\n\n\nexport type UpdateQuestionStarMutation = (\n  { __typename?: 'Mutation' }\n  & { updateQuestionStar: (\n    { __typename?: 'Question' }\n    & QuestionFieldsFragment\n  ) }\n);\n\nexport type UpdateQuestionTopMutationVariables = Exact<{\n  questionId: Scalars['ID'];\n  top: Scalars['Boolean'];\n}>;\n\n\nexport type UpdateQuestionTopMutation = (\n  { __typename?: 'Mutation' }\n  & { updateQuestionTop: (\n    { __typename?: 'Question' }\n    & QuestionFieldsFragment\n  ) }\n);\n\nexport type UpdateQuestionContentMutationVariables = Exact<{\n  questionId: Scalars['ID'];\n  content: Scalars['String'];\n}>;\n\n\nexport type UpdateQuestionContentMutation = (\n  { __typename?: 'Mutation' }\n  & { updateQuestionContent: (\n    { __typename?: 'Question' }\n    & QuestionFieldsFragment\n  ) }\n);\n\nexport type ReplyFieldsFragment = (\n  { __typename?: 'Reply' }\n  & Pick<Reply, 'id' | 'createdAt' | 'updatedAt' | 'content' | 'reviewStatus' | 'isModerator'>\n  & { author?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'avatar'>\n  )> }\n);\n\nexport type CreateReplyMutationVariables = Exact<{\n  input: CreateReplyInput;\n}>;\n\n\nexport type CreateReplyMutation = (\n  { __typename?: 'Mutation' }\n  & { createReply: (\n    { __typename?: 'Reply' }\n    & ReplyFieldsFragment\n  ) }\n);\n\nexport type UpdateReplyContentMutationVariables = Exact<{\n  replyId: Scalars['ID'];\n  content: Scalars['String'];\n}>;\n\n\nexport type UpdateReplyContentMutation = (\n  { __typename?: 'Mutation' }\n  & { updateReplyContent: (\n    { __typename?: 'Reply' }\n    & ReplyFieldsFragment\n  ) }\n);\n\nexport type UpdateReplyReviewStatusMutationVariables = Exact<{\n  replyId: Scalars['ID'];\n  reviewStatus: ReviewStatus;\n}>;\n\n\nexport type UpdateReplyReviewStatusMutation = (\n  { __typename?: 'Mutation' }\n  & { updateReplyReviewStatus: (\n    { __typename?: 'Reply' }\n    & ReplyFieldsFragment\n  ) }\n);\n\nexport type DeleteReplyMutationVariables = Exact<{\n  replyId: Scalars['ID'];\n}>;\n\n\nexport type DeleteReplyMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteReply: (\n    { __typename?: 'Reply' }\n    & Pick<Reply, 'id'>\n  ) }\n);\n\nexport type EventFieldsFragment = (\n  { __typename?: 'Event' }\n  & Pick<Event, 'id' | 'name' | 'code' | 'startAt' | 'endAt' | 'dateStatus'>\n);\n\nexport type EventDetailFieldsFragment = (\n  { __typename?: 'Event' }\n  & Pick<Event, 'id' | 'name' | 'code' | 'startAt' | 'endAt' | 'dateStatus' | 'moderation'>\n  & { owner: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'email'>\n  ) }\n);\n\nexport type EventsByMeQueryVariables = Exact<{\n  searchString?: Maybe<Scalars['String']>;\n  pagination: PaginationInput;\n  eventOwnerFilter?: Maybe<EventOwnerFilter>;\n  dateStatusFilter?: Maybe<EventDateStatus>;\n}>;\n\n\nexport type EventsByMeQuery = (\n  { __typename?: 'Query' }\n  & { eventsByMe: (\n    { __typename?: 'EventPaged' }\n    & Pick<EventPaged, 'limit' | 'offset' | 'totalCount' | 'hasNextPage'>\n    & { list: Array<(\n      { __typename?: 'Event' }\n      & EventFieldsFragment\n    )> }\n  ) }\n);\n\nexport type EventByIdQueryVariables = Exact<{\n  eventId: Scalars['ID'];\n}>;\n\n\nexport type EventByIdQuery = (\n  { __typename?: 'Query' }\n  & { eventById: (\n    { __typename?: 'Event' }\n    & EventDetailFieldsFragment\n  ) }\n);\n\nexport type CheckEventCodeExistQueryVariables = Exact<{\n  code: Scalars['String'];\n}>;\n\n\nexport type CheckEventCodeExistQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'checkEventCodeExist'>\n);\n\nexport type CreateEventMutationVariables = Exact<{\n  code: Scalars['String'];\n  name: Scalars['String'];\n  startAt: Scalars['DateTime'];\n  endAt: Scalars['DateTime'];\n}>;\n\n\nexport type CreateEventMutation = (\n  { __typename?: 'Mutation' }\n  & { createEvent: (\n    { __typename?: 'Event' }\n    & EventFieldsFragment\n  ) }\n);\n\nexport type UpdateEventMutationVariables = Exact<{\n  input: UpdateEventInput;\n}>;\n\n\nexport type UpdateEventMutation = (\n  { __typename?: 'Mutation' }\n  & { updateEvent: (\n    { __typename?: 'Event' }\n    & EventDetailFieldsFragment\n  ) }\n);\n\nexport type DeleteEventMutationVariables = Exact<{\n  eventId: Scalars['ID'];\n}>;\n\n\nexport type DeleteEventMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteEvent: (\n    { __typename?: 'Event' }\n    & Pick<Event, 'id'>\n  ) }\n);\n\nexport type PgpQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type PgpQuery = (\n  { __typename?: 'Query' }\n  & { pgp: (\n    { __typename?: 'PGP' }\n    & Pick<Pgp, 'pubKey'>\n  ) }\n);\n\nexport type PackageInfoMutationVariables = Exact<{\n  version?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type PackageInfoMutation = (\n  { __typename?: 'Mutation' }\n  & { packageInfo: (\n    { __typename?: 'PackageInfo' }\n    & Pick<PackageInfo, 'version' | 'description'>\n  ) }\n);\n\nexport type EventForLoginQueryVariables = Exact<{\n  eventId: Scalars['ID'];\n}>;\n\n\nexport type EventForLoginQuery = (\n  { __typename?: 'Query' }\n  & { eventById: (\n    { __typename?: 'Event' }\n    & Pick<Event, 'id' | 'name' | 'code' | 'startAt' | 'endAt'>\n  ) }\n);\n\nexport type QuestionAudienceFieldsFragment = (\n  { __typename?: 'Question' }\n  & Pick<Question, 'id' | 'anonymous' | 'createdAt' | 'updatedAt' | 'content' | 'reviewStatus' | 'top' | 'star' | 'voted' | 'voteUpCount' | 'replyCount'>\n  & { author?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'avatar'>\n  )> }\n);\n\nexport type CreateQuestionMutationVariables = Exact<{\n  input: CreateQuestionInput;\n}>;\n\n\nexport type CreateQuestionMutation = (\n  { __typename?: 'Mutation' }\n  & { createQuestion: (\n    { __typename?: 'Question' }\n    & QuestionAudienceFieldsFragment\n  ) }\n);\n\nexport type VoteUpQuestionMutationVariables = Exact<{\n  questionId: Scalars['ID'];\n}>;\n\n\nexport type VoteUpQuestionMutation = (\n  { __typename?: 'Mutation' }\n  & { voteUpQuestion: (\n    { __typename?: 'Question' }\n    & QuestionAudienceFieldsFragment\n  ) }\n);\n\nexport type LoginAudienceMutationVariables = Exact<{\n  fingerprint: Scalars['String'];\n}>;\n\n\nexport type LoginAudienceMutation = (\n  { __typename?: 'Mutation' }\n  & { loginAudience: (\n    { __typename?: 'AuthPayload' }\n    & Pick<AuthPayload, 'token'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'name'>\n    ) }\n  ) }\n);\n\nexport type IsEventAudienceQueryVariables = Exact<{\n  eventId: Scalars['ID'];\n}>;\n\n\nexport type IsEventAudienceQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'isEventAudience'>\n);\n\nexport type JoinEventMutationVariables = Exact<{\n  eventId: Scalars['ID'];\n}>;\n\n\nexport type JoinEventMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'joinEvent'>\n);\n\nexport type QuestionWallFieldsFragment = (\n  { __typename?: 'Question' }\n  & Pick<Question, 'id' | 'createdAt' | 'updatedAt' | 'content' | 'reviewStatus' | 'top' | 'star' | 'voteUpCount' | 'replyCount'>\n  & { author?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'avatar'>\n  )> }\n);\n\nexport type EventCodeOptionsQueryVariables = Exact<{\n  code?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type EventCodeOptionsQuery = (\n  { __typename?: 'Query' }\n  & { eventsByCode: Array<(\n    { __typename?: 'Event' }\n    & Pick<Event, 'id' | 'code' | 'name' | 'startAt' | 'endAt'>\n  )> }\n);\n\nexport type UserInfoFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'name' | 'anonymous' | 'email' | 'avatar'>\n  & { roles: Array<(\n    { __typename?: 'Role' }\n    & Pick<Role, 'id' | 'name'>\n  )> }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: (\n    { __typename?: 'User' }\n    & UserInfoFragment\n  ) }\n);\n\nexport type UpdateUserMutationVariables = Exact<{\n  input: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUser: (\n    { __typename?: 'User' }\n    & UserInfoFragment\n  ) }\n);\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'AuthPayload' }\n    & Pick<AuthPayload, 'token'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'name' | 'email'>\n    ) }\n  ) }\n);\n\nexport type SignupMutationVariables = Exact<{\n  name: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type SignupMutation = (\n  { __typename?: 'Mutation' }\n  & { signup: (\n    { __typename?: 'AuthPayload' }\n    & Pick<AuthPayload, 'token'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'name' | 'email'>\n    ) }\n  ) }\n);\n\nexport type CheckEmailExistQueryVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type CheckEmailExistQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'checkEmailExist'>\n);\n\nexport const QuestionFieldsFragmentDoc = gql`\n    fragment QuestionFields on Question {\n  id\n  createdAt\n  updatedAt\n  voteUpCount\n  replyCount\n  content\n  reviewStatus\n  star\n  top\n  author {\n    id\n    name\n    avatar\n  }\n}\n    `;\nexport const ReplyFieldsFragmentDoc = gql`\n    fragment ReplyFields on Reply {\n  id\n  createdAt\n  updatedAt\n  content\n  reviewStatus\n  isModerator\n  author {\n    id\n    name\n    avatar\n  }\n}\n    `;\nexport const EventFieldsFragmentDoc = gql`\n    fragment EventFields on Event {\n  id\n  name\n  code\n  startAt\n  endAt\n  dateStatus\n}\n    `;\nexport const EventDetailFieldsFragmentDoc = gql`\n    fragment EventDetailFields on Event {\n  id\n  name\n  code\n  startAt\n  endAt\n  dateStatus\n  moderation\n  owner {\n    id\n    name\n    email\n  }\n}\n    `;\nexport const QuestionAudienceFieldsFragmentDoc = gql`\n    fragment QuestionAudienceFields on Question {\n  id\n  anonymous\n  createdAt\n  updatedAt\n  content\n  reviewStatus\n  top\n  star\n  voted\n  voteUpCount\n  replyCount\n  author {\n    id\n    name\n    avatar\n  }\n}\n    `;\nexport const QuestionWallFieldsFragmentDoc = gql`\n    fragment QuestionWallFields on Question {\n  id\n  createdAt\n  updatedAt\n  content\n  reviewStatus\n  top\n  star\n  voteUpCount\n  replyCount\n  author {\n    id\n    name\n    avatar\n  }\n}\n    `;\nexport const UserInfoFragmentDoc = gql`\n    fragment UserInfo on User {\n  id\n  name\n  anonymous\n  email\n  avatar\n  roles {\n    id\n    name\n  }\n}\n    `;\nexport const GuestesByEventDocument = gql`\n    query GuestesByEvent($eventId: ID!) {\n  eventById(eventId: $eventId) {\n    id\n    guestes {\n      id\n      name\n      email\n    }\n  }\n}\n    `;\n\n/**\n * __useGuestesByEventQuery__\n *\n * To run a query within a React component, call `useGuestesByEventQuery` and pass it any options that fit your needs.\n * When your component renders, `useGuestesByEventQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGuestesByEventQuery({\n *   variables: {\n *      eventId: // value for 'eventId'\n *   },\n * });\n */\nexport function useGuestesByEventQuery(baseOptions: Apollo.QueryHookOptions<GuestesByEventQuery, GuestesByEventQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GuestesByEventQuery, GuestesByEventQueryVariables>(GuestesByEventDocument, options);\n      }\nexport function useGuestesByEventLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GuestesByEventQuery, GuestesByEventQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GuestesByEventQuery, GuestesByEventQueryVariables>(GuestesByEventDocument, options);\n        }\nexport type GuestesByEventQueryHookResult = ReturnType<typeof useGuestesByEventQuery>;\nexport type GuestesByEventLazyQueryHookResult = ReturnType<typeof useGuestesByEventLazyQuery>;\nexport type GuestesByEventQueryResult = Apollo.QueryResult<GuestesByEventQuery, GuestesByEventQueryVariables>;\nexport const AddGuestDocument = gql`\n    mutation AddGuest($email: String!, $eventId: ID!) {\n  addGuest(email: $email, eventId: $eventId) {\n    id\n    name\n    email\n  }\n}\n    `;\nexport type AddGuestMutationFn = Apollo.MutationFunction<AddGuestMutation, AddGuestMutationVariables>;\n\n/**\n * __useAddGuestMutation__\n *\n * To run a mutation, you first call `useAddGuestMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddGuestMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addGuestMutation, { data, loading, error }] = useAddGuestMutation({\n *   variables: {\n *      email: // value for 'email'\n *      eventId: // value for 'eventId'\n *   },\n * });\n */\nexport function useAddGuestMutation(baseOptions?: Apollo.MutationHookOptions<AddGuestMutation, AddGuestMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AddGuestMutation, AddGuestMutationVariables>(AddGuestDocument, options);\n      }\nexport type AddGuestMutationHookResult = ReturnType<typeof useAddGuestMutation>;\nexport type AddGuestMutationResult = Apollo.MutationResult<AddGuestMutation>;\nexport type AddGuestMutationOptions = Apollo.BaseMutationOptions<AddGuestMutation, AddGuestMutationVariables>;\nexport const RemoveGuestDocument = gql`\n    mutation RemoveGuest($eventId: ID!, $guestId: ID!) {\n  removeGuest(eventId: $eventId, guestId: $guestId)\n}\n    `;\nexport type RemoveGuestMutationFn = Apollo.MutationFunction<RemoveGuestMutation, RemoveGuestMutationVariables>;\n\n/**\n * __useRemoveGuestMutation__\n *\n * To run a mutation, you first call `useRemoveGuestMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveGuestMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeGuestMutation, { data, loading, error }] = useRemoveGuestMutation({\n *   variables: {\n *      eventId: // value for 'eventId'\n *      guestId: // value for 'guestId'\n *   },\n * });\n */\nexport function useRemoveGuestMutation(baseOptions?: Apollo.MutationHookOptions<RemoveGuestMutation, RemoveGuestMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemoveGuestMutation, RemoveGuestMutationVariables>(RemoveGuestDocument, options);\n      }\nexport type RemoveGuestMutationHookResult = ReturnType<typeof useRemoveGuestMutation>;\nexport type RemoveGuestMutationResult = Apollo.MutationResult<RemoveGuestMutation>;\nexport type RemoveGuestMutationOptions = Apollo.BaseMutationOptions<RemoveGuestMutation, RemoveGuestMutationVariables>;\nexport const DeleteQuestionDocument = gql`\n    mutation DeleteQuestion($questionId: ID!) {\n  deleteQuestion(questionId: $questionId) {\n    id\n  }\n}\n    `;\nexport type DeleteQuestionMutationFn = Apollo.MutationFunction<DeleteQuestionMutation, DeleteQuestionMutationVariables>;\n\n/**\n * __useDeleteQuestionMutation__\n *\n * To run a mutation, you first call `useDeleteQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteQuestionMutation, { data, loading, error }] = useDeleteQuestionMutation({\n *   variables: {\n *      questionId: // value for 'questionId'\n *   },\n * });\n */\nexport function useDeleteQuestionMutation(baseOptions?: Apollo.MutationHookOptions<DeleteQuestionMutation, DeleteQuestionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteQuestionMutation, DeleteQuestionMutationVariables>(DeleteQuestionDocument, options);\n      }\nexport type DeleteQuestionMutationHookResult = ReturnType<typeof useDeleteQuestionMutation>;\nexport type DeleteQuestionMutationResult = Apollo.MutationResult<DeleteQuestionMutation>;\nexport type DeleteQuestionMutationOptions = Apollo.BaseMutationOptions<DeleteQuestionMutation, DeleteQuestionMutationVariables>;\nexport const DeleteAllReviewQuestionsDocument = gql`\n    mutation DeleteAllReviewQuestions($eventId: ID!) {\n  deleteAllReviewQuestions(eventId: $eventId)\n}\n    `;\nexport type DeleteAllReviewQuestionsMutationFn = Apollo.MutationFunction<DeleteAllReviewQuestionsMutation, DeleteAllReviewQuestionsMutationVariables>;\n\n/**\n * __useDeleteAllReviewQuestionsMutation__\n *\n * To run a mutation, you first call `useDeleteAllReviewQuestionsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteAllReviewQuestionsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteAllReviewQuestionsMutation, { data, loading, error }] = useDeleteAllReviewQuestionsMutation({\n *   variables: {\n *      eventId: // value for 'eventId'\n *   },\n * });\n */\nexport function useDeleteAllReviewQuestionsMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAllReviewQuestionsMutation, DeleteAllReviewQuestionsMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteAllReviewQuestionsMutation, DeleteAllReviewQuestionsMutationVariables>(DeleteAllReviewQuestionsDocument, options);\n      }\nexport type DeleteAllReviewQuestionsMutationHookResult = ReturnType<typeof useDeleteAllReviewQuestionsMutation>;\nexport type DeleteAllReviewQuestionsMutationResult = Apollo.MutationResult<DeleteAllReviewQuestionsMutation>;\nexport type DeleteAllReviewQuestionsMutationOptions = Apollo.BaseMutationOptions<DeleteAllReviewQuestionsMutation, DeleteAllReviewQuestionsMutationVariables>;\nexport const PublishAllReviewQuestionsDocument = gql`\n    mutation PublishAllReviewQuestions($eventId: ID!) {\n  publishAllReviewQuestions(eventId: $eventId)\n}\n    `;\nexport type PublishAllReviewQuestionsMutationFn = Apollo.MutationFunction<PublishAllReviewQuestionsMutation, PublishAllReviewQuestionsMutationVariables>;\n\n/**\n * __usePublishAllReviewQuestionsMutation__\n *\n * To run a mutation, you first call `usePublishAllReviewQuestionsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePublishAllReviewQuestionsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [publishAllReviewQuestionsMutation, { data, loading, error }] = usePublishAllReviewQuestionsMutation({\n *   variables: {\n *      eventId: // value for 'eventId'\n *   },\n * });\n */\nexport function usePublishAllReviewQuestionsMutation(baseOptions?: Apollo.MutationHookOptions<PublishAllReviewQuestionsMutation, PublishAllReviewQuestionsMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<PublishAllReviewQuestionsMutation, PublishAllReviewQuestionsMutationVariables>(PublishAllReviewQuestionsDocument, options);\n      }\nexport type PublishAllReviewQuestionsMutationHookResult = ReturnType<typeof usePublishAllReviewQuestionsMutation>;\nexport type PublishAllReviewQuestionsMutationResult = Apollo.MutationResult<PublishAllReviewQuestionsMutation>;\nexport type PublishAllReviewQuestionsMutationOptions = Apollo.BaseMutationOptions<PublishAllReviewQuestionsMutation, PublishAllReviewQuestionsMutationVariables>;\nexport const UpdateQuestionReviewStatusDocument = gql`\n    mutation UpdateQuestionReviewStatus($questionId: ID!, $reviewStatus: ReviewStatus!) {\n  updateQuestionReviewStatus(questionId: $questionId, reviewStatus: $reviewStatus) {\n    ...QuestionFields\n  }\n}\n    ${QuestionFieldsFragmentDoc}`;\nexport type UpdateQuestionReviewStatusMutationFn = Apollo.MutationFunction<UpdateQuestionReviewStatusMutation, UpdateQuestionReviewStatusMutationVariables>;\n\n/**\n * __useUpdateQuestionReviewStatusMutation__\n *\n * To run a mutation, you first call `useUpdateQuestionReviewStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateQuestionReviewStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateQuestionReviewStatusMutation, { data, loading, error }] = useUpdateQuestionReviewStatusMutation({\n *   variables: {\n *      questionId: // value for 'questionId'\n *      reviewStatus: // value for 'reviewStatus'\n *   },\n * });\n */\nexport function useUpdateQuestionReviewStatusMutation(baseOptions?: Apollo.MutationHookOptions<UpdateQuestionReviewStatusMutation, UpdateQuestionReviewStatusMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateQuestionReviewStatusMutation, UpdateQuestionReviewStatusMutationVariables>(UpdateQuestionReviewStatusDocument, options);\n      }\nexport type UpdateQuestionReviewStatusMutationHookResult = ReturnType<typeof useUpdateQuestionReviewStatusMutation>;\nexport type UpdateQuestionReviewStatusMutationResult = Apollo.MutationResult<UpdateQuestionReviewStatusMutation>;\nexport type UpdateQuestionReviewStatusMutationOptions = Apollo.BaseMutationOptions<UpdateQuestionReviewStatusMutation, UpdateQuestionReviewStatusMutationVariables>;\nexport const UpdateQuestionStarDocument = gql`\n    mutation UpdateQuestionStar($questionId: ID!, $star: Boolean!) {\n  updateQuestionStar(questionId: $questionId, star: $star) {\n    ...QuestionFields\n  }\n}\n    ${QuestionFieldsFragmentDoc}`;\nexport type UpdateQuestionStarMutationFn = Apollo.MutationFunction<UpdateQuestionStarMutation, UpdateQuestionStarMutationVariables>;\n\n/**\n * __useUpdateQuestionStarMutation__\n *\n * To run a mutation, you first call `useUpdateQuestionStarMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateQuestionStarMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateQuestionStarMutation, { data, loading, error }] = useUpdateQuestionStarMutation({\n *   variables: {\n *      questionId: // value for 'questionId'\n *      star: // value for 'star'\n *   },\n * });\n */\nexport function useUpdateQuestionStarMutation(baseOptions?: Apollo.MutationHookOptions<UpdateQuestionStarMutation, UpdateQuestionStarMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateQuestionStarMutation, UpdateQuestionStarMutationVariables>(UpdateQuestionStarDocument, options);\n      }\nexport type UpdateQuestionStarMutationHookResult = ReturnType<typeof useUpdateQuestionStarMutation>;\nexport type UpdateQuestionStarMutationResult = Apollo.MutationResult<UpdateQuestionStarMutation>;\nexport type UpdateQuestionStarMutationOptions = Apollo.BaseMutationOptions<UpdateQuestionStarMutation, UpdateQuestionStarMutationVariables>;\nexport const UpdateQuestionTopDocument = gql`\n    mutation UpdateQuestionTop($questionId: ID!, $top: Boolean!) {\n  updateQuestionTop(questionId: $questionId, top: $top) {\n    ...QuestionFields\n  }\n}\n    ${QuestionFieldsFragmentDoc}`;\nexport type UpdateQuestionTopMutationFn = Apollo.MutationFunction<UpdateQuestionTopMutation, UpdateQuestionTopMutationVariables>;\n\n/**\n * __useUpdateQuestionTopMutation__\n *\n * To run a mutation, you first call `useUpdateQuestionTopMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateQuestionTopMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateQuestionTopMutation, { data, loading, error }] = useUpdateQuestionTopMutation({\n *   variables: {\n *      questionId: // value for 'questionId'\n *      top: // value for 'top'\n *   },\n * });\n */\nexport function useUpdateQuestionTopMutation(baseOptions?: Apollo.MutationHookOptions<UpdateQuestionTopMutation, UpdateQuestionTopMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateQuestionTopMutation, UpdateQuestionTopMutationVariables>(UpdateQuestionTopDocument, options);\n      }\nexport type UpdateQuestionTopMutationHookResult = ReturnType<typeof useUpdateQuestionTopMutation>;\nexport type UpdateQuestionTopMutationResult = Apollo.MutationResult<UpdateQuestionTopMutation>;\nexport type UpdateQuestionTopMutationOptions = Apollo.BaseMutationOptions<UpdateQuestionTopMutation, UpdateQuestionTopMutationVariables>;\nexport const UpdateQuestionContentDocument = gql`\n    mutation UpdateQuestionContent($questionId: ID!, $content: String!) {\n  updateQuestionContent(questionId: $questionId, content: $content) {\n    ...QuestionFields\n  }\n}\n    ${QuestionFieldsFragmentDoc}`;\nexport type UpdateQuestionContentMutationFn = Apollo.MutationFunction<UpdateQuestionContentMutation, UpdateQuestionContentMutationVariables>;\n\n/**\n * __useUpdateQuestionContentMutation__\n *\n * To run a mutation, you first call `useUpdateQuestionContentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateQuestionContentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateQuestionContentMutation, { data, loading, error }] = useUpdateQuestionContentMutation({\n *   variables: {\n *      questionId: // value for 'questionId'\n *      content: // value for 'content'\n *   },\n * });\n */\nexport function useUpdateQuestionContentMutation(baseOptions?: Apollo.MutationHookOptions<UpdateQuestionContentMutation, UpdateQuestionContentMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateQuestionContentMutation, UpdateQuestionContentMutationVariables>(UpdateQuestionContentDocument, options);\n      }\nexport type UpdateQuestionContentMutationHookResult = ReturnType<typeof useUpdateQuestionContentMutation>;\nexport type UpdateQuestionContentMutationResult = Apollo.MutationResult<UpdateQuestionContentMutation>;\nexport type UpdateQuestionContentMutationOptions = Apollo.BaseMutationOptions<UpdateQuestionContentMutation, UpdateQuestionContentMutationVariables>;\nexport const CreateReplyDocument = gql`\n    mutation CreateReply($input: CreateReplyInput!) {\n  createReply(input: $input) {\n    ...ReplyFields\n  }\n}\n    ${ReplyFieldsFragmentDoc}`;\nexport type CreateReplyMutationFn = Apollo.MutationFunction<CreateReplyMutation, CreateReplyMutationVariables>;\n\n/**\n * __useCreateReplyMutation__\n *\n * To run a mutation, you first call `useCreateReplyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateReplyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createReplyMutation, { data, loading, error }] = useCreateReplyMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateReplyMutation(baseOptions?: Apollo.MutationHookOptions<CreateReplyMutation, CreateReplyMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateReplyMutation, CreateReplyMutationVariables>(CreateReplyDocument, options);\n      }\nexport type CreateReplyMutationHookResult = ReturnType<typeof useCreateReplyMutation>;\nexport type CreateReplyMutationResult = Apollo.MutationResult<CreateReplyMutation>;\nexport type CreateReplyMutationOptions = Apollo.BaseMutationOptions<CreateReplyMutation, CreateReplyMutationVariables>;\nexport const UpdateReplyContentDocument = gql`\n    mutation UpdateReplyContent($replyId: ID!, $content: String!) {\n  updateReplyContent(replyId: $replyId, content: $content) {\n    ...ReplyFields\n  }\n}\n    ${ReplyFieldsFragmentDoc}`;\nexport type UpdateReplyContentMutationFn = Apollo.MutationFunction<UpdateReplyContentMutation, UpdateReplyContentMutationVariables>;\n\n/**\n * __useUpdateReplyContentMutation__\n *\n * To run a mutation, you first call `useUpdateReplyContentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateReplyContentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateReplyContentMutation, { data, loading, error }] = useUpdateReplyContentMutation({\n *   variables: {\n *      replyId: // value for 'replyId'\n *      content: // value for 'content'\n *   },\n * });\n */\nexport function useUpdateReplyContentMutation(baseOptions?: Apollo.MutationHookOptions<UpdateReplyContentMutation, UpdateReplyContentMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateReplyContentMutation, UpdateReplyContentMutationVariables>(UpdateReplyContentDocument, options);\n      }\nexport type UpdateReplyContentMutationHookResult = ReturnType<typeof useUpdateReplyContentMutation>;\nexport type UpdateReplyContentMutationResult = Apollo.MutationResult<UpdateReplyContentMutation>;\nexport type UpdateReplyContentMutationOptions = Apollo.BaseMutationOptions<UpdateReplyContentMutation, UpdateReplyContentMutationVariables>;\nexport const UpdateReplyReviewStatusDocument = gql`\n    mutation UpdateReplyReviewStatus($replyId: ID!, $reviewStatus: ReviewStatus!) {\n  updateReplyReviewStatus(replyId: $replyId, reviewStatus: $reviewStatus) {\n    ...ReplyFields\n  }\n}\n    ${ReplyFieldsFragmentDoc}`;\nexport type UpdateReplyReviewStatusMutationFn = Apollo.MutationFunction<UpdateReplyReviewStatusMutation, UpdateReplyReviewStatusMutationVariables>;\n\n/**\n * __useUpdateReplyReviewStatusMutation__\n *\n * To run a mutation, you first call `useUpdateReplyReviewStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateReplyReviewStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateReplyReviewStatusMutation, { data, loading, error }] = useUpdateReplyReviewStatusMutation({\n *   variables: {\n *      replyId: // value for 'replyId'\n *      reviewStatus: // value for 'reviewStatus'\n *   },\n * });\n */\nexport function useUpdateReplyReviewStatusMutation(baseOptions?: Apollo.MutationHookOptions<UpdateReplyReviewStatusMutation, UpdateReplyReviewStatusMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateReplyReviewStatusMutation, UpdateReplyReviewStatusMutationVariables>(UpdateReplyReviewStatusDocument, options);\n      }\nexport type UpdateReplyReviewStatusMutationHookResult = ReturnType<typeof useUpdateReplyReviewStatusMutation>;\nexport type UpdateReplyReviewStatusMutationResult = Apollo.MutationResult<UpdateReplyReviewStatusMutation>;\nexport type UpdateReplyReviewStatusMutationOptions = Apollo.BaseMutationOptions<UpdateReplyReviewStatusMutation, UpdateReplyReviewStatusMutationVariables>;\nexport const DeleteReplyDocument = gql`\n    mutation DeleteReply($replyId: ID!) {\n  deleteReply(replyId: $replyId) {\n    id\n  }\n}\n    `;\nexport type DeleteReplyMutationFn = Apollo.MutationFunction<DeleteReplyMutation, DeleteReplyMutationVariables>;\n\n/**\n * __useDeleteReplyMutation__\n *\n * To run a mutation, you first call `useDeleteReplyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteReplyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteReplyMutation, { data, loading, error }] = useDeleteReplyMutation({\n *   variables: {\n *      replyId: // value for 'replyId'\n *   },\n * });\n */\nexport function useDeleteReplyMutation(baseOptions?: Apollo.MutationHookOptions<DeleteReplyMutation, DeleteReplyMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteReplyMutation, DeleteReplyMutationVariables>(DeleteReplyDocument, options);\n      }\nexport type DeleteReplyMutationHookResult = ReturnType<typeof useDeleteReplyMutation>;\nexport type DeleteReplyMutationResult = Apollo.MutationResult<DeleteReplyMutation>;\nexport type DeleteReplyMutationOptions = Apollo.BaseMutationOptions<DeleteReplyMutation, DeleteReplyMutationVariables>;\nexport const EventsByMeDocument = gql`\n    query EventsByMe($searchString: String, $pagination: PaginationInput!, $eventOwnerFilter: EventOwnerFilter, $dateStatusFilter: EventDateStatus) {\n  eventsByMe(\n    searchString: $searchString\n    pagination: $pagination\n    eventOwnerFilter: $eventOwnerFilter\n    dateStatusFilter: $dateStatusFilter\n  ) {\n    limit\n    offset\n    totalCount\n    hasNextPage\n    list {\n      ...EventFields\n    }\n  }\n}\n    ${EventFieldsFragmentDoc}`;\n\n/**\n * __useEventsByMeQuery__\n *\n * To run a query within a React component, call `useEventsByMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useEventsByMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useEventsByMeQuery({\n *   variables: {\n *      searchString: // value for 'searchString'\n *      pagination: // value for 'pagination'\n *      eventOwnerFilter: // value for 'eventOwnerFilter'\n *      dateStatusFilter: // value for 'dateStatusFilter'\n *   },\n * });\n */\nexport function useEventsByMeQuery(baseOptions: Apollo.QueryHookOptions<EventsByMeQuery, EventsByMeQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<EventsByMeQuery, EventsByMeQueryVariables>(EventsByMeDocument, options);\n      }\nexport function useEventsByMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<EventsByMeQuery, EventsByMeQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<EventsByMeQuery, EventsByMeQueryVariables>(EventsByMeDocument, options);\n        }\nexport type EventsByMeQueryHookResult = ReturnType<typeof useEventsByMeQuery>;\nexport type EventsByMeLazyQueryHookResult = ReturnType<typeof useEventsByMeLazyQuery>;\nexport type EventsByMeQueryResult = Apollo.QueryResult<EventsByMeQuery, EventsByMeQueryVariables>;\nexport const EventByIdDocument = gql`\n    query EventById($eventId: ID!) {\n  eventById(eventId: $eventId) {\n    ...EventDetailFields\n  }\n}\n    ${EventDetailFieldsFragmentDoc}`;\n\n/**\n * __useEventByIdQuery__\n *\n * To run a query within a React component, call `useEventByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useEventByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useEventByIdQuery({\n *   variables: {\n *      eventId: // value for 'eventId'\n *   },\n * });\n */\nexport function useEventByIdQuery(baseOptions: Apollo.QueryHookOptions<EventByIdQuery, EventByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<EventByIdQuery, EventByIdQueryVariables>(EventByIdDocument, options);\n      }\nexport function useEventByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<EventByIdQuery, EventByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<EventByIdQuery, EventByIdQueryVariables>(EventByIdDocument, options);\n        }\nexport type EventByIdQueryHookResult = ReturnType<typeof useEventByIdQuery>;\nexport type EventByIdLazyQueryHookResult = ReturnType<typeof useEventByIdLazyQuery>;\nexport type EventByIdQueryResult = Apollo.QueryResult<EventByIdQuery, EventByIdQueryVariables>;\nexport const CheckEventCodeExistDocument = gql`\n    query CheckEventCodeExist($code: String!) {\n  checkEventCodeExist(code: $code)\n}\n    `;\n\n/**\n * __useCheckEventCodeExistQuery__\n *\n * To run a query within a React component, call `useCheckEventCodeExistQuery` and pass it any options that fit your needs.\n * When your component renders, `useCheckEventCodeExistQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCheckEventCodeExistQuery({\n *   variables: {\n *      code: // value for 'code'\n *   },\n * });\n */\nexport function useCheckEventCodeExistQuery(baseOptions: Apollo.QueryHookOptions<CheckEventCodeExistQuery, CheckEventCodeExistQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<CheckEventCodeExistQuery, CheckEventCodeExistQueryVariables>(CheckEventCodeExistDocument, options);\n      }\nexport function useCheckEventCodeExistLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CheckEventCodeExistQuery, CheckEventCodeExistQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<CheckEventCodeExistQuery, CheckEventCodeExistQueryVariables>(CheckEventCodeExistDocument, options);\n        }\nexport type CheckEventCodeExistQueryHookResult = ReturnType<typeof useCheckEventCodeExistQuery>;\nexport type CheckEventCodeExistLazyQueryHookResult = ReturnType<typeof useCheckEventCodeExistLazyQuery>;\nexport type CheckEventCodeExistQueryResult = Apollo.QueryResult<CheckEventCodeExistQuery, CheckEventCodeExistQueryVariables>;\nexport const CreateEventDocument = gql`\n    mutation CreateEvent($code: String!, $name: String!, $startAt: DateTime!, $endAt: DateTime!) {\n  createEvent(code: $code, name: $name, startAt: $startAt, endAt: $endAt) {\n    ...EventFields\n  }\n}\n    ${EventFieldsFragmentDoc}`;\nexport type CreateEventMutationFn = Apollo.MutationFunction<CreateEventMutation, CreateEventMutationVariables>;\n\n/**\n * __useCreateEventMutation__\n *\n * To run a mutation, you first call `useCreateEventMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateEventMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createEventMutation, { data, loading, error }] = useCreateEventMutation({\n *   variables: {\n *      code: // value for 'code'\n *      name: // value for 'name'\n *      startAt: // value for 'startAt'\n *      endAt: // value for 'endAt'\n *   },\n * });\n */\nexport function useCreateEventMutation(baseOptions?: Apollo.MutationHookOptions<CreateEventMutation, CreateEventMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateEventMutation, CreateEventMutationVariables>(CreateEventDocument, options);\n      }\nexport type CreateEventMutationHookResult = ReturnType<typeof useCreateEventMutation>;\nexport type CreateEventMutationResult = Apollo.MutationResult<CreateEventMutation>;\nexport type CreateEventMutationOptions = Apollo.BaseMutationOptions<CreateEventMutation, CreateEventMutationVariables>;\nexport const UpdateEventDocument = gql`\n    mutation UpdateEvent($input: UpdateEventInput!) {\n  updateEvent(input: $input) {\n    ...EventDetailFields\n  }\n}\n    ${EventDetailFieldsFragmentDoc}`;\nexport type UpdateEventMutationFn = Apollo.MutationFunction<UpdateEventMutation, UpdateEventMutationVariables>;\n\n/**\n * __useUpdateEventMutation__\n *\n * To run a mutation, you first call `useUpdateEventMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateEventMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateEventMutation, { data, loading, error }] = useUpdateEventMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateEventMutation(baseOptions?: Apollo.MutationHookOptions<UpdateEventMutation, UpdateEventMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateEventMutation, UpdateEventMutationVariables>(UpdateEventDocument, options);\n      }\nexport type UpdateEventMutationHookResult = ReturnType<typeof useUpdateEventMutation>;\nexport type UpdateEventMutationResult = Apollo.MutationResult<UpdateEventMutation>;\nexport type UpdateEventMutationOptions = Apollo.BaseMutationOptions<UpdateEventMutation, UpdateEventMutationVariables>;\nexport const DeleteEventDocument = gql`\n    mutation DeleteEvent($eventId: ID!) {\n  deleteEvent(eventId: $eventId) {\n    id\n  }\n}\n    `;\nexport type DeleteEventMutationFn = Apollo.MutationFunction<DeleteEventMutation, DeleteEventMutationVariables>;\n\n/**\n * __useDeleteEventMutation__\n *\n * To run a mutation, you first call `useDeleteEventMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteEventMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteEventMutation, { data, loading, error }] = useDeleteEventMutation({\n *   variables: {\n *      eventId: // value for 'eventId'\n *   },\n * });\n */\nexport function useDeleteEventMutation(baseOptions?: Apollo.MutationHookOptions<DeleteEventMutation, DeleteEventMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteEventMutation, DeleteEventMutationVariables>(DeleteEventDocument, options);\n      }\nexport type DeleteEventMutationHookResult = ReturnType<typeof useDeleteEventMutation>;\nexport type DeleteEventMutationResult = Apollo.MutationResult<DeleteEventMutation>;\nexport type DeleteEventMutationOptions = Apollo.BaseMutationOptions<DeleteEventMutation, DeleteEventMutationVariables>;\nexport const PgpDocument = gql`\n    query PGP {\n  pgp {\n    pubKey\n  }\n}\n    `;\n\n/**\n * __usePgpQuery__\n *\n * To run a query within a React component, call `usePgpQuery` and pass it any options that fit your needs.\n * When your component renders, `usePgpQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePgpQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePgpQuery(baseOptions?: Apollo.QueryHookOptions<PgpQuery, PgpQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PgpQuery, PgpQueryVariables>(PgpDocument, options);\n      }\nexport function usePgpLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PgpQuery, PgpQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PgpQuery, PgpQueryVariables>(PgpDocument, options);\n        }\nexport type PgpQueryHookResult = ReturnType<typeof usePgpQuery>;\nexport type PgpLazyQueryHookResult = ReturnType<typeof usePgpLazyQuery>;\nexport type PgpQueryResult = Apollo.QueryResult<PgpQuery, PgpQueryVariables>;\nexport const PackageInfoDocument = gql`\n    mutation PackageInfo($version: String, $description: String) {\n  packageInfo(version: $version, description: $description) @client {\n    version\n    description\n  }\n}\n    `;\nexport type PackageInfoMutationFn = Apollo.MutationFunction<PackageInfoMutation, PackageInfoMutationVariables>;\n\n/**\n * __usePackageInfoMutation__\n *\n * To run a mutation, you first call `usePackageInfoMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePackageInfoMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [packageInfoMutation, { data, loading, error }] = usePackageInfoMutation({\n *   variables: {\n *      version: // value for 'version'\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function usePackageInfoMutation(baseOptions?: Apollo.MutationHookOptions<PackageInfoMutation, PackageInfoMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<PackageInfoMutation, PackageInfoMutationVariables>(PackageInfoDocument, options);\n      }\nexport type PackageInfoMutationHookResult = ReturnType<typeof usePackageInfoMutation>;\nexport type PackageInfoMutationResult = Apollo.MutationResult<PackageInfoMutation>;\nexport type PackageInfoMutationOptions = Apollo.BaseMutationOptions<PackageInfoMutation, PackageInfoMutationVariables>;\nexport const EventForLoginDocument = gql`\n    query EventForLogin($eventId: ID!) {\n  eventById(eventId: $eventId) {\n    id\n    name\n    code\n    startAt\n    endAt\n  }\n}\n    `;\n\n/**\n * __useEventForLoginQuery__\n *\n * To run a query within a React component, call `useEventForLoginQuery` and pass it any options that fit your needs.\n * When your component renders, `useEventForLoginQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useEventForLoginQuery({\n *   variables: {\n *      eventId: // value for 'eventId'\n *   },\n * });\n */\nexport function useEventForLoginQuery(baseOptions: Apollo.QueryHookOptions<EventForLoginQuery, EventForLoginQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<EventForLoginQuery, EventForLoginQueryVariables>(EventForLoginDocument, options);\n      }\nexport function useEventForLoginLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<EventForLoginQuery, EventForLoginQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<EventForLoginQuery, EventForLoginQueryVariables>(EventForLoginDocument, options);\n        }\nexport type EventForLoginQueryHookResult = ReturnType<typeof useEventForLoginQuery>;\nexport type EventForLoginLazyQueryHookResult = ReturnType<typeof useEventForLoginLazyQuery>;\nexport type EventForLoginQueryResult = Apollo.QueryResult<EventForLoginQuery, EventForLoginQueryVariables>;\nexport const CreateQuestionDocument = gql`\n    mutation CreateQuestion($input: CreateQuestionInput!) {\n  createQuestion(input: $input) {\n    ...QuestionAudienceFields\n  }\n}\n    ${QuestionAudienceFieldsFragmentDoc}`;\nexport type CreateQuestionMutationFn = Apollo.MutationFunction<CreateQuestionMutation, CreateQuestionMutationVariables>;\n\n/**\n * __useCreateQuestionMutation__\n *\n * To run a mutation, you first call `useCreateQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createQuestionMutation, { data, loading, error }] = useCreateQuestionMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateQuestionMutation(baseOptions?: Apollo.MutationHookOptions<CreateQuestionMutation, CreateQuestionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateQuestionMutation, CreateQuestionMutationVariables>(CreateQuestionDocument, options);\n      }\nexport type CreateQuestionMutationHookResult = ReturnType<typeof useCreateQuestionMutation>;\nexport type CreateQuestionMutationResult = Apollo.MutationResult<CreateQuestionMutation>;\nexport type CreateQuestionMutationOptions = Apollo.BaseMutationOptions<CreateQuestionMutation, CreateQuestionMutationVariables>;\nexport const VoteUpQuestionDocument = gql`\n    mutation VoteUpQuestion($questionId: ID!) {\n  voteUpQuestion(questionId: $questionId) {\n    ...QuestionAudienceFields\n  }\n}\n    ${QuestionAudienceFieldsFragmentDoc}`;\nexport type VoteUpQuestionMutationFn = Apollo.MutationFunction<VoteUpQuestionMutation, VoteUpQuestionMutationVariables>;\n\n/**\n * __useVoteUpQuestionMutation__\n *\n * To run a mutation, you first call `useVoteUpQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useVoteUpQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [voteUpQuestionMutation, { data, loading, error }] = useVoteUpQuestionMutation({\n *   variables: {\n *      questionId: // value for 'questionId'\n *   },\n * });\n */\nexport function useVoteUpQuestionMutation(baseOptions?: Apollo.MutationHookOptions<VoteUpQuestionMutation, VoteUpQuestionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<VoteUpQuestionMutation, VoteUpQuestionMutationVariables>(VoteUpQuestionDocument, options);\n      }\nexport type VoteUpQuestionMutationHookResult = ReturnType<typeof useVoteUpQuestionMutation>;\nexport type VoteUpQuestionMutationResult = Apollo.MutationResult<VoteUpQuestionMutation>;\nexport type VoteUpQuestionMutationOptions = Apollo.BaseMutationOptions<VoteUpQuestionMutation, VoteUpQuestionMutationVariables>;\nexport const LoginAudienceDocument = gql`\n    mutation LoginAudience($fingerprint: String!) {\n  loginAudience(fingerprint: $fingerprint) {\n    token\n    user {\n      name\n    }\n  }\n}\n    `;\nexport type LoginAudienceMutationFn = Apollo.MutationFunction<LoginAudienceMutation, LoginAudienceMutationVariables>;\n\n/**\n * __useLoginAudienceMutation__\n *\n * To run a mutation, you first call `useLoginAudienceMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginAudienceMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginAudienceMutation, { data, loading, error }] = useLoginAudienceMutation({\n *   variables: {\n *      fingerprint: // value for 'fingerprint'\n *   },\n * });\n */\nexport function useLoginAudienceMutation(baseOptions?: Apollo.MutationHookOptions<LoginAudienceMutation, LoginAudienceMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginAudienceMutation, LoginAudienceMutationVariables>(LoginAudienceDocument, options);\n      }\nexport type LoginAudienceMutationHookResult = ReturnType<typeof useLoginAudienceMutation>;\nexport type LoginAudienceMutationResult = Apollo.MutationResult<LoginAudienceMutation>;\nexport type LoginAudienceMutationOptions = Apollo.BaseMutationOptions<LoginAudienceMutation, LoginAudienceMutationVariables>;\nexport const IsEventAudienceDocument = gql`\n    query IsEventAudience($eventId: ID!) {\n  isEventAudience(eventId: $eventId)\n}\n    `;\n\n/**\n * __useIsEventAudienceQuery__\n *\n * To run a query within a React component, call `useIsEventAudienceQuery` and pass it any options that fit your needs.\n * When your component renders, `useIsEventAudienceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useIsEventAudienceQuery({\n *   variables: {\n *      eventId: // value for 'eventId'\n *   },\n * });\n */\nexport function useIsEventAudienceQuery(baseOptions: Apollo.QueryHookOptions<IsEventAudienceQuery, IsEventAudienceQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<IsEventAudienceQuery, IsEventAudienceQueryVariables>(IsEventAudienceDocument, options);\n      }\nexport function useIsEventAudienceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<IsEventAudienceQuery, IsEventAudienceQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<IsEventAudienceQuery, IsEventAudienceQueryVariables>(IsEventAudienceDocument, options);\n        }\nexport type IsEventAudienceQueryHookResult = ReturnType<typeof useIsEventAudienceQuery>;\nexport type IsEventAudienceLazyQueryHookResult = ReturnType<typeof useIsEventAudienceLazyQuery>;\nexport type IsEventAudienceQueryResult = Apollo.QueryResult<IsEventAudienceQuery, IsEventAudienceQueryVariables>;\nexport const JoinEventDocument = gql`\n    mutation JoinEvent($eventId: ID!) {\n  joinEvent(eventId: $eventId)\n}\n    `;\nexport type JoinEventMutationFn = Apollo.MutationFunction<JoinEventMutation, JoinEventMutationVariables>;\n\n/**\n * __useJoinEventMutation__\n *\n * To run a mutation, you first call `useJoinEventMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useJoinEventMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [joinEventMutation, { data, loading, error }] = useJoinEventMutation({\n *   variables: {\n *      eventId: // value for 'eventId'\n *   },\n * });\n */\nexport function useJoinEventMutation(baseOptions?: Apollo.MutationHookOptions<JoinEventMutation, JoinEventMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<JoinEventMutation, JoinEventMutationVariables>(JoinEventDocument, options);\n      }\nexport type JoinEventMutationHookResult = ReturnType<typeof useJoinEventMutation>;\nexport type JoinEventMutationResult = Apollo.MutationResult<JoinEventMutation>;\nexport type JoinEventMutationOptions = Apollo.BaseMutationOptions<JoinEventMutation, JoinEventMutationVariables>;\nexport const EventCodeOptionsDocument = gql`\n    query EventCodeOptions($code: String) {\n  eventsByCode(code: $code) {\n    id\n    code\n    name\n    startAt\n    endAt\n  }\n}\n    `;\n\n/**\n * __useEventCodeOptionsQuery__\n *\n * To run a query within a React component, call `useEventCodeOptionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useEventCodeOptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useEventCodeOptionsQuery({\n *   variables: {\n *      code: // value for 'code'\n *   },\n * });\n */\nexport function useEventCodeOptionsQuery(baseOptions?: Apollo.QueryHookOptions<EventCodeOptionsQuery, EventCodeOptionsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<EventCodeOptionsQuery, EventCodeOptionsQueryVariables>(EventCodeOptionsDocument, options);\n      }\nexport function useEventCodeOptionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<EventCodeOptionsQuery, EventCodeOptionsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<EventCodeOptionsQuery, EventCodeOptionsQueryVariables>(EventCodeOptionsDocument, options);\n        }\nexport type EventCodeOptionsQueryHookResult = ReturnType<typeof useEventCodeOptionsQuery>;\nexport type EventCodeOptionsLazyQueryHookResult = ReturnType<typeof useEventCodeOptionsLazyQuery>;\nexport type EventCodeOptionsQueryResult = Apollo.QueryResult<EventCodeOptionsQuery, EventCodeOptionsQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...UserInfo\n  }\n}\n    ${UserInfoFragmentDoc}`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const UpdateUserDocument = gql`\n    mutation UpdateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    ...UserInfo\n  }\n}\n    ${UserInfoFragmentDoc}`;\nexport type UpdateUserMutationFn = Apollo.MutationFunction<UpdateUserMutation, UpdateUserMutationVariables>;\n\n/**\n * __useUpdateUserMutation__\n *\n * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateUserMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserMutation, UpdateUserMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument, options);\n      }\nexport type UpdateUserMutationHookResult = ReturnType<typeof useUpdateUserMutation>;\nexport type UpdateUserMutationResult = Apollo.MutationResult<UpdateUserMutation>;\nexport type UpdateUserMutationOptions = Apollo.BaseMutationOptions<UpdateUserMutation, UpdateUserMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(password: $password, email: $email) {\n    token\n    user {\n      name\n      email\n    }\n  }\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const SignupDocument = gql`\n    mutation Signup($name: String!, $email: String!, $password: String!) {\n  signup(name: $name, password: $password, email: $email) {\n    token\n    user {\n      name\n      email\n    }\n  }\n}\n    `;\nexport type SignupMutationFn = Apollo.MutationFunction<SignupMutation, SignupMutationVariables>;\n\n/**\n * __useSignupMutation__\n *\n * To run a mutation, you first call `useSignupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signupMutation, { data, loading, error }] = useSignupMutation({\n *   variables: {\n *      name: // value for 'name'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useSignupMutation(baseOptions?: Apollo.MutationHookOptions<SignupMutation, SignupMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<SignupMutation, SignupMutationVariables>(SignupDocument, options);\n      }\nexport type SignupMutationHookResult = ReturnType<typeof useSignupMutation>;\nexport type SignupMutationResult = Apollo.MutationResult<SignupMutation>;\nexport type SignupMutationOptions = Apollo.BaseMutationOptions<SignupMutation, SignupMutationVariables>;\nexport const CheckEmailExistDocument = gql`\n    query CheckEmailExist($email: String!) {\n  checkEmailExist(email: $email)\n}\n    `;\n\n/**\n * __useCheckEmailExistQuery__\n *\n * To run a query within a React component, call `useCheckEmailExistQuery` and pass it any options that fit your needs.\n * When your component renders, `useCheckEmailExistQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCheckEmailExistQuery({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useCheckEmailExistQuery(baseOptions: Apollo.QueryHookOptions<CheckEmailExistQuery, CheckEmailExistQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<CheckEmailExistQuery, CheckEmailExistQueryVariables>(CheckEmailExistDocument, options);\n      }\nexport function useCheckEmailExistLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CheckEmailExistQuery, CheckEmailExistQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<CheckEmailExistQuery, CheckEmailExistQueryVariables>(CheckEmailExistDocument, options);\n        }\nexport type CheckEmailExistQueryHookResult = ReturnType<typeof useCheckEmailExistQuery>;\nexport type CheckEmailExistLazyQueryHookResult = ReturnType<typeof useCheckEmailExistLazyQuery>;\nexport type CheckEmailExistQueryResult = Apollo.QueryResult<CheckEmailExistQuery, CheckEmailExistQueryVariables>;","import React from \"react\";\nimport { Button, CircularProgress, ButtonProps } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    buttonWrapper: {\n      position: \"relative\",\n      \"&.fullWidth\": { width: \"100%\" }\n    },\n    buttonProgress: {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      marginTop: -12,\n      marginLeft: -12\n    }\n  })\n);\n\ninterface Props {\n  loading: boolean;\n  fullWidth?: boolean;\n}\n\nexport const ButtonLoading: React.FC<Props & ButtonProps> = ({\n  children,\n  loading,\n  fullWidth = false,\n  ...props\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.buttonWrapper + (fullWidth ? \" fullWidth\" : \"\")}>\n      <Button\n        disabled={loading || props.disabled}\n        fullWidth={fullWidth}\n        {...props}\n      >\n        {children}\n      </Button>\n      {loading && (\n        <CircularProgress size={24} className={classes.buttonProgress} />\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { TextFieldProps, Input, InputLabel } from \"@material-ui/core\";\nimport { useField, FieldAttributes } from \"formik\";\n\nexport type Props = FieldAttributes<any> & TextFieldProps;\n\nexport const FInputWithLabel: React.FC<Props> = ({\n  InputLabelProps,\n  InputProps,\n  label,\n  ...props\n}) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and also replace ErrorMessage entirely.\n  const [field] = useField(props);\n\n  return (\n    <React.Fragment>\n      <InputLabel {...InputLabelProps}>{label}</InputLabel>\n      <Input {...InputProps} {...field} {...props} />\n    </React.Fragment>\n  );\n};\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n","import { invariant } from '../../utilities/globals';\n\nimport { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport { ApolloClient } from '../../core';\nimport { DocumentType, parser, operationName } from '../parser';\nimport { CommonOptions } from '../types/types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: any = {};\n  public client: ApolloClient<object>;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: any) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode,\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\ntype ObservableQueryOptions<TData, TVars> =\n  ReturnType<QueryData<TData, TVars>[\"prepareObservableQueryOptions\"]>;\n\nexport class QueryData<TData, TVariables> extends OperationData<\n  QueryDataOptions<TData, TVariables>\n> {\n  public onNewData: () => void;\n  public currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: ObservableQueryOptions<TData, TVariables>;\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n    const options = this.getOptions();\n    if (this.currentObservable && !this.ssrInitiated()) {\n      this.startQuerySubscription();\n    }\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = options;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      } as TVariables;\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      const result = this.getExecuteResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises!.addQueryPromise(this, () => null);\n      }\n      return result;\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: void 0,\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: void 0,\n    };\n\n    if (this.getOptions().skip) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      return;\n    }\n\n    if (\n      !equal(newObservableQueryOptions, this.previous.observableQueryOptions)\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const last = currentObservable[\"last\"];\n      try {\n        currentObservable.resetLastResults();\n        this.startQuerySubscription();\n      } finally {\n        currentObservable[\"last\"] = last;\n      }\n    }\n  }\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    let result = this.observableQueryFields() as QueryResult<TData, TVariables>;\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true,\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = (\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable?.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable?.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable?.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import '../../../utilities/globals';\n\nimport { useContext, useEffect, useReducer, useRef } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport {\n  QueryHookOptions,\n  QueryDataOptions,\n  QueryTuple,\n  QueryResult,\n} from '../../types/types';\nimport { QueryData } from '../../data';\nimport { useDeepMemo } from './useDeepMemo';\nimport { OperationVariables } from '../../../core';\nimport { getApolloContext } from '../../context';\nimport { useAfterFastRefresh } from './useAfterFastRefresh';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer(x => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData = queryDataRef.current || (\n    queryDataRef.current = new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryDataOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask. In case the\n          // component gets unmounted before this callback fires, we re-check\n          // queryDataRef.current.isMounted before calling forceUpdate().\n          Promise.resolve().then(() => queryDataRef.current && queryDataRef.current.isMounted && forceUpdate());\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      }\n    })\n  );\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: {\n      ...updatedOptions,\n      onError: void 0,\n      onCompleted: void 0\n    } as QueryHookOptions<TData, TVariables>,\n    context,\n    tick\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  if (__DEV__) {\n    // ensure we run an update after refreshing so that we reinitialize\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(() => {\n    return () => {\n      queryData.cleanup();\n      // this effect can run multiple times during a fast-refresh\n      // so make sure we clean up the ref\n      queryDataRef.current = void 0;\n    }\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n    queryData.currentObservable,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import '../../../utilities/globals';\nimport { useEffect, useRef } from \"react\";\n\n/**\n * This hook allows running a function only immediately after a react\n * fast refresh or live reload.\n *\n * Useful in order to ensure that we can reinitialize things that have been\n * disposed by cleanup functions in `useEffect`.\n * @param effectFn a function to run immediately after a fast refresh\n */\nexport function useAfterFastRefresh(effectFn: () => unknown) {\n  if (__DEV__) {\n    const didRefresh = useRef(false);\n    useEffect(() => {\n      return () => {\n        // Detect fast refresh, only runs multiple times in fast refresh\n        didRefresh.current = true;\n      };\n    }, []);\n\n    useEffect(() => {\n      if (didRefresh.current === true) {\n        // This block only runs after a fast refresh\n        didRefresh.current = false;\n        effectFn();\n      }\n    }, [])\n  }\n}\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { QueryHookOptions, QueryResult } from '../types/types';\nimport { useBaseQuery } from './utils/useBaseQuery';\nimport { OperationVariables } from '../../core';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { LazyQueryHookOptions, QueryTuple } from '../types/types';\nimport { useBaseQuery } from './utils/useBaseQuery';\nimport { OperationVariables } from '../../core';\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, true) as QueryTuple<\n    TData,\n    TVariables\n  >;\n}\n","import { equal } from '@wry/equality';\n\nimport { DocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport {\n  MutationDataOptions,\n  MutationTuple,\n  MutationFunctionOptions,\n  MutationResult,\n} from '../types/types';\nimport { OperationData } from './OperationData';\nimport { MutationOptions, mergeOptions, ApolloCache, OperationVariables, DefaultContext } from '../../core';\nimport { FetchResult } from '../../link/core';\n\ntype MutationResultWithoutClient<TData = any> = Omit<MutationResult<TData>, 'client'>;\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n> extends OperationData<MutationDataOptions<TData, TVariables, TContext, TCache>> {\n  private mostRecentMutationId: number;\n  private result: MutationResultWithoutClient<TData>;\n  private previousResult?: MutationResultWithoutClient<TData>;\n  private setResult: (result: MutationResultWithoutClient<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationDataOptions<TData, TVariables, TContext, TCache>;\n    context: any;\n    result: MutationResultWithoutClient<TData>;\n    setResult: (result: MutationResultWithoutClient<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResultWithoutClient<TData>): MutationTuple<TData, TVariables, TContext, TCache> {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [\n      this.runMutation,\n      { ...result, client: this.refreshClient().client }\n    ] as MutationTuple<TData, TVariables, TContext, TCache>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {} as MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: FetchResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        const { onError } = this.getOptions();\n        this.onMutationError(error, mutationId);\n        if (onError) {\n          onError(error);\n          return {\n            data: undefined,\n            errors: error,\n          };\n        } else {\n          throw error;\n        }\n      });\n  };\n\n  private mutate(\n    options: MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) {\n    return this.refreshClient().client.mutate(\n      mergeOptions(\n        this.getOptions(),\n        options as MutationOptions<TData, TVariables, TContext>,\n      ),\n    );\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: FetchResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResultWithoutClient<TData>): MutationResultWithoutClient<TData> | undefined {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !equal(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n      return result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { MutationHookOptions, MutationTuple } from '../types/types';\nimport { MutationData } from '../data';\nimport { ApolloCache, DefaultContext, OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables, TContext>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables, TContext>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > :not(:first-child)': {\n      marginLeft: 8\n    }\n  }\n};\nvar CardActions = /*#__PURE__*/React.forwardRef(function CardActions(props, ref) {\n  var _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"disableSpacing\", \"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActions'\n})(CardActions);","import React from \"react\";\nimport {\n  Typography,\n  Card,\n  CardActions,\n  CardContent,\n  Container,\n} from \"@material-ui/core\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport {\n  useSignupMutation,\n  useCheckEmailExistLazyQuery,\n} from \"../../generated/graphqlHooks\";\nimport { ButtonLoading } from \"../../components/Form\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSnackbar } from \"notistack\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { TextField } from \"formik-material-ui\";\nimport {\n  USER_NAME_MAX_LENGTH,\n  USER_EMAIL_MAX_LENGTH,\n  USER_PASSWORD_MAX_LENGTH,\n} from \"askent-common/src/constant\";\nimport { useToken } from \"../../hooks\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    signupBox: {\n      height: \"100vh\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n    },\n    card: {\n      padding: theme.spacing(2),\n    },\n  })\n);\n\nconst Signup: React.FC = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const { formatMessage } = useIntl();\n  const [signupMutation, { loading }] = useSignupMutation();\n  const [\n    checkEmailExistLazyQuery,\n    { data: checkEmailData, loading: checkEmailLoading },\n  ] = useCheckEmailExistLazyQuery();\n  const { token } = useToken();\n\n  React.useEffect(() => {\n    if (token) {\n      history.replace(\"/admin\");\n    }\n  });\n\n  return (\n    <Container className={classes.signupBox} maxWidth=\"xs\">\n      <Typography variant=\"h4\" align=\"center\" gutterBottom>\n        <FormattedMessage id=\"Sign_up\" defaultMessage=\"Sign up\" />\n      </Typography>\n      <Formik\n        initialValues={{\n          name: \"\",\n          email: \"\",\n          password: \"\",\n          repeatPassword: \"\",\n        }}\n        validate={async ({ name, email, password, repeatPassword }) => {\n          try {\n            await Yup.object({\n              name: Yup.string()\n                .max(\n                  USER_NAME_MAX_LENGTH,\n                  `Must be ${USER_NAME_MAX_LENGTH} characters or less`\n                )\n                .required(\"Required\"),\n              email: Yup.string()\n                .max(\n                  USER_EMAIL_MAX_LENGTH,\n                  `Must be ${USER_EMAIL_MAX_LENGTH} characters or less`\n                )\n                .email(\"Invalid email address\")\n                .required(\"Required\"),\n              password: Yup.string()\n                .max(\n                  USER_PASSWORD_MAX_LENGTH,\n                  `Must be ${USER_PASSWORD_MAX_LENGTH} characters or less`\n                )\n                .required(\"Required\"),\n              repeatPassword: Yup.string()\n                .max(\n                  USER_PASSWORD_MAX_LENGTH,\n                  `Must be ${USER_PASSWORD_MAX_LENGTH} characters or less`\n                )\n                .required(\"Required\"),\n            }).validate({\n              name,\n              email,\n              password,\n              repeatPassword,\n            });\n          } catch (err) {\n            const { path, errors } = err as Yup.ValidationError;\n            console.error(path, errors);\n\n            return { [path as string]: errors[0] };\n          }\n\n          if (password !== repeatPassword) {\n            return { repeatPassword: \"Not same\" };\n          }\n\n          await checkEmailExistLazyQuery({\n            variables: {\n              email,\n            },\n          });\n          if (checkEmailData?.checkEmailExist) {\n            return { email: \"Eamil exist\" };\n          }\n        }}\n        onSubmit={async (values) => {\n          const { data } = await signupMutation({ variables: values });\n\n          if (data) {\n            enqueueSnackbar(\"Sign up success!\", {\n              variant: \"success\",\n            });\n            history.replace(\"/login\");\n          }\n        }}\n      >\n        <Form>\n          <Card className={classes.card}>\n            <CardContent>\n              <Field\n                component={TextField}\n                autoFocus\n                id=\"name\"\n                name=\"name\"\n                fullWidth\n                label={formatMessage({\n                  id: \"User_name\",\n                  defaultMessage: \"User name\",\n                })}\n                margin=\"normal\"\n                disabled={loading}\n              />\n              <Field\n                component={TextField}\n                id=\"email\"\n                name=\"email\"\n                fullWidth\n                label={formatMessage({ id: \"Email\", defaultMessage: \"Email\" })}\n                type=\"email\"\n                margin=\"normal\"\n                disabled={loading}\n              />\n              <Field\n                component={TextField}\n                id=\"password\"\n                name=\"password\"\n                fullWidth\n                label={formatMessage({\n                  id: \"Password\",\n                  defaultMessage: \"Password\",\n                })}\n                type=\"password\"\n                margin=\"normal\"\n                disabled={loading}\n              />\n              <Field\n                component={TextField}\n                id=\"repeatPassword\"\n                name=\"repeatPassword\"\n                fullWidth\n                label={formatMessage({\n                  id: \"Password_repeat\",\n                  defaultMessage: \"Password repeat\",\n                })}\n                type=\"password\"\n                margin=\"normal\"\n                disabled={loading}\n              />\n            </CardContent>\n            <CardActions>\n              <ButtonLoading\n                fullWidth\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                loading={loading || checkEmailLoading}\n                disabled={loading || checkEmailLoading}\n              >\n                <FormattedMessage\n                  id=\"CREATE_ACCOUNT\"\n                  defaultMessage=\"Create account\"\n                />\n              </ButtonLoading>\n            </CardActions>\n          </Card>\n        </Form>\n      </Formik>\n    </Container>\n  );\n};\n\nexport default Signup;\n"],"sourceRoot":""}