{"version":3,"sources":["../../../../src/react/parser/index.ts","../../../../src/react/data/OperationData.ts","../../../../src/react/data/QueryData.ts","../../../../../src/react/hooks/utils/useBaseQuery.ts","../../../../../src/react/hooks/utils/useDeepMemo.ts","../../../../../src/react/hooks/utils/useAfterFastRefresh.ts","../../../../src/react/hooks/useQuery.ts","../../../../src/react/hooks/useLazyQuery.ts","../../../../src/react/data/MutationData.ts","../../../../src/react/hooks/useMutation.ts","../../../node_modules/@material-ui/core/esm/Button/Button.js"],"names":["DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","parser","document","variables","cached","get","fragments","definitions","filter","x","kind","queries","operation","mutations","subscriptions","length","definition","options","context","isMounted","previousOptions","this","getOptions","setOptions","newOptions","storePrevious","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","requiredOperationName","usedOperationName","onNewData","runLazy","previous","Object","create","runLazyQuery","lazyOptions","obsRefetch","currentObservable","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","query","removeQuerySubscription","removeObservable","updateObservableQuery","getExecuteSsrResult","getExecuteResult","executeLazy","loading","networkStatus","ready","called","data","undefined","fetchData","ssr","Promise","resolve","startQuerySubscription","afterExecute","lazy","ssrInitiated","handleErrorOrCompleted","bind","result","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","displayName","fetchPolicy","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","currentSubscription","subscribe","next","previousResult","error","resubscribeToQuery","hasOwnProperty","last","resetLastResults","currentResult","getCurrentResult","partial","errors","graphQLErrors","assign","getLastResult","keys","previousData","resetQueryStoreErrors","onCompleted","onError","unsubscribe","andDelete","useBaseQuery","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","then","memoFn","key","ref","value","useDeepMemo","queryResult","__DEV__","useAfterFastRefresh","effectFn","useQuery","useLazyQuery","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","onMutationError","mutation","mostRecentMutationId","ignoreResults","updateResult","isMostRecentMutation","OperationData","useMutation","mutationDataRef","mutationData","Button","React","props","classes","className","_props$color","color","_props$component","component","_props$disabled","disabled","_props$disableElevati","disableElevation","_props$disableFocusRi","disableFocusRipple","endIconProp","endIcon","focusVisibleClassName","_props$fullWidth","fullWidth","_props$size","size","startIconProp","startIcon","_props$type","_props$variant","variant","other","_objectWithoutProperties","clsx","concat","capitalize","ButtonBase","_extends","root","colorInherit","focusRipple","focusVisible","label","withStyles","theme","typography","button","boxSizing","minWidth","padding","borderRadius","shape","palette","text","primary","transition","transitions","duration","short","textDecoration","backgroundColor","alpha","action","hoverOpacity","width","display","alignItems","justifyContent","textPrimary","main","textSecondary","secondary","outlined","border","disabledBackground","outlinedPrimary","outlinedSecondary","contained","getContrastText","grey","boxShadow","shadows","A100","containedPrimary","contrastText","dark","containedSecondary","borderColor","textSizeSmall","fontSize","pxToRem","textSizeLarge","outlinedSizeSmall","outlinedSizeLarge","containedSizeSmall","containedSizeLarge","sizeSmall","sizeLarge","marginRight","marginLeft","iconSizeSmall","iconSizeMedium","iconSizeLarge"],"mappings":"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","file":"static/js/22.98efcb74.chunk.js","sourcesContent":["import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n","import { invariant } from '../../utilities/globals';\n\nimport { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport { ApolloClient } from '../../core';\nimport { DocumentType, parser, operationName } from '../parser';\nimport { CommonOptions } from '../types/types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: any = {};\n  public client: ApolloClient<object>;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: any) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode,\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\ntype ObservableQueryOptions<TData, TVars> =\n  ReturnType<QueryData<TData, TVars>[\"prepareObservableQueryOptions\"]>;\n\nexport class QueryData<TData, TVariables> extends OperationData<\n  QueryDataOptions<TData, TVariables>\n> {\n  public onNewData: () => void;\n  public currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: ObservableQueryOptions<TData, TVariables>;\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n    const options = this.getOptions();\n    if (this.currentObservable && !this.ssrInitiated()) {\n      this.startQuerySubscription();\n    }\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = options;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      } as TVariables;\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      const result = this.getExecuteResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises!.addQueryPromise(this, () => null);\n      }\n      return result;\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: void 0,\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: void 0,\n    };\n\n    if (this.getOptions().skip) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      return;\n    }\n\n    if (\n      !equal(newObservableQueryOptions, this.previous.observableQueryOptions)\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const last = currentObservable[\"last\"];\n      try {\n        currentObservable.resetLastResults();\n        this.startQuerySubscription();\n      } finally {\n        currentObservable[\"last\"] = last;\n      }\n    }\n  }\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    let result = this.observableQueryFields() as QueryResult<TData, TVariables>;\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true,\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = (\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable?.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable?.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable?.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import '../../../utilities/globals';\n\nimport { useContext, useEffect, useReducer, useRef } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport {\n  QueryHookOptions,\n  QueryDataOptions,\n  QueryTuple,\n  QueryResult,\n} from '../../types/types';\nimport { QueryData } from '../../data';\nimport { useDeepMemo } from './useDeepMemo';\nimport { OperationVariables } from '../../../core';\nimport { getApolloContext } from '../../context';\nimport { useAfterFastRefresh } from './useAfterFastRefresh';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer(x => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData = queryDataRef.current || (\n    queryDataRef.current = new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryDataOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask. In case the\n          // component gets unmounted before this callback fires, we re-check\n          // queryDataRef.current.isMounted before calling forceUpdate().\n          Promise.resolve().then(() => queryDataRef.current && queryDataRef.current.isMounted && forceUpdate());\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      }\n    })\n  );\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: {\n      ...updatedOptions,\n      onError: void 0,\n      onCompleted: void 0\n    } as QueryHookOptions<TData, TVariables>,\n    context,\n    tick\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  if (__DEV__) {\n    // ensure we run an update after refreshing so that we reinitialize\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(() => {\n    return () => {\n      queryData.cleanup();\n      // this effect can run multiple times during a fast-refresh\n      // so make sure we clean up the ref\n      queryDataRef.current = void 0;\n    }\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n    queryData.currentObservable,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import '../../../utilities/globals';\nimport { useEffect, useRef } from \"react\";\n\n/**\n * This hook allows running a function only immediately after a react\n * fast refresh or live reload.\n *\n * Useful in order to ensure that we can reinitialize things that have been\n * disposed by cleanup functions in `useEffect`.\n * @param effectFn a function to run immediately after a fast refresh\n */\nexport function useAfterFastRefresh(effectFn: () => unknown) {\n  if (__DEV__) {\n    const didRefresh = useRef(false);\n    useEffect(() => {\n      return () => {\n        // Detect fast refresh, only runs multiple times in fast refresh\n        didRefresh.current = true;\n      };\n    }, []);\n\n    useEffect(() => {\n      if (didRefresh.current === true) {\n        // This block only runs after a fast refresh\n        didRefresh.current = false;\n        effectFn();\n      }\n    }, [])\n  }\n}\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { QueryHookOptions, QueryResult } from '../types/types';\nimport { useBaseQuery } from './utils/useBaseQuery';\nimport { OperationVariables } from '../../core';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { LazyQueryHookOptions, QueryTuple } from '../types/types';\nimport { useBaseQuery } from './utils/useBaseQuery';\nimport { OperationVariables } from '../../core';\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, true) as QueryTuple<\n    TData,\n    TVariables\n  >;\n}\n","import { equal } from '@wry/equality';\n\nimport { DocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport {\n  MutationDataOptions,\n  MutationTuple,\n  MutationFunctionOptions,\n  MutationResult,\n} from '../types/types';\nimport { OperationData } from './OperationData';\nimport { MutationOptions, mergeOptions, ApolloCache, OperationVariables, DefaultContext } from '../../core';\nimport { FetchResult } from '../../link/core';\n\ntype MutationResultWithoutClient<TData = any> = Omit<MutationResult<TData>, 'client'>;\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n> extends OperationData<MutationDataOptions<TData, TVariables, TContext, TCache>> {\n  private mostRecentMutationId: number;\n  private result: MutationResultWithoutClient<TData>;\n  private previousResult?: MutationResultWithoutClient<TData>;\n  private setResult: (result: MutationResultWithoutClient<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationDataOptions<TData, TVariables, TContext, TCache>;\n    context: any;\n    result: MutationResultWithoutClient<TData>;\n    setResult: (result: MutationResultWithoutClient<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResultWithoutClient<TData>): MutationTuple<TData, TVariables, TContext, TCache> {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [\n      this.runMutation,\n      { ...result, client: this.refreshClient().client }\n    ] as MutationTuple<TData, TVariables, TContext, TCache>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {} as MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: FetchResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        const { onError } = this.getOptions();\n        this.onMutationError(error, mutationId);\n        if (onError) {\n          onError(error);\n          return {\n            data: undefined,\n            errors: error,\n          };\n        } else {\n          throw error;\n        }\n      });\n  };\n\n  private mutate(\n    options: MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) {\n    return this.refreshClient().client.mutate(\n      mergeOptions(\n        this.getOptions(),\n        options as MutationOptions<TData, TVariables, TContext>,\n      ),\n    );\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: FetchResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResultWithoutClient<TData>): MutationResultWithoutClient<TData> | undefined {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !equal(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n      return result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { MutationHookOptions, MutationTuple } from '../types/types';\nimport { MutationData } from '../data';\nimport { ApolloCache, DefaultContext, OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables, TContext>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables, TContext>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport { alpha } from '../styles/colorManipulator';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.button, {\n      boxSizing: 'border-box',\n      minWidth: 64,\n      padding: '6px 16px',\n      borderRadius: theme.shape.borderRadius,\n      color: theme.palette.text.primary,\n      transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {\n        duration: theme.transitions.duration.short\n      }),\n      '&:hover': {\n        textDecoration: 'none',\n        backgroundColor: alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        },\n        '&$disabled': {\n          backgroundColor: 'transparent'\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }),\n\n    /* Styles applied to the span element that wraps the children. */\n    label: {\n      width: '100%',\n      // Ensure the correct width for iOS Safari\n      display: 'inherit',\n      alignItems: 'inherit',\n      justifyContent: 'inherit'\n    },\n\n    /* Styles applied to the root element if `variant=\"text\"`. */\n    text: {\n      padding: '6px 8px'\n    },\n\n    /* Styles applied to the root element if `variant=\"text\"` and `color=\"primary\"`. */\n    textPrimary: {\n      color: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"text\"` and `color=\"secondary\"`. */\n    textSecondary: {\n      color: theme.palette.secondary.main,\n      '&:hover': {\n        backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: {\n      padding: '5px 15px',\n      border: \"1px solid \".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),\n      '&$disabled': {\n        border: \"1px solid \".concat(theme.palette.action.disabledBackground)\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`. */\n    outlinedPrimary: {\n      color: theme.palette.primary.main,\n      border: \"1px solid \".concat(alpha(theme.palette.primary.main, 0.5)),\n      '&:hover': {\n        border: \"1px solid \".concat(theme.palette.primary.main),\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`. */\n    outlinedSecondary: {\n      color: theme.palette.secondary.main,\n      border: \"1px solid \".concat(alpha(theme.palette.secondary.main, 0.5)),\n      '&:hover': {\n        border: \"1px solid \".concat(theme.palette.secondary.main),\n        backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      },\n      '&$disabled': {\n        border: \"1px solid \".concat(theme.palette.action.disabled)\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"contained\"`. */\n    contained: {\n      color: theme.palette.getContrastText(theme.palette.grey[300]),\n      backgroundColor: theme.palette.grey[300],\n      boxShadow: theme.shadows[2],\n      '&:hover': {\n        backgroundColor: theme.palette.grey.A100,\n        boxShadow: theme.shadows[4],\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          boxShadow: theme.shadows[2],\n          backgroundColor: theme.palette.grey[300]\n        },\n        '&$disabled': {\n          backgroundColor: theme.palette.action.disabledBackground\n        }\n      },\n      '&$focusVisible': {\n        boxShadow: theme.shadows[6]\n      },\n      '&:active': {\n        boxShadow: theme.shadows[8]\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled,\n        boxShadow: theme.shadows[0],\n        backgroundColor: theme.palette.action.disabledBackground\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"contained\"` and `color=\"primary\"`. */\n    containedPrimary: {\n      color: theme.palette.primary.contrastText,\n      backgroundColor: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.primary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.primary.main\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"contained\"` and `color=\"secondary\"`. */\n    containedSecondary: {\n      color: theme.palette.secondary.contrastText,\n      backgroundColor: theme.palette.secondary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.secondary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.secondary.main\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `disableElevation={true}`. */\n    disableElevation: {\n      boxShadow: 'none',\n      '&:hover': {\n        boxShadow: 'none'\n      },\n      '&$focusVisible': {\n        boxShadow: 'none'\n      },\n      '&:active': {\n        boxShadow: 'none'\n      },\n      '&$disabled': {\n        boxShadow: 'none'\n      }\n    },\n\n    /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */\n    focusVisible: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit',\n      borderColor: 'currentColor'\n    },\n\n    /* Styles applied to the root element if `size=\"small\"` and `variant=\"text\"`. */\n    textSizeSmall: {\n      padding: '4px 5px',\n      fontSize: theme.typography.pxToRem(13)\n    },\n\n    /* Styles applied to the root element if `size=\"large\"` and `variant=\"text\"`. */\n    textSizeLarge: {\n      padding: '8px 11px',\n      fontSize: theme.typography.pxToRem(15)\n    },\n\n    /* Styles applied to the root element if `size=\"small\"` and `variant=\"outlined\"`. */\n    outlinedSizeSmall: {\n      padding: '3px 9px',\n      fontSize: theme.typography.pxToRem(13)\n    },\n\n    /* Styles applied to the root element if `size=\"large\"` and `variant=\"outlined\"`. */\n    outlinedSizeLarge: {\n      padding: '7px 21px',\n      fontSize: theme.typography.pxToRem(15)\n    },\n\n    /* Styles applied to the root element if `size=\"small\"` and `variant=\"contained\"`. */\n    containedSizeSmall: {\n      padding: '4px 10px',\n      fontSize: theme.typography.pxToRem(13)\n    },\n\n    /* Styles applied to the root element if `size=\"large\"` and `variant=\"contained\"`. */\n    containedSizeLarge: {\n      padding: '8px 22px',\n      fontSize: theme.typography.pxToRem(15)\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {},\n\n    /* Styles applied to the root element if `size=\"large\"`. */\n    sizeLarge: {},\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%'\n    },\n\n    /* Styles applied to the startIcon element if supplied. */\n    startIcon: {\n      display: 'inherit',\n      marginRight: 8,\n      marginLeft: -4,\n      '&$iconSizeSmall': {\n        marginLeft: -2\n      }\n    },\n\n    /* Styles applied to the endIcon element if supplied. */\n    endIcon: {\n      display: 'inherit',\n      marginRight: -4,\n      marginLeft: 8,\n      '&$iconSizeSmall': {\n        marginRight: -2\n      }\n    },\n\n    /* Styles applied to the icon element if supplied and `size=\"small\"`. */\n    iconSizeSmall: {\n      '& > *:first-child': {\n        fontSize: 18\n      }\n    },\n\n    /* Styles applied to the icon element if supplied and `size=\"medium\"`. */\n    iconSizeMedium: {\n      '& > *:first-child': {\n        fontSize: 20\n      }\n    },\n\n    /* Styles applied to the icon element if supplied and `size=\"large\"`. */\n    iconSizeLarge: {\n      '& > *:first-child': {\n        fontSize: 22\n      }\n    }\n  };\n};\nvar Button = /*#__PURE__*/React.forwardRef(function Button(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'button' : _props$component,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableElevati = props.disableElevation,\n      disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      endIconProp = props.endIcon,\n      focusVisibleClassName = props.focusVisibleClassName,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      startIconProp = props.startIcon,\n      _props$type = props.type,\n      type = _props$type === void 0 ? 'button' : _props$type,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'text' : _props$variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"disableElevation\", \"disableFocusRipple\", \"endIcon\", \"focusVisibleClassName\", \"fullWidth\", \"size\", \"startIcon\", \"type\", \"variant\"]);\n\n  var startIcon = startIconProp && /*#__PURE__*/React.createElement(\"span\", {\n    className: clsx(classes.startIcon, classes[\"iconSize\".concat(capitalize(size))])\n  }, startIconProp);\n  var endIcon = endIconProp && /*#__PURE__*/React.createElement(\"span\", {\n    className: clsx(classes.endIcon, classes[\"iconSize\".concat(capitalize(size))])\n  }, endIconProp);\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, classes[variant], className, color === 'inherit' ? classes.colorInherit : color !== 'default' && classes[\"\".concat(variant).concat(capitalize(color))], size !== 'medium' && [classes[\"\".concat(variant, \"Size\").concat(capitalize(size))], classes[\"size\".concat(capitalize(size))]], disableElevation && classes.disableElevation, disabled && classes.disabled, fullWidth && classes.fullWidth),\n    component: component,\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),\n    ref: ref,\n    type: type\n  }, other), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.label\n  }, startIcon, children, endIcon));\n});\nprocess.env.NODE_ENV !== \"production\" ? Button.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, no elevation is used.\n   */\n  disableElevation: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `focusVisibleClassName`.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * Element placed after the children.\n   */\n  endIcon: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The URL to link to when the button is clicked.\n   * If defined, an `a` element will be used as the root node.\n   */\n  href: PropTypes.string,\n\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   */\n  size: PropTypes.oneOf(['large', 'medium', 'small']),\n\n  /**\n   * Element placed before the children.\n   */\n  startIcon: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  type: PropTypes.oneOfType([PropTypes.oneOf(['button', 'reset', 'submit']), PropTypes.string]),\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['contained', 'outlined', 'text'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiButton'\n})(Button);"],"sourceRoot":""}