{"version":3,"sources":["hooks/useFingerprint.ts","hooks/useToken.ts","hooks/useMouseMove.ts","components/PrivateRoute/index.tsx","graphql/resolvers.ts","config.ts","graphql/createLink.ts","graphql/createApolloClient.ts","graphql/createCache.ts","components/Providers/MainProvider.tsx","components/Providers/WallThemeProvider.tsx","routes/index.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Loading/index.tsx","constant.ts"],"names":["useFingerprint","useState","fingerprint","setFingerprint","useEffect","a","FingerprintJS","load","fp","get","result","visitorId","useToken","React","localStorage","getItem","LOCAL_STORAGE_KEY","AUTH_TOKEN","token","setTokenState","client","useApolloClient","setToken","setItem","removeToken","removeItem","resetStore","useMouseMove","timeout","mouseEvent","setMouseMove","mouseStop","setMouseStop","timer","handleMouseMove","event","window","clearTimeout","setTimeout","addEventListener","removeEventListener","PrivateRoute","children","rest","render","location","to","pathname","state","from","typeDefs","gql","resolvers","Mutation","packageInfo","parent","args","ctx","console","log","config","apiUri","hasuraUri","hasuraWsUri","getAuthToken","authMiddleware","setContext","operation","headers","Authorization","apiLink","HttpLink","uri","hasuraLink","hasuraWsLink","WebSocketLink","options","reconnect","connectionParams","httpLinks","split","getContext","clientName","cache","InMemoryCache","typePolicies","Query","fields","eventsByMe","keyArgs","merge","existing","incoming","readField","list","R","b","link","onError","graphQLErrors","networkError","length","map","message","locations","path","warn","RetryLink","query","definition","getMainDefinition","kind","apolloClient","ApolloClient","queryDeduplication","connectToDevTools","theme","createTheme","messages","zh","CREATE_EVENT","en","localeMap","enLocale","zhLocale","MainProvider","props","locale","ApolloProvider","err","ThemeProvider","CssBaseline","utils","DateFnsUtils","WallThemeProvider","defaultTheme","useTheme","setTheme","onResize","palette","type","typography","htmlFontSize","document","documentElement","clientWidth","HomeComponent","loadable","fallback","Loading","LoginComponent","SignupComponent","AdminComponent","EventComponent","AboutComponent","DemoComponent","Error401Component","Error404Component","Router","exact","component","App","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","QuestionFilter","QuestionOrder"],"mappings":"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","file":"static/js/main.36b5e29b.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport FingerprintJS from \"@fingerprintjs/fingerprintjs\";\n\nexport function useFingerprint() {\n  const [fingerprint, setFingerprint] = useState<string>(\"\");\n\n  useEffect(() => {\n    (async () => {\n      // We recommend to call `load` at application startup.\n      const fp = await FingerprintJS.load();\n\n      // The FingerprintJS agent is ready.\n      // Get a visitor identifier when you'd like to.\n      const result = await fp.get();\n\n      // This is the visitor identifier:\n      const visitorId = result.visitorId;\n      setFingerprint(visitorId);\n    })();\n  }, []);\n\n  return fingerprint;\n}\n","import React from \"react\";\nimport { LOCAL_STORAGE_KEY } from \"../constant\";\nimport { useApolloClient } from \"@apollo/client\";\n\nexport function useToken() {\n  const [token, setTokenState] = React.useState<string>(\n    localStorage.getItem(LOCAL_STORAGE_KEY.AUTH_TOKEN) || \"\"\n  );\n  const client = useApolloClient();\n\n  function setToken(token: string) {\n    setTokenState(token);\n    localStorage.setItem(LOCAL_STORAGE_KEY.AUTH_TOKEN, token);\n  }\n\n  function removeToken() {\n    setTokenState(\"\");\n    localStorage.removeItem(LOCAL_STORAGE_KEY.AUTH_TOKEN);\n    client.resetStore();\n  }\n\n  return { token, setToken, removeToken };\n}\n","import { useState, useEffect } from \"react\";\n\nexport function useMouseMove(timeout: number = 2000) {\n  const [mouseEvent, setMouseMove] = useState<MouseEvent | null>(null);\n  const [mouseStop, setMouseStop] = useState<boolean>(true);\n  let timer: number | null = null;\n\n  const handleMouseMove = (event: MouseEvent) => {\n    setMouseMove(event);\n    setMouseStop(false);\n\n    if (timer !== null) {\n      window.clearTimeout(timer);\n    }\n    timer = window.setTimeout(() => {\n      timer = null;\n      setMouseStop(true);\n    }, timeout);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", handleMouseMove);\n\n    return () => {\n      if (timer !== null) {\n        window.clearTimeout(timer);\n      }\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return { mouseEvent, mouseStop };\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { RouteProps } from \"react-router\";\nimport { useToken } from \"../../hooks\";\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nconst PrivateRoute: React.FC<RouteProps> = ({ children, ...rest }) => {\n  const { token } = useToken();\n\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        token ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/unauthorized\",\n              state: { from: location }\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import gql from \"graphql-tag\";\nimport { Resolvers } from \"@apollo/client/core\";\n\nexport const typeDefs = gql`\n  type PackageInfo {\n    version: String!\n    description: String!\n  }\n\n  extend type Query {\n    packageInfo: PackageInfo!\n  }\n  extend type Mutation {\n    packageInfo(version: String, description: String): PackageInfo!\n  }\n`;\n\nexport const resolvers: Resolvers = {\n  Mutation: {\n    packageInfo: (parent, args, ctx) => {\n      console.log(args);\n      return args;\n    }\n  }\n};\n","const config = {\n  apiUri: \"https://askent-server.berlinchan.com:48444/graphql\",\n  hasuraUri: \"https://hasura.berlinchan.com:48444/v1/graphql\",\n  hasuraWsUri: \"wss://hasura.berlinchan.com:48444/v1/graphql\",\n};\n\nexport default config;\n","import { from, split, HttpLink } from \"@apollo/client\";\nimport { RetryLink } from \"@apollo/client/link/retry\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport config from \"../config\";\nimport { LOCAL_STORAGE_KEY } from \"../constant\";\n\n// Restore cache defaults to make the same one in server.js. Ref: https://github.com/kriasoft/react-starter-kit/blob/feature/apollo-pure/src/core/createApolloClient/createApolloClient.client.ts\nconst getAuthToken = () =>\n  localStorage.getItem(LOCAL_STORAGE_KEY.AUTH_TOKEN)\n    ? `Bearer ${localStorage.getItem(LOCAL_STORAGE_KEY.AUTH_TOKEN)}`\n    : \"\";\n\nconst authMiddleware = setContext((operation, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      Authorization: getAuthToken(),\n    },\n  };\n});\n\ntype ConnectionParamsType = {\n  Authorization?: string;\n};\nconst apiLink = new HttpLink({\n  uri: config.apiUri,\n});\nconst hasuraLink = new HttpLink({\n  uri: config.hasuraUri,\n});\nconst hasuraWsLink = new WebSocketLink({\n  uri: config.hasuraWsUri,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      headers: {\n        Authorization: getAuthToken(),\n      },\n    } as ConnectionParamsType,\n  },\n});\n\nconst httpLinks = split(\n  (operation) => operation.getContext().clientName === \"hasura\",\n  hasuraLink,\n  apiLink\n);\n\nexport default function createLink() {\n  return from([\n    // TODO: apollo error handling, ref: https://github.com/kriasoft/react-starter-kit/blob/feature/apollo-pure/src/core/createApolloClient/createApolloClient.client.ts\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors?.length) {\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.warn(\n            `[GraphQL error]: Message: ${message}, Path: ${path}, Location:`,\n            locations\n          )\n        );\n        // switch (graphQLErrors[0].message) {\n        //   case \"Not Authorised!\":\n        //     window.location.href = \"/unauthorized\";\n        //     break;\n        //   default:\n        // }\n      }\n      if (networkError) console.warn(\"[Network error]:\", networkError);\n    }),\n    authMiddleware,\n    new RetryLink(),\n    // using the ability to split links, you can send data to each link\n    // depending on what kind of operation is being sent\n    split(\n      // split based on operation type\n      ({ query }) => {\n        const definition = getMainDefinition(query);\n        return (\n          definition.kind === \"OperationDefinition\" &&\n          definition.operation === \"subscription\"\n        );\n      },\n      hasuraWsLink,\n      httpLinks\n    ),\n  ]);\n}\n","import { ApolloClient } from \"@apollo/client\";\nimport { resolvers, typeDefs } from \"./resolvers\";\nimport createCache from \"./createCache\";\nimport createLink from \"./createLink\";\n\nconst cache = createCache();\nconst link = createLink();\n\nexport default function createApolloClient() {\n  return new ApolloClient({\n    cache,\n    link,\n    typeDefs,\n    resolvers,\n    queryDeduplication: true,\n    connectToDevTools: true,\n  });\n}\n","import * as Apollo from \"@apollo/client\";\nimport * as R from \"ramda\";\nimport {\n  InMemoryCache,\n  FieldFunctionOptions,\n  FieldPolicy,\n} from \"@apollo/client/cache\";\nimport {\n  EventFieldsFragment,\n  EventsByMeQuery,\n  EventsByMeQueryVariables,\n} from \"../generated/graphqlHooks\";\n\nexport default function createCache() {\n  return new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          eventsByMe: {\n            keyArgs: [\"eventOwnerFilter\", \"dateStatusFilter\", \"searchString\"],\n            merge(\n              existing,\n              incoming,\n              {\n                args,\n                readField,\n              }: FieldFunctionOptions<\n                Apollo.QueryHookOptions<\n                  EventsByMeQuery,\n                  EventsByMeQueryVariables\n                >\n              >\n            ) {\n              return {\n                ...incoming,\n                list: [\n                  ...R.differenceWith<EventFieldsFragment>(\n                    (a, b) => readField(\"id\", a) === readField(\"id\", b),\n                    existing?.list || [],\n                    incoming.list\n                  ),\n                  ...incoming.list,\n                ],\n              };\n            },\n          } as FieldPolicy<EventsByMeQuery[\"eventsByMe\"]>,\n        },\n      },\n    },\n  });\n}\n","import React from \"react\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport createApolloClient from \"../../graphql/createApolloClient\";\nimport { createTheme , ThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { SnackbarProvider } from \"notistack\";\nimport { IntlProvider } from \"react-intl\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport enLocale from \"date-fns/locale/en-US\";\nimport zhLocale from \"date-fns/locale/zh-CN\";\n\nconst apolloClient = createApolloClient();\nconst theme = createTheme();\n\n// TODO: refactor i18n and code split, ref: https://github.com/formatjs/react-intl/issues/720\nconst messages = {\n  zh: {\n    CREATE_EVENT: \"创建活动\"\n  },\n  en: {\n    CREATE_EVENT: \"Create Event\"\n  }\n};\n// TODO: DatePicker i18n, ref: https://material-ui-pickers.dev/localization/date-fns\nconst localeMap = {\n  en: enLocale,\n  zh: zhLocale\n};\n\ninterface Props {\n  children: React.ReactElement;\n}\n\nconst MainProvider: React.FC<Props> = props => {\n  // TODO: i18n runtime change, config presist with apollo cache, ref: https://github.com/kriasoft/react-starter-kit/tree/feature/react-intl\n  const locale = \"zh\";\n\n  return (\n    <ApolloProvider client={apolloClient}>\n      <IntlProvider\n        locale={locale}\n        messages={messages[locale]}\n        onError={err => {\n          // TODO: disable all i18n error before translation\n        }}\n      >\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <SnackbarProvider>\n            <MuiPickersUtilsProvider\n              utils={DateFnsUtils}\n              locale={localeMap[locale]}\n            >\n              {props.children}\n            </MuiPickersUtilsProvider>\n          </SnackbarProvider>\n        </ThemeProvider>\n      </IntlProvider>\n    </ApolloProvider>\n  );\n};\n\nexport default MainProvider;\n","import React, { PropsWithChildren } from \"react\";\nimport {\n  ThemeProvider,\n  createTheme,\n  useTheme,\n  Theme,\n} from \"@material-ui/core/styles\";\n\ninterface Props {}\n\nconst WallThemeProvider: React.FC<PropsWithChildren<Props>> = ({\n  children,\n}) => {\n  const defaultTheme = useTheme();\n  const [theme, setTheme] = React.useState<Theme>(defaultTheme);\n\n  const onResize = () => {\n    setTheme(\n      createTheme({\n        palette: {\n          type: \"dark\",\n        },\n        typography: {\n          htmlFontSize:\n            (1280 / window.document.documentElement.clientWidth) * 16,\n        },\n      })\n    );\n  };\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", onResize);\n    return () => window.removeEventListener(\"resize\", onResize);\n  });\n  React.useEffect(() => {\n    onResize();\n  }, []);\n\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n};\n\nexport default WallThemeProvider;\n","import React from \"react\";\nimport loadable from \"@loadable/component\";\nimport PrivateRoute from \"../components/PrivateRoute\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport Loading from \"../components/Loading\";\nimport { MainProvider } from \"../components/Providers\";\n\nconst HomeComponent = loadable(() => import(\"./home\"), {\n  fallback: <Loading />,\n});\nconst LoginComponent = loadable(() => import(\"./login\"), {\n  fallback: <Loading />,\n});\nconst SignupComponent = loadable(() => import(\"./signup\"), {\n  fallback: <Loading />,\n});\nconst AdminComponent = loadable(() => import(\"./admin\"), {\n  fallback: <Loading />,\n});\nconst EventComponent = loadable(() => import(\"./event\"), {\n  fallback: <Loading />,\n});\nconst AboutComponent = loadable(() => import(\"./about\"), {\n  fallback: <Loading />,\n});\nconst DemoComponent = loadable(() => import(\"./demo\"), {\n  fallback: <Loading />,\n});\nconst Error401Component = loadable(() => import(\"./error/401\"), {\n  fallback: <Loading />,\n});\nconst Error404Component = loadable(() => import(\"./error/404\"), {\n  fallback: <Loading />,\n});\n\nconst Router = () => {\n  return (\n    <MainProvider>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={HomeComponent} />\n          <Route path=\"/login\" component={LoginComponent} />\n          <Route path=\"/signup\" component={SignupComponent} />\n\n          <Redirect exact path=\"/admin\" to=\"/admin/events\" />\n          <PrivateRoute path=\"/admin\">\n            <AdminComponent />\n          </PrivateRoute>\n\n          <Redirect exact path=\"/event\" to=\"/\" />\n          <Route path=\"/event/:id\" component={EventComponent} />\n\n          <Route path=\"/about\" component={AboutComponent} />\n          <Route path=\"/demo\" component={DemoComponent} />\n\n          <Route path=\"/unauthorized\" component={Error401Component} />\n          <Route path=\"*\" component={Error404Component} />\n        </Switch>\n      </BrowserRouter>\n    </MainProvider>\n  );\n};\n\nexport default Router;\n","import React from \"react\";\nimport Router from \"./routes\";\n\nconst App: React.FC = () => {\n  return <Router />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Fragment } from \"react\";\n\nconst Loading: React.FC = () => {\n  return <Fragment>Loading...</Fragment>;\n};\n\nexport default Loading;\n","export enum LOCAL_STORAGE_KEY {\n  AUTH_TOKEN = \"AUTH_TOKEN\",\n}\n\nexport enum QuestionFilter {\n  Review = \"Review\",\n  Publish = \"Publish\",\n  Archive = \"Archive\",\n\n  Starred = \"Starred\",\n  // Anwsered = 'Anwsered',\n  // Dismissed = 'Dismissed',\n}\n\nexport enum QuestionOrder {\n  Popular = \"Popular\",\n  Recent = \"Recent\",\n  Oldest = \"Oldest\",\n  Starred = \"Starred\",\n}\n"],"sourceRoot":""}