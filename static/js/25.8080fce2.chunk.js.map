{"version":3,"sources":["components/DialogTitleWithClose/index.tsx","components/EventSettingDialog/CollapseList.tsx","components/EventSettingDialog/TabsPanels/TabPanelGeneral.tsx","components/EventSettingDialog/SwitchItem.tsx","components/EventSettingDialog/TabsPanels/TabPanelFeatures.tsx","components/EventSettingDialog/TabsPanels/TabPanelGuestes.tsx","components/EventSettingDialog/TabsPanels/index.tsx","components/EventSettingDialog/index.tsx","routes/admin/event/PresentModeButton.tsx","routes/admin/event/AdminEventHeader.tsx","routes/admin/event/index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","dialogTitle","display","justifyContent","alignItems","DialogTitleWithClose","title","onClose","classes","disableTypography","className","variant","color","onClick","size","fontSize","collapseList","item","marginBottom","spacing","head","cursor","palette","primary","main","titleText","fontWeight","typography","fontWeightBold","marginLeft","body","paddingLeft","CollapseList","list","defaultActiveKey","React","useState","activeKey","setActiveKey","Box","map","index","e","includes","filter","concat","handleToggle","cloneElement","titleIcon","Typography","Collapse","in","Divider","basicInfoField","width","dateRange","TabPanelGeneral","defaultFocus","eventData","meData","formatMessage","useIntl","eventLinkRef","useRef","showCopies","setShowCopies","isGuestAdmin","eventById","owner","id","me","defaultMessage","component","TextField","fullWidth","autoFocus","name","label","margin","disabled","DateTimePicker","autoOk","disableToolbar","inputRef","InputProps","readOnly","endAdornment","InputAdornment","position","Tooltip","arrow","placement","leaveDelay","IconButton","current","focus","select","copy","value","window","setTimeout","err","console","log","onFocus","switchItem","SwitchItem","description","switchField","TabPanelFeatures","Fragment","Switch","type","removeButton","text","secondary","TabPanelGuestes","eventId","addOpen","setAddOpen","removeId","setRemoveId","useGuestesByEventQuery","variables","data","loading","refetch","useRemoveGuestMutation","removeGuestMutation","removeGuestLoading","handleRemoveClose","handleRemove","a","guestId","Button","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","guestes","row","scope","email","CircularProgress","open","handleClose","submit","Confirm","Boolean","contentText","okText","onCancel","onOk","AddGuestDialog","useCheckEmailExistLazyQuery","checkEmailExistQuery","checkEmailData","checkEmailLoading","useAddGuestMutation","addGuestMutation","addGuestLoading","handleValidate","Yup","max","USER_EMAIL_MAX_LENGTH","required","validate","path","errors","error","checkEmailExist","handleSubmit","Dialog","DialogTitle","initialValues","onSubmit","DialogContent","DialogContentText","DialogActions","style","tabList","TabPanel","props","paper","overflowY","form","flexDirection","overflow","dialogContent","tabs","borderRight","divider","tabRoot","paddingRight","tabWrapper","contentRightBox","height","maxHeight","content","top","left","pointerEvents","background","alpha","bottom","EventSettingDialog","eventIdState","onExiting","enqueueSnackbar","useSnackbar","setEventId","tabIndex","setTabIndex","useEventByIdLazyQuery","eventByIdQuery","eventLoading","useMeLazyQuery","meQuery","meLoading","useCheckEventCodeExistLazyQuery","checkEventCodeExistLazyQuery","checkEventCodeData","checkEventCodeLoading","useUpdateEventMutation","updateEventMutation","updateEventLoading","useEffect","code","startAt","Date","endAt","eventLink","location","origin","moderation","EVENT_NAME_MAX_LENGTH","EVENT_CODE_MAX_LENGTH","checkEventCodeExist","values","input","R","maxWidth","enableReinitialize","Tabs","orientation","onChange","event","newValue","Tab","root","wrapper","StyledMenuItem","withStyles","whiteSpace","MenuItem","StyledListItemIcon","minWidth","ListItemIcon","StyledListItemText","fontWeightMedium","ListItemText","presentModeBtn","marginRight","borderRadius","presentModeIcon","WallComponent","loadable","fallback","Loading","PresentModeButton","useParams","popupState","usePopupState","popupId","_screenfull","screenfull","fullscreenWallRef","fullscreen","setFullscreen","isEnabled","on","handleFullscreenChange","off","isFullscreen","menuItemList","icon","handleClick","request","disableElevation","bindHover","bindMenu","keepMounted","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","dense","Grid","innerRef","toolbarLeft","toolbarCenter","toolbarRight","openSettingText","tabAndActionBox","AdminEventHeader","eventDetailData","history","useHistory","url","useRouteMatch","eventSettingState","eventSettingDefaultFocus","setEventSettingDefaultFocus","handleOpenSetting","AppBar","elevation","Container","Toolbar","disableGutters","container","xs","edge","goBack","getEventDateStatus","HeaderAction","hideUserInfo","Paper","square","to","indicatorColor","textColor","QuestionsComponent","PollsComponent","AnalyticsComponent","AdminEvent","setEventDetailData","useEventDetailLiveQuerySubscription","where","_eq","onSubscriptionData","client","subscriptionData","length","Layout","header","exact","PrivateRoute"],"mappings":"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","file":"static/js/25.8080fce2.chunk.js","sourcesContent":["import React from \"react\";\nimport { DialogTitle, IconButton, Typography } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    dialogTitle: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n    },\n  })\n);\n\ninterface Props {\n  title: React.ReactElement | string;\n  onClose: () => void;\n}\n\nconst DialogTitleWithClose: React.FC<Props> = ({ title, onClose }) => {\n  const classes = useStyles();\n\n  return (\n    <DialogTitle disableTypography className={classes.dialogTitle}>\n      <Typography variant=\"subtitle1\" color=\"textSecondary\">\n        {title}\n      </Typography>\n      <IconButton onClick={onClose} size=\"small\">\n        <CloseIcon color=\"inherit\" fontSize=\"small\" />\n      </IconButton>\n    </DialogTitle>\n  );\n};\n\nexport default DialogTitleWithClose;\n","import React from \"react\";\nimport { Box, Typography, Divider, Collapse } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    collapseList: {},\n    item: {\n      marginBottom: theme.spacing(2)\n    },\n    head: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      cursor: \"pointer\"\n    },\n    title: {\n      display: \"flex\",\n      alignItems: \"center\",\n      color: theme.palette.primary.main\n    },\n    titleText: {\n      fontWeight: theme.typography.fontWeightBold,\n      marginLeft: theme.spacing(1)\n    },\n    body: { paddingLeft: 32, marginBottom: theme.spacing(2) }\n  })\n);\n\ntype CollapseItem = {\n  titleIcon: React.ReactElement;\n  titleText: React.ReactElement;\n  body: React.ReactElement;\n};\ninterface Props {\n  list: Array<CollapseItem>;\n  defaultActiveKey?: Array<number>;\n}\n\nconst CollapseList: React.FC<Props> = ({ list, defaultActiveKey = [] }) => {\n  const classes = useStyles();\n  const [activeKey, setActiveKey] = React.useState<Array<number>>(\n    defaultActiveKey\n  );\n\n  const handleToggle = (index: number) => {\n    setActiveKey(\n      activeKey.includes(index)\n        ? activeKey.filter(item => item !== index)\n        : activeKey.concat([index])\n    );\n  };\n\n  return (\n    <Box className={classes.collapseList}>\n      {list.map((item, index) => (\n        <Box className={classes.item} key={index}>\n          <Box className={classes.head} onClick={e => handleToggle(index)}>\n            <div className={classes.title}>\n              {React.cloneElement(item.titleIcon, {\n                color: \"inherit\"\n              })}\n              <Typography\n                variant=\"h6\"\n                color=\"inherit\"\n                className={classes.titleText}\n              >\n                {item.titleText}\n              </Typography>\n            </div>\n            {activeKey.includes(index) ? (\n              <ExpandLessIcon color=\"inherit\" fontSize=\"small\" />\n            ) : (\n              <ExpandMoreIcon color=\"inherit\" fontSize=\"small\" />\n            )}\n          </Box>\n          <Collapse className={classes.body} in={activeKey.includes(index)}>\n            {item.body}\n          </Collapse>\n          <Divider />\n        </Box>\n      ))}\n    </Box>\n  );\n};\n\nexport default CollapseList;\n","import React from \"react\";\nimport { Box, IconButton, InputAdornment, Tooltip } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { Field } from \"formik\";\nimport { TextField } from \"formik-material-ui\";\nimport { DateTimePicker } from \"formik-material-ui-pickers\";\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\nimport SecurityIcon from \"@material-ui/icons/Security\";\nimport CollapseList from \"../CollapseList\";\nimport { EventSettingValues } from \"../index\";\nimport copy from \"copy-to-clipboard\";\nimport { EventByIdQuery, MeQuery } from \"../../../generated/graphqlHooks\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    basicInfoField: { width: \"70%\" },\n    dateRange: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      \"& > *\": { width: \"47%\" },\n    },\n  })\n);\n\ninterface Props {\n  defaultFocus?: keyof EventSettingValues;\n  eventData?: EventByIdQuery;\n  meData?: MeQuery;\n}\n\nconst TabPanelGeneral: React.FC<Props> = ({\n  defaultFocus = \"name\",\n  eventData,\n  meData,\n}) => {\n  const classes = useStyles();\n  const { formatMessage } = useIntl();\n  const eventLinkRef = React.useRef<HTMLInputElement>(null);\n  const [showCopies, setShowCopies] = React.useState(false);\n  const isGuestAdmin = eventData?.eventById.owner.id !== meData?.me.id;\n\n  const handleEventLinkFocus = () => {\n    eventLinkRef.current?.select();\n  };\n  const handleCopyEventLink = () => {\n    eventLinkRef.current?.focus();\n    eventLinkRef.current?.select();\n    try {\n      if (eventLinkRef.current && copy(eventLinkRef.current?.value)) {\n        setShowCopies(true);\n        window.setTimeout(() => setShowCopies(false), 3000);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <CollapseList\n      list={[\n        {\n          titleIcon: <InfoOutlinedIcon />,\n          titleText: (\n            <FormattedMessage\n              id=\"Basic_information\"\n              defaultMessage=\"Basic information\"\n            />\n          ),\n          body: (\n            <Box className={classes.basicInfoField}>\n              <Field\n                component={TextField}\n                fullWidth\n                autoFocus={defaultFocus === \"name\"}\n                name=\"name\"\n                label={formatMessage({\n                  id: \"Event_name\",\n                  defaultMessage: \"Event name\",\n                })}\n                margin=\"normal\"\n                size=\"small\"\n                disabled={isGuestAdmin}\n              />\n              <Box className={classes.dateRange}>\n                <Field\n                  component={DateTimePicker}\n                  autoFocus={defaultFocus === \"startAt\"}\n                  name=\"startAt\"\n                  label={formatMessage({\n                    id: \"Start_datetime\",\n                    defaultMessage: \"Start date time\",\n                  })}\n                  variant=\"inline\"\n                  margin=\"normal\"\n                  size=\"small\"\n                  autoOk\n                  disableToolbar\n                  disabled={isGuestAdmin}\n                  />\n                <Field\n                  component={DateTimePicker}\n                  autoFocus={defaultFocus === \"endAt\"}\n                  name=\"endAt\"\n                  label={formatMessage({\n                    id: \"End_datetime\",\n                    defaultMessage: \"End date time\",\n                  })}\n                  variant=\"inline\"\n                  margin=\"normal\"\n                  size=\"small\"\n                  autoOk\n                  disableToolbar\n                  disabled={isGuestAdmin}\n                />\n              </Box>\n              <Field\n                component={TextField}\n                fullWidth\n                autoFocus={defaultFocus === \"code\"}\n                name=\"code\"\n                label={formatMessage({\n                  id: \"Event_code\",\n                  defaultMessage: \"Event code\",\n                })}\n                margin=\"normal\"\n                size=\"small\"\n                disabled={isGuestAdmin}\n                />\n              <Field\n                component={TextField}\n                inputRef={eventLinkRef}\n                fullWidth\n                autoFocus={defaultFocus === \"eventLink\"}\n                name=\"eventLink\"\n                label={formatMessage({\n                  id: \"Event_link\",\n                  defaultMessage: \"Event link\",\n                })}\n                size=\"small\"\n                InputProps={{\n                  readOnly: true,\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <Tooltip\n                        arrow\n                        placement=\"right\"\n                        leaveDelay={3000}\n                        title={\n                          showCopies\n                            ? formatMessage({\n                                id: \"Copied!\",\n                                defaultMessage: \"Copied!\",\n                              })\n                            : formatMessage({\n                                id: \"Copy to clipboard\",\n                                defaultMessage: \"Copy to clipboard\",\n                              })\n                        }\n                      >\n                        <IconButton size=\"small\" onClick={handleCopyEventLink}>\n                          <FileCopyOutlinedIcon\n                            fontSize=\"inherit\"\n                            color=\"inherit\"\n                          />\n                        </IconButton>\n                      </Tooltip>\n                    </InputAdornment>\n                  ),\n                }}\n                onFocus={handleEventLinkFocus}\n              />\n            </Box>\n          ),\n        },\n        {\n          titleIcon: <SecurityIcon />,\n          titleText: (\n            <FormattedMessage id=\"Security\" defaultMessage=\"Security\" />\n          ),\n          body: <Box></Box>,\n        },\n      ]}\n      defaultActiveKey={[0]}\n    />\n  );\n};\n\nexport default TabPanelGeneral;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    switchItem: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\"\n    }\n  })\n);\n\ninterface Props {\n  label: React.ReactElement;\n  description: React.ReactElement;\n  switchField: React.ReactElement;\n}\n\nconst SwitchItem: React.FC<Props> = ({\n  label,\n  description,\n  switchField\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.switchItem}>\n      <div>\n        <Typography variant=\"body1\">{label}</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {description}\n        </Typography>\n      </div>\n      {switchField}\n    </div>\n  );\n};\n\nexport default SwitchItem;\n","import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Field } from \"formik\";\nimport { Switch } from \"formik-material-ui\";\nimport QuestionAnswerIcon from \"@material-ui/icons/QuestionAnswer\";\nimport CollapseList from \"../CollapseList\";\nimport SwitchItem from \"../SwitchItem\";\n\ninterface Props {}\n\nconst TabPanelFeatures: React.FC<Props> = () => {\n  return (\n    <CollapseList\n      list={[\n        {\n          titleIcon: <QuestionAnswerIcon />,\n          titleText: (\n            <FormattedMessage id=\"Audience_Q&A\" defaultMessage=\"Audience Q&A\" />\n          ),\n          body: (\n            <React.Fragment>\n              <SwitchItem\n                label={\n                  <FormattedMessage\n                    id=\"Moderation\"\n                    defaultMessage=\"Moderation\"\n                  />\n                }\n                description={\n                  <FormattedMessage\n                    id=\"Easily review all questions before they go live.\"\n                    defaultMessage=\"Easily review all questions before they go live.\"\n                  />\n                }\n                switchField={\n                  <Field component={Switch} type=\"checkbox\" name=\"moderation\" />\n                }\n              />\n            </React.Fragment>\n          )\n        }\n      ]}\n    />\n  );\n};\n\nexport default TabPanelFeatures;\n","import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport {\n  Box,\n  IconButton,\n  Button,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { TextField } from \"formik-material-ui\";\nimport * as Yup from \"yup\";\nimport { Formik, Form, Field, FormikErrors, FormikHelpers } from \"formik\";\nimport {\n  useGuestesByEventQuery,\n  useCheckEmailExistLazyQuery,\n  useAddGuestMutation,\n  useRemoveGuestMutation,\n  EventByIdQuery,\n  MeQuery,\n} from \"../../../generated/graphqlHooks\";\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\";\nimport { ButtonLoading } from \"../../Form\";\nimport { USER_EMAIL_MAX_LENGTH } from \"askent-common/src/constant\";\nimport Confirm from \"../../Confirm\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    removeButton: { color: theme.palette.text.secondary },\n  })\n);\n\ninterface Props {\n  eventId: string;\n  eventData?: EventByIdQuery;\n  meData?: MeQuery;\n}\n\nconst TabPanelGuestes: React.FC<Props> = ({ eventId, eventData, meData }) => {\n  const classes = useStyles();\n  const [addOpen, setAddOpen] = React.useState(false);\n  const [removeId, setRemoveId] = React.useState(\"\");\n  const { data, loading, refetch } = useGuestesByEventQuery({\n    variables: { eventId },\n  });\n  const [removeGuestMutation, { loading: removeGuestLoading }] =\n    useRemoveGuestMutation();\n  const isGuestAdmin = eventData?.eventById.owner.id !== meData?.me.id;\n\n  const handleAddDialogOpen = () => {\n    setAddOpen(true);\n  };\n  const handleAddDialogClose = (submit?: boolean) => {\n    submit && refetch();\n    setAddOpen(false);\n  };\n\n  const handleRemoveOpen = (id: string) => {\n    setRemoveId(id);\n  };\n  const handleRemoveClose = () => {\n    setRemoveId(\"\");\n  };\n  const handleRemove = async () => {\n    await removeGuestMutation({\n      variables: { eventId, guestId: removeId },\n    });\n    refetch();\n    handleRemoveClose();\n  };\n\n  return (\n    <React.Fragment>\n      <Box display=\"flex\" justifyContent=\"flex-end\">\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          onClick={handleAddDialogOpen}\n          disabled={isGuestAdmin}\n        >\n          <FormattedMessage id=\"Add guest\" defaultMessage=\"Add guest\" />\n        </Button>\n      </Box>\n\n      <TableContainer>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <FormattedMessage id=\"Name\" defaultMessage=\"Name\" />\n              </TableCell>\n              <TableCell align=\"right\">\n                <FormattedMessage id=\"Email\" defaultMessage=\"Email\" />\n              </TableCell>\n              <TableCell align=\"right\">\n                <FormattedMessage id=\"Actions\" defaultMessage=\"Actions\" />\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data?.eventById.guestes.map((row, index) => (\n              <TableRow key={index}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.name}\n                </TableCell>\n                <TableCell align=\"right\">{row.email}</TableCell>\n                <TableCell align=\"right\">\n                  <IconButton\n                    size=\"small\"\n                    className={classes.removeButton}\n                    onClick={(e) => handleRemoveOpen(row.id)}\n                    disabled={isGuestAdmin}\n                  >\n                    <RemoveCircleOutlineIcon\n                      fontSize=\"inherit\"\n                      color=\"inherit\"\n                    />\n                  </IconButton>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {loading && <CircularProgress />}\n\n      <AddGuestDialog\n        open={addOpen}\n        eventId={eventId}\n        eventData={eventData}\n        handleClose={handleAddDialogClose}\n      />\n      <Confirm\n        open={Boolean(removeId)}\n        loading={removeGuestLoading}\n        contentText={\n          <FormattedMessage\n            id=\"Remove_this_guest?\"\n            defaultMessage=\"Remove this guest?\"\n          />\n        }\n        okText={<FormattedMessage id=\"Remove\" defaultMessage=\"Remove\" />}\n        onCancel={handleRemoveClose}\n        onOk={handleRemove}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default TabPanelGuestes;\n\ninterface AddGuestDialogProps {\n  open: boolean;\n  eventId: string;\n  eventData?: EventByIdQuery;\n  handleClose: (refetch?: boolean) => void;\n}\nconst AddGuestDialog: React.FC<AddGuestDialogProps> = ({\n  open,\n  eventId,\n  eventData,\n  handleClose,\n}) => {\n  const [\n    checkEmailExistQuery,\n    { data: checkEmailData, loading: checkEmailLoading },\n  ] = useCheckEmailExistLazyQuery();\n  const [addGuestMutation, { loading: addGuestLoading }] =\n    useAddGuestMutation();\n\n  const initialValues = { email: \"\" };\n  const handleValidate: (\n    values: typeof initialValues\n  ) => void | object | Promise<FormikErrors<typeof initialValues>> = async ({\n    email,\n  }) => {\n    try {\n      await Yup.object({\n        email: Yup.string().max(USER_EMAIL_MAX_LENGTH).email().required(),\n      }).validate({\n        email,\n      });\n    } catch (err) {\n      const { path, errors } = err as Yup.ValidationError;\n      console.error(path, errors);\n\n      return { [path as string]: errors[0] };\n    }\n\n    if (email === eventData?.eventById.owner.email) {\n      return { email: \"Can't add event owner as guest\" };\n    }\n\n    await checkEmailExistQuery({\n      variables: {\n        email,\n      },\n    });\n    if (!checkEmailData?.checkEmailExist) {\n      return { email: \"User with this eamil does not exist\" };\n    }\n  };\n  const handleSubmit: (\n    values: typeof initialValues,\n    formikHelpers: FormikHelpers<typeof initialValues>\n  ) => void | Promise<any> = async ({ email }) => {\n    await addGuestMutation({ variables: { eventId, email } });\n    handleClose(true);\n  };\n\n  return (\n    <Dialog open={open} onClose={(e) => handleClose()}>\n      <DialogTitle>\n        <FormattedMessage id=\"Add guest\" defaultMessage=\"Add guest\" />\n      </DialogTitle>\n      <Formik\n        initialValues={initialValues}\n        validate={handleValidate}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <DialogContent>\n            <DialogContentText>\n              <FormattedMessage\n                id=\"Add a user as guest administrator, who can cooperating manage this event with you.\"\n                defaultMessage=\"Add a user as guest administrator, who can cooperating manage this event with you.\"\n              />\n            </DialogContentText>\n            <Field\n              component={TextField}\n              autoFocus\n              fullWidth\n              name=\"email\"\n              label={\n                <FormattedMessage id=\"User email\" defaultMessage=\"User email\" />\n              }\n              type=\"email\"\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={(e) => handleClose()}>\n              <FormattedMessage id=\"Cancel\" defaultMessage=\"Cancel\" />\n            </Button>\n            <ButtonLoading\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ width: 100 }}\n              loading={checkEmailLoading || addGuestLoading}\n            >\n              <FormattedMessage id=\"Add\" defaultMessage=\"Add\" />\n            </ButtonLoading>\n          </DialogActions>\n        </Form>\n      </Formik>\n    </Dialog>\n  );\n};\n","import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport TabPanelGeneral from \"./TabPanelGeneral\";\nimport TabPanelFeatures from \"./TabPanelFeatures\";\nimport TabPanelGuestes from \"./TabPanelGuestes\";\nimport { EventSettingValues } from \"../index\";\nimport { EventByIdQuery, MeQuery } from \"../../../generated/graphqlHooks\";\n\nexport const tabList = [\n  <FormattedMessage id=\"General\" defaultMessage=\"General\" />,\n  <FormattedMessage id=\"Guestes\" defaultMessage=\"Guestes\" />,\n  <FormattedMessage id=\"Features\" defaultMessage=\"Features\" />,\n  <FormattedMessage id=\"Customization\" defaultMessage=\"Customization\" />,\n  <FormattedMessage id=\"Integrations\" defaultMessage=\"Integrations\" />,\n  <FormattedMessage id=\"Share_access\" defaultMessage=\"Share access\" />,\n];\n\ninterface Props {\n  index: number;\n  defaultFocus?: keyof EventSettingValues;\n  eventId: string;\n  eventData?: EventByIdQuery;\n  meData?: MeQuery;\n}\n\nexport const TabPanel: React.FC<Props> = ({ index, ...props }) => {\n  const TabPanelList = [\n    <TabPanelGeneral {...props} />,\n    <TabPanelGuestes {...props} />,\n    <TabPanelFeatures {...props} />,\n    <div>Item Customization</div>,\n    <div>Item Integrations</div>,\n    <div>Item Share_access</div>,\n  ];\n\n  return TabPanelList[index];\n};\n","import React from \"react\";\nimport {\n  Box,\n  Tabs,\n  Tab,\n  Button,\n  Dialog,\n  DialogContent,\n  DialogActions,\n} from \"@material-ui/core\";\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  alpha,\n} from \"@material-ui/core/styles\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { Formik, Form, FormikErrors, FormikHelpers } from \"formik\";\nimport * as Yup from \"yup\";\nimport * as R from \"ramda\";\nimport { ButtonLoading } from \"../Form\";\nimport DialogTitleWithClose from \"../DialogTitleWithClose\";\nimport {\n  useCheckEventCodeExistLazyQuery,\n  useEventByIdLazyQuery,\n  useUpdateEventMutation,\n  useMeLazyQuery,\n} from \"../../generated/graphqlHooks\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  EVENT_NAME_MAX_LENGTH,\n  EVENT_CODE_MAX_LENGTH,\n} from \"askent-common/src/constant\";\nimport { tabList, TabPanel } from \"./TabsPanels\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: { overflowY: \"hidden\" },\n    form: { display: \"flex\", flexDirection: \"column\", overflow: \"hidden\" },\n    dialogContent: { display: \"flex\", overflowY: \"hidden\" },\n    tabs: {\n      width: 200,\n      borderRight: `1px solid ${theme.palette.divider}`,\n    },\n    tabRoot: { paddingRight: theme.spacing(2) },\n    tabWrapper: { alignItems: \"flex-end\" },\n    contentRightBox: {\n      width: 680,\n      height: \"100%\",\n      maxHeight: 420,\n      overflowY: \"auto\",\n      marginLeft: theme.spacing(2),\n      paddingLeft: 50,\n      paddingRight: 50,\n      position: \"relative\",\n      \"&:before\": {\n        content: \"' '\",\n        display: \"block\",\n        position: \"sticky\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: 12,\n        pointerEvents: \"none\",\n        background: `linear-gradient(to top, ${alpha(\n          theme.palette.background.paper,\n          0\n        )} 0%, ${theme.palette.background.paper} 100%)`,\n      },\n      \"&:after\": {\n        content: \"' '\",\n        display: \"block\",\n        position: \"sticky\",\n        bottom: 0,\n        left: 0,\n        width: \"100%\",\n        height: 12,\n        pointerEvents: \"none\",\n        background: `linear-gradient(to bottom, ${alpha(\n          theme.palette.background.paper,\n          0\n        )} 0%, ${theme.palette.background.paper} 100%)`,\n      },\n    },\n  })\n);\n\nexport type EventSettingValues = {\n  name: string;\n  code: string;\n  startAt: Date;\n  endAt: Date;\n  eventLink: string;\n  moderation: boolean | undefined | null;\n};\ninterface Props {\n  defaultFocus?: keyof EventSettingValues;\n  eventIdState: [string, React.Dispatch<React.SetStateAction<string>>];\n  onExiting?: (reason: \"save\" | \"cancel\") => void;\n}\n\nconst EventSettingDialog: React.FC<Props> = ({\n  defaultFocus = \"name\",\n  eventIdState,\n  onExiting,\n}) => {\n  const classes = useStyles();\n  const { formatMessage } = useIntl();\n  const { enqueueSnackbar } = useSnackbar();\n  const [eventId, setEventId] = eventIdState;\n  const [tabIndex, setTabIndex] = React.useState(0);\n  const [eventByIdQuery, { data: eventData, loading: eventLoading }] =\n    useEventByIdLazyQuery();\n  const [meQuery, { data: meData, loading: meLoading }] = useMeLazyQuery();\n  const [\n    checkEventCodeExistLazyQuery,\n    { data: checkEventCodeData, loading: checkEventCodeLoading },\n  ] = useCheckEventCodeExistLazyQuery();\n  const [updateEventMutation, { loading: updateEventLoading }] =\n    useUpdateEventMutation();\n\n  React.useEffect(() => {\n    if (eventId) {\n      eventByIdQuery({ variables: { eventId } });\n      meQuery();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [eventId]);\n\n  const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setTabIndex(newValue);\n  };\n  const handleClose = () => {\n    setEventId(\"\");\n    setTabIndex(0);\n    onExiting && onExiting(\"cancel\");\n  };\n\n  const initialValues: EventSettingValues = {\n    name: eventData?.eventById.name || \"\",\n    code: eventData?.eventById.code || \"\",\n    startAt: new Date(eventData?.eventById.startAt),\n    endAt: new Date(eventData?.eventById.endAt),\n    eventLink: `${window.location.origin}/event/${eventData?.eventById.id}`,\n    moderation: eventData?.eventById.moderation,\n  };\n  const handleValidate: (\n    values: EventSettingValues\n  ) => void | object | Promise<FormikErrors<EventSettingValues>> = async ({\n    name,\n    code,\n    startAt,\n    endAt,\n  }) => {\n    try {\n      await Yup.object({\n        name: Yup.string().max(EVENT_NAME_MAX_LENGTH).required(),\n        code: Yup.string().max(EVENT_CODE_MAX_LENGTH).required(),\n        startAt: Yup.date(),\n        endAt: Yup.date(),\n      }).validate({\n        name,\n        code,\n        startAt,\n        endAt,\n      });\n    } catch (err) {\n      const { path, errors } = err as Yup.ValidationError;\n      console.error(path, errors);\n\n      return { [path as string]: errors[0] };\n    }\n\n    if (endAt < startAt) {\n      return {\n        endAt: formatMessage({\n          id: \"End_must_after_start\",\n          defaultMessage: \"End must after start\",\n        }),\n      };\n    }\n\n    if (code !== initialValues.code) {\n      await checkEventCodeExistLazyQuery({ variables: { code } });\n      if (checkEventCodeData?.checkEventCodeExist) {\n        return {\n          code: formatMessage({\n            id: \"Code_existed\",\n            defaultMessage: \"Code existed\",\n          }),\n        };\n      }\n    }\n  };\n  const handleSubmit: (\n    values: EventSettingValues,\n    formikHelpers: FormikHelpers<EventSettingValues>\n  ) => void | Promise<any> = async (values) => {\n    const { data } = await updateEventMutation({\n      variables: {\n        input: R.omit([\"eventLink\"], {\n          eventId,\n          ...values,\n        }),\n      },\n    });\n    if (data) {\n      enqueueSnackbar(\n        formatMessage({\n          id: \"Event_updated\",\n          defaultMessage: \"Event updated\",\n        }),\n        {\n          variant: \"success\",\n        }\n      );\n      handleClose();\n    }\n  };\n\n  return (\n    <Dialog\n      classes={{ paper: classes.paper }}\n      maxWidth=\"lg\"\n      open={Boolean(eventId)}\n      onClose={handleClose}\n    >\n      <DialogTitleWithClose\n        title={\n          <FormattedMessage\n            id=\"Event_settings\"\n            defaultMessage=\"Event settings\"\n          />\n        }\n        onClose={handleClose}\n      />\n\n      <Formik\n        enableReinitialize\n        initialValues={initialValues}\n        validate={handleValidate}\n        onSubmit={handleSubmit}\n      >\n        <Form className={classes.form}>\n          <DialogContent className={classes.dialogContent}>\n            <Tabs\n              orientation=\"vertical\"\n              variant=\"scrollable\"\n              className={classes.tabs}\n              value={tabIndex}\n              onChange={handleTabChange}\n            >\n              {tabList.map((item, index) => (\n                <Tab\n                  classes={{\n                    root: classes.tabRoot,\n                    wrapper: classes.tabWrapper,\n                  }}\n                  key={index}\n                  label={item}\n                />\n              ))}\n            </Tabs>\n            <Box className={classes.contentRightBox}>\n              <TabPanel\n                index={tabIndex}\n                defaultFocus={defaultFocus}\n                eventId={eventId}\n                eventData={eventData}\n                meData={meData}\n              />\n            </Box>\n          </DialogContent>\n\n          <DialogActions>\n            <Button onClick={handleClose}>\n              <FormattedMessage id=\"Cancel\" defaultMessage=\"Cancel\" />\n            </Button>\n            <ButtonLoading\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ width: 100 }}\n              type=\"submit\"\n              loading={\n                eventLoading ||\n                meLoading ||\n                updateEventLoading ||\n                checkEventCodeLoading\n              }\n            >\n              <FormattedMessage id=\"Save\" defaultMessage=\"Save\" />\n            </ButtonLoading>\n          </DialogActions>\n        </Form>\n      </Formik>\n    </Dialog>\n  );\n};\n\nexport default EventSettingDialog;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  createStyles,\n  makeStyles,\n  withStyles,\n  Theme,\n} from \"@material-ui/core/styles\";\nimport {\n  Button,\n  MenuItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n  Grid,\n} from \"@material-ui/core\";\nimport HoverMenu from \"material-ui-popup-state/HoverMenu\";\nimport {\n  usePopupState,\n  bindHover,\n  bindMenu,\n} from \"material-ui-popup-state/hooks\";\nimport { useIntl, FormattedMessage } from \"react-intl\";\nimport { useSnackbar } from \"notistack\";\nimport DvrIcon from \"@material-ui/icons/Dvr\";\nimport FullscreenIcon from \"@material-ui/icons/Fullscreen\";\nimport LaunchIcon from \"@material-ui/icons/Launch\";\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport copy from \"copy-to-clipboard\";\nimport screenfull, { Screenfull } from \"screenfull\";\nimport { WallThemeProvider } from \"../../../components/Providers\";\nimport loadable from \"@loadable/component\";\nimport Loading from \"../../../components/Loading\";\n\nconst StyledMenuItem = withStyles({\n  root: { whiteSpace: \"unset\", width: 280 },\n})(MenuItem);\nconst StyledListItemIcon = withStyles((theme: Theme) =>\n  createStyles({\n    root: { minWidth: 28, color: theme.palette.primary.main, fontSize: 18 },\n  })\n)(ListItemIcon);\nconst StyledListItemText = withStyles((theme: Theme) =>\n  createStyles({\n    primary: {\n      fontSize: 16,\n      fontWeight: theme.typography.fontWeightMedium,\n      color: theme.palette.primary.main,\n    },\n    secondary: {\n      fontSize: 12,\n      color: theme.palette.text.secondary,\n    },\n  })\n)(ListItemText);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    presentModeBtn: {\n      marginRight: theme.spacing(1),\n      borderRadius: theme.spacing(2),\n    },\n    presentModeIcon: {\n      marginRight: theme.spacing(1),\n    },\n  })\n);\n\nconst WallComponent = loadable(() => import(\"../../event/wall\"), {\n  fallback: <Loading />,\n});\n\ninterface Props {}\n\nconst PresentModeButton: React.FC<Props> = () => {\n  const classes = useStyles();\n  const { id } = useParams<{ id: string }>();\n  const { enqueueSnackbar } = useSnackbar();\n  const { formatMessage } = useIntl();\n  const popupState = usePopupState({\n    variant: \"popover\",\n    popupId: \"presentModeMenu\",\n  });\n  const _screenfull = screenfull as Screenfull;\n  const fullscreenWallRef = React.useRef<Element>();\n  const [fullscreen, setFullscreen] = React.useState(false);\n\n  React.useEffect(() => {\n    if (_screenfull.isEnabled) {\n      _screenfull.on(\"change\", handleFullscreenChange);\n    }\n\n    return () => {\n      _screenfull.off(\"change\", handleFullscreenChange);\n    };\n  });\n\n  const handleFullscreenChange = () => {\n    setFullscreen(_screenfull.isFullscreen);\n  };\n  const handleCopyEventLink = () => {\n    if (copy(`${window.location.origin}/event/${id}`)) {\n      enqueueSnackbar(\n        formatMessage({\n          id: \"Copied!\",\n          defaultMessage: \"Copied!\",\n        }),\n        {\n          variant: \"success\",\n        }\n      );\n    }\n  };\n\n  const menuItemList = [\n    {\n      icon: <FullscreenIcon color=\"inherit\" fontSize=\"inherit\" />,\n      primary: formatMessage({\n        id: \"Present in fullscreen\",\n        defaultMessage: \"Present in fullscreen\",\n      }),\n      secondary: formatMessage({\n        id: \"Display audience questions or poll results on a big screen\",\n        defaultMessage:\n          \"Display audience questions or poll results on a big screen\",\n      }),\n      handleClick: () => {\n        if (_screenfull.isEnabled) {\n          _screenfull.request(fullscreenWallRef.current);\n        } else {\n          enqueueSnackbar(\n            formatMessage({\n              id: \"Your browser does not support fullscreen.\",\n              defaultMessage: \"Your browser does not support fullscreen.\",\n            }),\n            {\n              variant: \"warning\",\n            }\n          );\n        }\n      },\n    },\n    {\n      icon: <LaunchIcon color=\"inherit\" fontSize=\"inherit\" />,\n      primary: formatMessage({\n        id: \"Present on another screen\",\n        defaultMessage: \"Present on another screen\",\n      }),\n      secondary: formatMessage({\n        id: \"Open Present mode in a new window and display it on your extended screen\",\n        defaultMessage:\n          \"Open Present mode in a new window and display it on your extended screen\",\n      }),\n      handleClick: () => {\n        window.open(\n          `/event/${id}/wall`,\n          \"AskentPresentation\",\n          \"menubar=no,location=yes,resizable=yes,scrollbars=no,status=no,width=1066,height=600\"\n        );\n      },\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Button\n        className={classes.presentModeBtn}\n        disableElevation\n        variant=\"contained\"\n        color=\"secondary\"\n        size=\"small\"\n        {...bindHover(popupState)}\n      >\n        <DvrIcon\n          className={classes.presentModeIcon}\n          fontSize=\"inherit\"\n          color=\"inherit\"\n        />\n        <FormattedMessage id=\"Present mode\" defaultMessage=\"Present mode\" />\n      </Button>\n\n      <HoverMenu\n        {...bindMenu(popupState)}\n        keepMounted\n        getContentAnchorEl={null}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"right\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\",\n        }}\n      >\n        {menuItemList.map((item, index) => (\n          <StyledMenuItem\n            dense\n            alignItems=\"flex-start\"\n            key={index}\n            onClick={item.handleClick}\n          >\n            <StyledListItemIcon>{item.icon}</StyledListItemIcon>\n            <StyledListItemText\n              primary={item.primary}\n              secondary={item.secondary}\n            />\n          </StyledMenuItem>\n        ))}\n\n        <Divider component=\"li\" />\n        <StyledMenuItem dense onClick={handleCopyEventLink}>\n          <StyledListItemIcon>\n            <FileCopyOutlinedIcon color=\"inherit\" fontSize=\"inherit\" />\n          </StyledListItemIcon>\n          <StyledListItemText\n            primary={formatMessage({\n              id: \"Copy Present mode link\",\n              defaultMessage: \"Copy Present mode link\",\n            })}\n          />\n        </StyledMenuItem>\n      </HoverMenu>\n\n      <Grid innerRef={fullscreenWallRef}>\n        {fullscreen ? (\n          <WallThemeProvider>\n            <WallComponent />\n          </WallThemeProvider>\n        ) : null}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default PresentModeButton;\n","import React from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport {\n  Container,\n  Box,\n  Typography,\n  AppBar,\n  Toolbar,\n  Paper,\n  IconButton,\n  CircularProgress,\n  Tooltip,\n  Grid,\n} from \"@material-ui/core\";\nimport { RouteTabs } from \"../../../components/Tabs\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport { FormattedDate, FormattedTime, useIntl } from \"react-intl\";\nimport HeaderAction from \"../../../components/HeaderAction\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport PhoneAndroidIcon from \"@material-ui/icons/PhoneAndroid\";\nimport EventSettingDialog, {\n  EventSettingValues,\n} from \"../../../components/EventSettingDialog\";\nimport PresentModeButton from \"./PresentModeButton\";\nimport { EventDetailLiveQueryFieldsFragment } from \"../../../generated/hasuraHooks\";\nimport { getEventDateStatus } from \"../../../utils\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    toolbarLeft: {\n      display: \"flex\",\n    },\n    toolbarCenter: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    toolbarRight: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      alignItems: \"center\",\n    },\n    openSettingText: {\n      display: \"inline-block\",\n      cursor: \"pointer\",\n    },\n    tabAndActionBox: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n    },\n  })\n);\n\ninterface Props {\n  loading: boolean;\n  eventDetailData: EventDetailLiveQueryFieldsFragment | undefined;\n}\n\nconst AdminEventHeader: React.FC<Props> = ({ loading, eventDetailData }) => {\n  const classes = useStyles();\n  const history = useHistory();\n  let { url } = useRouteMatch();\n  const eventSettingState = React.useState<string>(\"\");\n  const [\n    eventSettingDefaultFocus,\n    setEventSettingDefaultFocus,\n  ] = React.useState<keyof EventSettingValues>(\"name\");\n  const { formatMessage } = useIntl();\n\n  const handleOpenSetting = (\n    id: string,\n    defaultFocus?: keyof EventSettingValues\n  ) => {\n    setEventSettingDefaultFocus(defaultFocus || \"name\");\n    eventSettingState[1](id);\n  };\n\n  return (\n    <React.Fragment>\n      <AppBar position=\"static\" elevation={2}>\n        <Container maxWidth=\"lg\">\n          <Toolbar disableGutters>\n            {loading ? (\n              <CircularProgress />\n            ) : (\n              <Grid container>\n                <Grid item xs={4} className={classes.toolbarLeft}>\n                  <IconButton\n                    edge=\"start\"\n                    color=\"inherit\"\n                    size=\"small\"\n                    style={{ width: 48 }}\n                    onClick={() => history.goBack()}\n                  >\n                    <NavigateBeforeIcon fontSize=\"large\" />\n                  </IconButton>\n                  <Box>\n                    <Tooltip\n                      arrow\n                      title={formatMessage({\n                        id: \"Edit event name\",\n                        defaultMessage: \"Edit event name\",\n                      })}\n                      placement=\"right\"\n                    >\n                      <Typography\n                        color=\"inherit\"\n                        className={classes.openSettingText}\n                        onClick={() =>\n                          handleOpenSetting(eventDetailData?.id, \"name\")\n                        }\n                      >\n                        {eventDetailData?.name}\n                      </Typography>\n                    </Tooltip>\n                    <Box>\n                      <Tooltip\n                        arrow\n                        title={formatMessage({\n                          id: \"Edit event date\",\n                          defaultMessage: \"Edit event date\",\n                        })}\n                        placement=\"right\"\n                      >\n                        <Typography\n                          variant=\"body2\"\n                          color=\"inherit\"\n                          className={classes.openSettingText}\n                          onClick={() =>\n                            handleOpenSetting(eventDetailData?.id, \"startAt\")\n                          }\n                        >\n                          <FormattedDate value={eventDetailData?.startAt} />\n                          {\", \"}\n                          <FormattedTime value={eventDetailData?.startAt} />\n                          {\" ~ \"}\n                          <FormattedDate value={eventDetailData?.endAt} />\n                          {\", \"}\n                          <FormattedTime value={eventDetailData?.endAt} />\n                        </Typography>\n                      </Tooltip>\n                    </Box>\n                  </Box>\n                </Grid>\n                <Grid item xs={4} className={classes.toolbarCenter}>\n                  <Tooltip\n                    arrow\n                    title={formatMessage({\n                      id: \"Edit event code\",\n                      defaultMessage: \"Edit event code\",\n                    })}\n                    placement=\"right\"\n                  >\n                    <Typography\n                      color=\"inherit\"\n                      className={classes.openSettingText}\n                      onClick={() =>\n                        handleOpenSetting(eventDetailData?.id, \"code\")\n                      }\n                    >\n                      #{eventDetailData?.code}\n                    </Typography>\n                  </Tooltip>\n                  <Typography color=\"inherit\">\n                    {getEventDateStatus(\n                      eventDetailData?.startAt,\n                      eventDetailData?.endAt,\n                      new Date()\n                    )}\n                  </Typography>\n                </Grid>\n                <Grid item xs={4} className={classes.toolbarRight}>\n                  <PresentModeButton />\n                  <HeaderAction hideUserInfo />\n                </Grid>\n              </Grid>\n            )}\n          </Toolbar>\n        </Container>\n        <Paper elevation={0} square>\n          <Container maxWidth=\"lg\" className={classes.tabAndActionBox}>\n            <RouteTabs\n              tabs={[\n                {\n                  label: formatMessage({\n                    id: \"Audience_Q&A\",\n                    defaultMessage: \"Audience Q&A\",\n                  }),\n                  to: `${url}/questions`,\n                },\n                {\n                  label: formatMessage({\n                    id: \"Live_polls\",\n                    defaultMessage: \"Live polls\",\n                  }),\n                  to: `${url}/polls`,\n                },\n                {\n                  label: formatMessage({\n                    id: \"Analitics\",\n                    defaultMessage: \"Analitics\",\n                  }),\n                  to: `${url}/analytics`,\n                },\n              ]}\n              indicatorColor=\"primary\"\n              textColor=\"primary\"\n            />\n            <Box>\n              <Tooltip\n                title={formatMessage({\n                  id: \"Participant mode\",\n                  defaultMessage: \"Participant mode\",\n                })}\n              >\n                <IconButton\n                  size=\"small\"\n                  onClick={(e) => {\n                    window.open(`/event/${eventDetailData?.id}`);\n                  }}\n                >\n                  <PhoneAndroidIcon fontSize=\"inherit\" color=\"inherit\" />\n                </IconButton>\n              </Tooltip>\n              <Tooltip\n                title={formatMessage({\n                  id: \"Open_event_settings\",\n                  defaultMessage: \"Open event settings\",\n                })}\n              >\n                <Box display=\"inline-block\">\n                  <IconButton\n                    size=\"small\"\n                    disabled={loading && !eventDetailData}\n                    onClick={(e) => handleOpenSetting(eventDetailData?.id)}\n                  >\n                    <SettingsIcon fontSize=\"inherit\" color=\"inherit\" />\n                  </IconButton>\n                </Box>\n              </Tooltip>\n            </Box>\n          </Container>\n        </Paper>\n      </AppBar>\n\n      <EventSettingDialog\n        eventIdState={eventSettingState}\n        defaultFocus={eventSettingDefaultFocus}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default AdminEventHeader;\n","import React from \"react\";\nimport { Switch, useRouteMatch, Redirect, useParams } from \"react-router-dom\";\nimport PrivateRoute from \"../../../components/PrivateRoute\";\nimport Loading from \"../../../components/Loading\";\nimport loadable from \"@loadable/component\";\nimport AdminEventHeader from \"./AdminEventHeader\";\nimport { Layout } from \"../../../components/Layout\";\nimport {\n  useEventDetailLiveQuerySubscription,\n  EventDetailLiveQueryFieldsFragment,\n} from \"../../../generated/hasuraHooks\";\n\nconst QuestionsComponent = loadable(() => import(\"./questions\"), {\n  fallback: <Loading />,\n});\nconst PollsComponent = loadable(() => import(\"./polls\"), {\n  fallback: <Loading />,\n});\nconst AnalyticsComponent = loadable(() => import(\"./analytics\"), {\n  fallback: <Loading />,\n});\n\nconst AdminEvent: React.FC = () => {\n  const { path } = useRouteMatch();\n  const { id } = useParams<{ id: string }>();\n  const [eventDetailData, setEventDetailData] =\n    React.useState<EventDetailLiveQueryFieldsFragment>();\n\n  const { loading } = useEventDetailLiveQuerySubscription({\n    variables: { where: { id: { _eq: id } } },\n    onSubscriptionData: ({ client, subscriptionData }) => {\n      if (subscriptionData.data?.event.length) {\n        setEventDetailData(subscriptionData.data?.event[0]);\n      }\n    },\n  });\n\n  return (\n    <Layout\n      header={\n        <AdminEventHeader eventDetailData={eventDetailData} loading={loading} />\n      }\n      body={\n        <Switch>\n          <Redirect exact path={`${path}`} to={`${path}/questions`} />\n          <PrivateRoute path={`${path}/questions`}>\n            <QuestionsComponent eventDetailData={eventDetailData} />\n          </PrivateRoute>\n          <PrivateRoute path={`${path}/polls`}>\n            <PollsComponent />\n          </PrivateRoute>\n          <PrivateRoute path={`${path}/analytics`}>\n            <AnalyticsComponent />\n          </PrivateRoute>\n        </Switch>\n      }\n    />\n  );\n};\n\nexport default AdminEvent;\n"],"sourceRoot":""}